// WARNING: This file was generated by gen/generator.go

package fortigate

import (
	"fmt"
)

// Policy action (allow/deny/ipsec).
type FirewallPolicyAction string

// Application category ID list.
type FirewallPolicyAppCategory struct {

	// Category IDs.
	Id int `json:"id,omitempty"`
}

// Application ID list.
type FirewallPolicyApplication struct {

	// Application IDs.
	Id int `json:"id,omitempty"`
}

// Enable/disable authentication-based routing.
type FirewallPolicyAuthPath string

// Enable/disable block notification.
type FirewallPolicyBlockNotification string

// Enable to exempt some users from the captive portal.
type FirewallPolicyCaptivePortalExempt string

// Custom fields to append to log messages for this policy.
type FirewallPolicyCustomLogFields struct {

	// Custom log field.
	FieldId string `json:"field-id,omitempty"`
}

// Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
type FirewallPolicyDelayTcpNpuSession string

// Names of devices or device groups that can be matched by the policy.
type FirewallPolicyDevices struct {

	// Device or group name.
	Name string `json:"name,omitempty"`
}

// Enable to change packet's DiffServ values to the specified diffservcode-forward value.
type FirewallPolicyDiffservForward string

// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
type FirewallPolicyDiffservReverse string

// Enable/disable user authentication disclaimer.
type FirewallPolicyDisclaimer string

// Enable DSCP check.
type FirewallPolicyDscpMatch string

// Enable negated DSCP match.
type FirewallPolicyDscpNegate string

// Enable DSRI to ignore HTTP server responses.
type FirewallPolicyDsri string

// Destination address and address group names.
type FirewallPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// When enabled dstaddr specifies what the destination address must NOT be.
type FirewallPolicyDstaddrNegate string

// Outgoing (egress) interface.
type FirewallPolicyDstintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// How to handle sessions if the configuration of this firewall policy changes.
type FirewallPolicyFirewallSessionDirty string

// Enable to prevent source NAT from changing a session's source port.
type FirewallPolicyFixedport string

// Enable/disable Fortinet Single Sign-On.
type FirewallPolicyFsso string

// Names of user groups that can authenticate with this policy.
type FirewallPolicyGroups struct {

	// Group name.
	Name string `json:"name,omitempty"`
}

// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
type FirewallPolicyInbound string

// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
type FirewallPolicyInternetService string

// Custom Internet Service Name.
type FirewallPolicyInternetServiceCustom struct {

	// Custom Internet Service name.
	Name string `json:"name,omitempty"`
}

// Internet Service ID.
type FirewallPolicyInternetServiceId struct {

	// Internet Service ID.
	Id int `json:"id,omitempty"`
}

// When enabled internet-service specifies what the service must NOT be.
type FirewallPolicyInternetServiceNegate string

// Enable to use IP Pools for source NAT.
type FirewallPolicyIppool string

// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
type FirewallPolicyLearningMode string

// Enable or disable logging. Log all sessions or security profile sessions.
type FirewallPolicyLogtraffic string

// Record logs when a session starts and ends.
type FirewallPolicyLogtrafficStart string

// Enable to match packets that have had their destination addresses changed by a VIP.
type FirewallPolicyMatchVip string

// Enable/disable source NAT.
type FirewallPolicyNat string

// Policy-based IPsec VPN: apply destination NAT to inbound traffic.
type FirewallPolicyNatinbound string

// Policy-based IPsec VPN: apply source NAT to outbound traffic.
type FirewallPolicyNatoutbound string

// Enable/disable NTLM authentication.
type FirewallPolicyNtlm string

// HTTP-User-Agent value of supported browsers.
type FirewallPolicyNtlmEnabledBrowsers struct {

	// User agent string.
	UserAgentString string `json:"user-agent-string,omitempty"`
}

// Enable/disable NTLM guest user access.
type FirewallPolicyNtlmGuest string

// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
type FirewallPolicyOutbound string

// Accept UDP packets from any host.
type FirewallPolicyPermitAnyHost string

// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
type FirewallPolicyPermitStunHost string

// IP Pool names.
type FirewallPolicyPoolname struct {

	// IP pool name.
	Name string `json:"name,omitempty"`
}

// Determine whether the firewall policy allows security profile groups or single profiles only.
type FirewallPolicyProfileType string

// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
type FirewallPolicyRadiusMacAuthBypass string

// Enable/disable RADIUS single sign-on (RSSO).
type FirewallPolicyRsso string

// Address names if this is an RTP NAT policy.
type FirewallPolicyRtpAddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable Real Time Protocol (RTP) NAT.
type FirewallPolicyRtpNat string

// Block or monitor connections to Botnet servers or disable Botnet scanning.
type FirewallPolicyScanBotnetConnections string

// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
type FirewallPolicyScheduleTimeout string

// Enable to send a reply when a session is denied or blocked by a firewall policy.
type FirewallPolicySendDenyPacket string

// Service and service group names.
type FirewallPolicyService struct {

	// Service and service group names.
	Name string `json:"name,omitempty"`
}

// When enabled service specifies what the service must NOT be.
type FirewallPolicyServiceNegate string

// Source address and address group names.
type FirewallPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// When enabled srcaddr specifies what the source address must NOT be.
type FirewallPolicySrcaddrNegate string

// Incoming (ingress) interface.
type FirewallPolicySrcintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
type FirewallPolicySslMirror string

// SSL mirror interface name.
type FirewallPolicySslMirrorIntf struct {

	// Mirror Interface name.
	Name string `json:"name,omitempty"`
}

// Enable or disable this policy.
type FirewallPolicyStatus string

// Names of object-tags applied to this policy.
type FirewallPolicyTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable creation of TCP session without SYN flag.
type FirewallPolicyTcpSessionWithoutSyn string

// Enable/disable sending RST packets when TCP sessions expire.
type FirewallPolicyTimeoutSendRst string

// URL category ID list.
type FirewallPolicyUrlCategory struct {

	// URL category ID.
	Id int `json:"id,omitempty"`
}

// Names of individual users that can authenticate with this policy.
type FirewallPolicyUsers struct {

	// Names of individual users that can authenticate with this policy.
	Name string `json:"name,omitempty"`
}

// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
type FirewallPolicyUtmStatus string

// Enable/disable forwarding traffic matching this policy to a configured WCCP server.
type FirewallPolicyWccp string

// Enable/disable WiFi Single Sign On (WSSO).
type FirewallPolicyWsso string

const (

	// Allows session that match the firewall policy.
	FirewallPolicyActionAccept FirewallPolicyAction = "accept"

	// Blocks sessions that match the firewall policy.
	FirewallPolicyActionDeny FirewallPolicyAction = "deny"

	// Firewall policy becomes a policy-based IPsec VPN policy.
	FirewallPolicyActionIpsec FirewallPolicyAction = "ipsec"

	// Enable authentication-based routing.
	FirewallPolicyAuthPathEnable FirewallPolicyAuthPath = "enable"

	// Disable authentication-based routing.
	FirewallPolicyAuthPathDisable FirewallPolicyAuthPath = "disable"

	// Enable setting.
	FirewallPolicyBlockNotificationEnable FirewallPolicyBlockNotification = "enable"

	// Disable setting.
	FirewallPolicyBlockNotificationDisable FirewallPolicyBlockNotification = "disable"

	// Enable exemption of captive portal.
	FirewallPolicyCaptivePortalExemptEnable FirewallPolicyCaptivePortalExempt = "enable"

	// Disable exemption of captive portal.
	FirewallPolicyCaptivePortalExemptDisable FirewallPolicyCaptivePortalExempt = "disable"

	// Enable TCP NPU session delay in order to guarantee packet order of 3-way handshake.
	FirewallPolicyDelayTcpNpuSessionEnable FirewallPolicyDelayTcpNpuSession = "enable"

	// Disable TCP NPU session delay in order to guarantee packet order of 3-way handshake.
	FirewallPolicyDelayTcpNpuSessionDisable FirewallPolicyDelayTcpNpuSession = "disable"

	// Enable WAN optimization.
	FirewallPolicyDiffservForwardEnable FirewallPolicyDiffservForward = "enable"

	// Disable WAN optimization.
	FirewallPolicyDiffservForwardDisable FirewallPolicyDiffservForward = "disable"

	// Enable setting.
	FirewallPolicyDiffservReverseEnable FirewallPolicyDiffservReverse = "enable"

	// Disable setting.
	FirewallPolicyDiffservReverseDisable FirewallPolicyDiffservReverse = "disable"

	// Enable user authentication disclaimer.
	FirewallPolicyDisclaimerEnable FirewallPolicyDisclaimer = "enable"

	// Disable user authentication disclaimer.
	FirewallPolicyDisclaimerDisable FirewallPolicyDisclaimer = "disable"

	// Enable DSCP check.
	FirewallPolicyDscpMatchEnable FirewallPolicyDscpMatch = "enable"

	// Disable DSCP check.
	FirewallPolicyDscpMatchDisable FirewallPolicyDscpMatch = "disable"

	// Enable DSCP negate.
	FirewallPolicyDscpNegateEnable FirewallPolicyDscpNegate = "enable"

	// Disable DSCP negate.
	FirewallPolicyDscpNegateDisable FirewallPolicyDscpNegate = "disable"

	// Enable DSRI.
	FirewallPolicyDsriEnable FirewallPolicyDsri = "enable"

	// Disable DSRI.
	FirewallPolicyDsriDisable FirewallPolicyDsri = "disable"

	// Enable destination address negate.
	FirewallPolicyDstaddrNegateEnable FirewallPolicyDstaddrNegate = "enable"

	// Disable destination address negate.
	FirewallPolicyDstaddrNegateDisable FirewallPolicyDstaddrNegate = "disable"

	// Flush all current sessions accepted by this policy. These sessions must be started and re-matched with policies.
	FirewallPolicyFirewallSessionDirtyCheckAll FirewallPolicyFirewallSessionDirty = "check-all"

	// Continue to allow sessions already accepted by this policy.
	FirewallPolicyFirewallSessionDirtyCheckNew FirewallPolicyFirewallSessionDirty = "check-new"

	// Enable setting.
	FirewallPolicyFixedportEnable FirewallPolicyFixedport = "enable"

	// Disable setting.
	FirewallPolicyFixedportDisable FirewallPolicyFixedport = "disable"

	// Enable setting.
	FirewallPolicyFssoEnable FirewallPolicyFsso = "enable"

	// Disable setting.
	FirewallPolicyFssoDisable FirewallPolicyFsso = "disable"

	// Enable setting.
	FirewallPolicyInboundEnable FirewallPolicyInbound = "enable"

	// Disable setting.
	FirewallPolicyInboundDisable FirewallPolicyInbound = "disable"

	// Enable use of Internet Services in policy.
	FirewallPolicyInternetServiceEnable FirewallPolicyInternetService = "enable"

	// Disable use of Internet Services in policy.
	FirewallPolicyInternetServiceDisable FirewallPolicyInternetService = "disable"

	// Enable negated Internet Service match.
	FirewallPolicyInternetServiceNegateEnable FirewallPolicyInternetServiceNegate = "enable"

	// Disable negated Internet Service match.
	FirewallPolicyInternetServiceNegateDisable FirewallPolicyInternetServiceNegate = "disable"

	// Enable setting.
	FirewallPolicyIppoolEnable FirewallPolicyIppool = "enable"

	// Disable setting.
	FirewallPolicyIppoolDisable FirewallPolicyIppool = "disable"

	// Enable learning mode in firewall policy.
	FirewallPolicyLearningModeEnable FirewallPolicyLearningMode = "enable"

	// Disable learning mode in firewall policy.
	FirewallPolicyLearningModeDisable FirewallPolicyLearningMode = "disable"

	// Log all sessions accepted or denied by this policy.
	FirewallPolicyLogtrafficAll FirewallPolicyLogtraffic = "all"

	// Log traffic that has a security profile applied to it.
	FirewallPolicyLogtrafficUtm FirewallPolicyLogtraffic = "utm"

	// Disable all logging for this policy.
	FirewallPolicyLogtrafficDisable FirewallPolicyLogtraffic = "disable"

	// Enable setting.
	FirewallPolicyLogtrafficStartEnable FirewallPolicyLogtrafficStart = "enable"

	// Disable setting.
	FirewallPolicyLogtrafficStartDisable FirewallPolicyLogtrafficStart = "disable"

	// Match DNATed packet.
	FirewallPolicyMatchVipEnable FirewallPolicyMatchVip = "enable"

	// Do not match DNATed packet.
	FirewallPolicyMatchVipDisable FirewallPolicyMatchVip = "disable"

	// Enable setting.
	FirewallPolicyNatEnable FirewallPolicyNat = "enable"

	// Disable setting.
	FirewallPolicyNatDisable FirewallPolicyNat = "disable"

	// Enable setting.
	FirewallPolicyNatinboundEnable FirewallPolicyNatinbound = "enable"

	// Disable setting.
	FirewallPolicyNatinboundDisable FirewallPolicyNatinbound = "disable"

	// Enable setting.
	FirewallPolicyNatoutboundEnable FirewallPolicyNatoutbound = "enable"

	// Disable setting.
	FirewallPolicyNatoutboundDisable FirewallPolicyNatoutbound = "disable"

	// Enable setting.
	FirewallPolicyNtlmEnable FirewallPolicyNtlm = "enable"

	// Disable setting.
	FirewallPolicyNtlmDisable FirewallPolicyNtlm = "disable"

	// Enable setting.
	FirewallPolicyNtlmGuestEnable FirewallPolicyNtlmGuest = "enable"

	// Disable setting.
	FirewallPolicyNtlmGuestDisable FirewallPolicyNtlmGuest = "disable"

	// Enable setting.
	FirewallPolicyOutboundEnable FirewallPolicyOutbound = "enable"

	// Disable setting.
	FirewallPolicyOutboundDisable FirewallPolicyOutbound = "disable"

	// Enable setting.
	FirewallPolicyPermitAnyHostEnable FirewallPolicyPermitAnyHost = "enable"

	// Disable setting.
	FirewallPolicyPermitAnyHostDisable FirewallPolicyPermitAnyHost = "disable"

	// Enable setting.
	FirewallPolicyPermitStunHostEnable FirewallPolicyPermitStunHost = "enable"

	// Disable setting.
	FirewallPolicyPermitStunHostDisable FirewallPolicyPermitStunHost = "disable"

	// Do not allow security profile groups.
	FirewallPolicyProfileTypeSingle FirewallPolicyProfileType = "single"

	// Allow security profile groups.
	FirewallPolicyProfileTypeGroup FirewallPolicyProfileType = "group"

	// Enable MAC authentication bypass.
	FirewallPolicyRadiusMacAuthBypassEnable FirewallPolicyRadiusMacAuthBypass = "enable"

	// Disable MAC authentication bypass.
	FirewallPolicyRadiusMacAuthBypassDisable FirewallPolicyRadiusMacAuthBypass = "disable"

	// Enable setting.
	FirewallPolicyRssoEnable FirewallPolicyRsso = "enable"

	// Disable setting.
	FirewallPolicyRssoDisable FirewallPolicyRsso = "disable"

	// Disable setting.
	FirewallPolicyRtpNatDisable FirewallPolicyRtpNat = "disable"

	// Enable setting.
	FirewallPolicyRtpNatEnable FirewallPolicyRtpNat = "enable"

	// Do not scan connections to botnet servers.
	FirewallPolicyScanBotnetConnectionsDisable FirewallPolicyScanBotnetConnections = "disable"

	// Block connections to botnet servers.
	FirewallPolicyScanBotnetConnectionsBlock FirewallPolicyScanBotnetConnections = "block"

	// Log connections to botnet servers.
	FirewallPolicyScanBotnetConnectionsMonitor FirewallPolicyScanBotnetConnections = "monitor"

	// Enable schedule timeout.
	FirewallPolicyScheduleTimeoutEnable FirewallPolicyScheduleTimeout = "enable"

	// Disable schedule timeout.
	FirewallPolicyScheduleTimeoutDisable FirewallPolicyScheduleTimeout = "disable"

	// Disable deny-packet sending.
	FirewallPolicySendDenyPacketDisable FirewallPolicySendDenyPacket = "disable"

	// Enable deny-packet sending.
	FirewallPolicySendDenyPacketEnable FirewallPolicySendDenyPacket = "enable"

	// Enable negated service match.
	FirewallPolicyServiceNegateEnable FirewallPolicyServiceNegate = "enable"

	// Disable negated service match.
	FirewallPolicyServiceNegateDisable FirewallPolicyServiceNegate = "disable"

	// Enable source address negate.
	FirewallPolicySrcaddrNegateEnable FirewallPolicySrcaddrNegate = "enable"

	// Disable source address negate.
	FirewallPolicySrcaddrNegateDisable FirewallPolicySrcaddrNegate = "disable"

	// Enable SSL mirror.
	FirewallPolicySslMirrorEnable FirewallPolicySslMirror = "enable"

	// Disable SSL mirror.
	FirewallPolicySslMirrorDisable FirewallPolicySslMirror = "disable"

	// Enable setting.
	FirewallPolicyStatusEnable FirewallPolicyStatus = "enable"

	// Disable setting.
	FirewallPolicyStatusDisable FirewallPolicyStatus = "disable"

	// Enable TCP session without SYN.
	FirewallPolicyTcpSessionWithoutSynAll FirewallPolicyTcpSessionWithoutSyn = "all"

	// Enable TCP session data only.
	FirewallPolicyTcpSessionWithoutSynDataOnly FirewallPolicyTcpSessionWithoutSyn = "data-only"

	// Disable TCP session without SYN.
	FirewallPolicyTcpSessionWithoutSynDisable FirewallPolicyTcpSessionWithoutSyn = "disable"

	// Enable sending of RST packet upon TCP session expiration.
	FirewallPolicyTimeoutSendRstEnable FirewallPolicyTimeoutSendRst = "enable"

	// Disable sending of RST packet upon TCP session expiration.
	FirewallPolicyTimeoutSendRstDisable FirewallPolicyTimeoutSendRst = "disable"

	// Enable setting.
	FirewallPolicyUtmStatusEnable FirewallPolicyUtmStatus = "enable"

	// Disable setting.
	FirewallPolicyUtmStatusDisable FirewallPolicyUtmStatus = "disable"

	// Enable WCCP setting.
	FirewallPolicyWccpEnable FirewallPolicyWccp = "enable"

	// Disable WCCP setting.
	FirewallPolicyWccpDisable FirewallPolicyWccp = "disable"

	// Enable setting.
	FirewallPolicyWssoEnable FirewallPolicyWsso = "enable"

	// Disable setting.
	FirewallPolicyWssoDisable FirewallPolicyWsso = "disable"
)

// Configure IPv4 policies.
type FirewallPolicy struct {

	// Policy action (allow/deny/ipsec).
	Action FirewallPolicyAction `json:"action,omitempty"`

	// Application category ID list.
	AppCategory []FirewallPolicyAppCategory `json:"app-category,omitempty"`

	// Application ID list.
	Application []FirewallPolicyApplication `json:"application,omitempty"`

	// Name of an existing Application list.
	ApplicationList string `json:"application-list,omitempty"`

	// HTTPS server certificate for policy authentication.
	AuthCert string `json:"auth-cert,omitempty"`

	// Enable/disable authentication-based routing.
	AuthPath FirewallPolicyAuthPath `json:"auth-path,omitempty"`

	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr string `json:"auth-redirect-addr,omitempty"`

	// Name of an existing Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// Enable/disable block notification.
	BlockNotification FirewallPolicyBlockNotification `json:"block-notification,omitempty"`

	// Enable to exempt some users from the captive portal.
	CaptivePortalExempt FirewallPolicyCaptivePortalExempt `json:"captive-portal-exempt,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Custom fields to append to log messages for this policy.
	CustomLogFields []FirewallPolicyCustomLogFields `json:"custom-log-fields,omitempty"`

	// Enable TCP NPU session delay to guarantee packet order of 3-way handshake.
	DelayTcpNpuSession FirewallPolicyDelayTcpNpuSession `json:"delay-tcp-npu-session,omitempty"`

	// Names of devices or device groups that can be matched by the policy.
	Devices []FirewallPolicyDevices `json:"devices,omitempty"`

	// Enable to change packet's DiffServ values to the specified diffservcode-forward value.
	DiffservForward FirewallPolicyDiffservForward `json:"diffserv-forward,omitempty"`

	// Enable to change packet's reverse (reply) DiffServ values to the specified diffservcode-rev value.
	DiffservReverse FirewallPolicyDiffservReverse `json:"diffserv-reverse,omitempty"`

	// Change packet's DiffServ to this value.
	DiffservcodeForward string `json:"diffservcode-forward,omitempty"`

	// Change packet's reverse (reply) DiffServ to this value.
	DiffservcodeRev string `json:"diffservcode-rev,omitempty"`

	// Enable/disable user authentication disclaimer.
	Disclaimer FirewallPolicyDisclaimer `json:"disclaimer,omitempty"`

	// Name of an existing DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Name of an existing DNS filter profile.
	DnsfilterProfile string `json:"dnsfilter-profile,omitempty"`

	// Enable DSCP check.
	DscpMatch FirewallPolicyDscpMatch `json:"dscp-match,omitempty"`

	// Enable negated DSCP match.
	DscpNegate FirewallPolicyDscpNegate `json:"dscp-negate,omitempty"`

	// DSCP value.
	DscpValue string `json:"dscp-value,omitempty"`

	// Enable DSRI to ignore HTTP server responses.
	Dsri FirewallPolicyDsri `json:"dsri,omitempty"`

	// Destination address and address group names.
	Dstaddr []FirewallPolicyDstaddr `json:"dstaddr,omitempty"`

	// When enabled dstaddr specifies what the destination address must NOT be.
	DstaddrNegate FirewallPolicyDstaddrNegate `json:"dstaddr-negate,omitempty"`

	// Outgoing (egress) interface.
	Dstintf []FirewallPolicyDstintf `json:"dstintf,omitempty"`

	// How to handle sessions if the configuration of this firewall policy changes.
	FirewallSessionDirty FirewallPolicyFirewallSessionDirty `json:"firewall-session-dirty,omitempty"`

	// Enable to prevent source NAT from changing a session's source port.
	Fixedport FirewallPolicyFixedport `json:"fixedport,omitempty"`

	// Enable/disable Fortinet Single Sign-On.
	Fsso FirewallPolicyFsso `json:"fsso,omitempty"`

	// FSSO agent to use for NTLM authentication.
	FssoAgentForNtlm string `json:"fsso-agent-for-ntlm,omitempty"`

	// Label for the policy that appears when the GUI is in Global View mode.
	GlobalLabel string `json:"global-label,omitempty"`

	// Names of user groups that can authenticate with this policy.
	Groups []FirewallPolicyGroups `json:"groups,omitempty"`

	// Name of an existing ICAP profile.
	IcapProfile string `json:"icap-profile,omitempty"`

	// Name of identity-based routing rule.
	IdentityBasedRoute string `json:"identity-based-route,omitempty"`

	// Policy-based IPsec VPN: only traffic from the remote network can initiate a VPN.
	Inbound FirewallPolicyInbound `json:"inbound,omitempty"`

	// Enable/disable use of Internet Services for this policy. If enabled, destination address and service are not used.
	InternetService FirewallPolicyInternetService `json:"internet-service,omitempty"`

	// Custom Internet Service Name.
	InternetServiceCustom []FirewallPolicyInternetServiceCustom `json:"internet-service-custom,omitempty"`

	// Internet Service ID.
	InternetServiceId []FirewallPolicyInternetServiceId `json:"internet-service-id,omitempty"`

	// When enabled internet-service specifies what the service must NOT be.
	InternetServiceNegate FirewallPolicyInternetServiceNegate `json:"internet-service-negate,omitempty"`

	// Enable to use IP Pools for source NAT.
	Ippool FirewallPolicyIppool `json:"ippool,omitempty"`

	// Name of an existing IPS sensor.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Label for the policy that appears when the GUI is in Section View mode.
	Label string `json:"label,omitempty"`

	// Enable to allow everything, but log all of the meaningful data for security information gathering. A learning report will be generated.
	LearningMode FirewallPolicyLearningMode `json:"learning-mode,omitempty"`

	// Enable or disable logging. Log all sessions or security profile sessions.
	Logtraffic FirewallPolicyLogtraffic `json:"logtraffic,omitempty"`

	// Record logs when a session starts and ends.
	LogtrafficStart FirewallPolicyLogtrafficStart `json:"logtraffic-start,omitempty"`

	// Enable to match packets that have had their destination addresses changed by a VIP.
	MatchVip FirewallPolicyMatchVip `json:"match-vip,omitempty"`

	// Policy name.
	Name string `json:"name,omitempty"`

	// Enable/disable source NAT.
	Nat FirewallPolicyNat `json:"nat,omitempty"`

	// Policy-based IPsec VPN: apply destination NAT to inbound traffic.
	Natinbound FirewallPolicyNatinbound `json:"natinbound,omitempty"`

	// Policy-based IPsec VPN: source NAT IP address for outgoing traffic.
	Natip string `json:"natip,omitempty"`

	// Policy-based IPsec VPN: apply source NAT to outbound traffic.
	Natoutbound FirewallPolicyNatoutbound `json:"natoutbound,omitempty"`

	// Enable/disable NTLM authentication.
	Ntlm FirewallPolicyNtlm `json:"ntlm,omitempty"`

	// HTTP-User-Agent value of supported browsers.
	NtlmEnabledBrowsers []FirewallPolicyNtlmEnabledBrowsers `json:"ntlm-enabled-browsers,omitempty"`

	// Enable/disable NTLM guest user access.
	NtlmGuest FirewallPolicyNtlmGuest `json:"ntlm-guest,omitempty"`

	// Policy-based IPsec VPN: only traffic from the internal network can initiate a VPN.
	Outbound FirewallPolicyOutbound `json:"outbound,omitempty"`

	// Per-IP traffic shaper.
	PerIpShaper string `json:"per-ip-shaper,omitempty"`

	// Accept UDP packets from any host.
	PermitAnyHost FirewallPolicyPermitAnyHost `json:"permit-any-host,omitempty"`

	// Accept UDP packets from any Session Traversal Utilities for NAT (STUN) host.
	PermitStunHost FirewallPolicyPermitStunHost `json:"permit-stun-host,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// IP Pool names.
	Poolname []FirewallPolicyPoolname `json:"poolname,omitempty"`

	// Name of profile group.
	ProfileGroup string `json:"profile-group,omitempty"`

	// Name of an existing Protocol options profile.
	ProfileProtocolOptions string `json:"profile-protocol-options,omitempty"`

	// Determine whether the firewall policy allows security profile groups or single profiles only.
	ProfileType FirewallPolicyProfileType `json:"profile-type,omitempty"`

	// Enable MAC authentication bypass. The bypassed MAC address must be received from RADIUS server.
	RadiusMacAuthBypass FirewallPolicyRadiusMacAuthBypass `json:"radius-mac-auth-bypass,omitempty"`

	// URL users are directed to after seeing and accepting the disclaimer or authenticating.
	RedirectUrl string `json:"redirect-url,omitempty"`

	// Override the default replacement message group for this policy.
	ReplacemsgOverrideGroup string `json:"replacemsg-override-group,omitempty"`

	// Enable/disable RADIUS single sign-on (RSSO).
	Rsso FirewallPolicyRsso `json:"rsso,omitempty"`

	// Address names if this is an RTP NAT policy.
	RtpAddr []FirewallPolicyRtpAddr `json:"rtp-addr,omitempty"`

	// Enable Real Time Protocol (RTP) NAT.
	RtpNat FirewallPolicyRtpNat `json:"rtp-nat,omitempty"`

	// Block or monitor connections to Botnet servers or disable Botnet scanning.
	ScanBotnetConnections FirewallPolicyScanBotnetConnections `json:"scan-botnet-connections,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Enable to force current sessions to end when the schedule object times out. Disable allows them to end from inactivity.
	ScheduleTimeout FirewallPolicyScheduleTimeout `json:"schedule-timeout,omitempty"`

	// Enable to send a reply when a session is denied or blocked by a firewall policy.
	SendDenyPacket FirewallPolicySendDenyPacket `json:"send-deny-packet,omitempty"`

	// Service and service group names.
	Service []FirewallPolicyService `json:"service,omitempty"`

	// When enabled service specifies what the service must NOT be.
	ServiceNegate FirewallPolicyServiceNegate `json:"service-negate,omitempty"`

	// Session TTL in seconds for sessions accepted by this policy. 0 means use the system default session TTL.
	SessionTtl int `json:"session-ttl,omitempty"`

	// Name of an existing Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Source address and address group names.
	Srcaddr []FirewallPolicySrcaddr `json:"srcaddr,omitempty"`

	// When enabled srcaddr specifies what the source address must NOT be.
	SrcaddrNegate FirewallPolicySrcaddrNegate `json:"srcaddr-negate,omitempty"`

	// Incoming (ingress) interface.
	Srcintf []FirewallPolicySrcintf `json:"srcintf,omitempty"`

	// Enable to copy decrypted SSL traffic to a FortiGate interface (called SSL mirroring).
	SslMirror FirewallPolicySslMirror `json:"ssl-mirror,omitempty"`

	// SSL mirror interface name.
	SslMirrorIntf []FirewallPolicySslMirrorIntf `json:"ssl-mirror-intf,omitempty"`

	// Name of an existing SSL SSH profile.
	SslSshProfile string `json:"ssl-ssh-profile,omitempty"`

	// Enable or disable this policy.
	Status FirewallPolicyStatus `json:"status,omitempty"`

	// Names of object-tags applied to this policy.
	Tags []FirewallPolicyTags `json:"tags,omitempty"`

	// Receiver TCP maximum segment size (MSS).
	TcpMssReceiver int `json:"tcp-mss-receiver,omitempty"`

	// Sender TCP maximum segment size (MSS).
	TcpMssSender int `json:"tcp-mss-sender,omitempty"`

	// Enable/disable creation of TCP session without SYN flag.
	TcpSessionWithoutSyn FirewallPolicyTcpSessionWithoutSyn `json:"tcp-session-without-syn,omitempty"`

	// Enable/disable sending RST packets when TCP sessions expire.
	TimeoutSendRst FirewallPolicyTimeoutSendRst `json:"timeout-send-rst,omitempty"`

	// Traffic shaper.
	TrafficShaper string `json:"traffic-shaper,omitempty"`

	// Reverse traffic shaper.
	TrafficShaperReverse string `json:"traffic-shaper-reverse,omitempty"`

	// URL category ID list.
	UrlCategory []FirewallPolicyUrlCategory `json:"url-category,omitempty"`

	// Names of individual users that can authenticate with this policy.
	Users []FirewallPolicyUsers `json:"users,omitempty"`

	// Enable to add one or more security profiles (AV, IPS, etc.) to the firewall policy.
	UtmStatus FirewallPolicyUtmStatus `json:"utm-status,omitempty"`

	// Universally Unique Identifier (UUID; automatically assigned but can be manually reset).
	Uuid string `json:"uuid,omitempty"`

	// VLAN forward direction user priority: 255 passthrough, 0 lowest, 7 highest.
	VlanCosFwd int `json:"vlan-cos-fwd,omitempty"`

	// VLAN reverse direction user priority: 255 passthrough, 0 lowest, 7 highest..
	VlanCosRev int `json:"vlan-cos-rev,omitempty"`

	// Name of an existing VoIP profile.
	VoipProfile string `json:"voip-profile,omitempty"`

	// Policy-based IPsec VPN: name of the IPsec VPN Phase 1.
	Vpntunnel string `json:"vpntunnel,omitempty"`

	// Name of an existing Web application firewall profile.
	WafProfile string `json:"waf-profile,omitempty"`

	// Enable/disable forwarding traffic matching this policy to a configured WCCP server.
	Wccp FirewallPolicyWccp `json:"wccp,omitempty"`

	// Name of an existing Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`

	// Enable/disable WiFi Single Sign On (WSSO).
	Wsso FirewallPolicyWsso `json:"wsso,omitempty"`
}

// The results of a Get or List operation
type FirewallPolicyResults struct {
	Results []*FirewallPolicy `json:"results"`
	Mkey    int               `json:"mkey"`
	Result
}

// List all FirewallPolicys
func (c *WebClient) ListFirewallPolicys() (res []*FirewallPolicy, err error) {
	var errmsg Result
	var results FirewallPolicyResults
	_, err = c.napping.Get(c.URL+"/api/v2/cmdb/firewall/policy", nil, &results, nil)
	if err != nil {
		return []*FirewallPolicy{}, fmt.Errorf("error listing FirewallPolicys: %s", err.Error())
	}
	if results.HTTPStatus != 200 {
		if errmsg.HTTPStatus == 404 {
			return []*FirewallPolicy{}, fmt.Errorf("error listing FirewallPolicy: not found")
		} else {
			return []*FirewallPolicy{}, fmt.Errorf("error listing FirewallPolicy: %s", errmsg.Status)
		}
	}
	res = results.Results
	return
}

// Get a FirewallPolicy by name
func (c *WebClient) GetFirewallPolicy(name string) (res *FirewallPolicy, err error) {
	var errmsg Result
	var results FirewallPolicyResults
	_, err = c.napping.Get(c.URL+"/api/v2/cmdb/firewall/policy/"+name, nil, &results, &errmsg)
	if err != nil {
		return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': %s", name, err.Error())
	}
	if results.HTTPStatus != 200 {
		if errmsg.HTTPStatus == 404 {
			return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': not found", name)
		} else {
			return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': %s", name, errmsg.Status)
		}
	}
	if len(results.Results) == 0 {
		return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': not found", name)
	}

	res = results.Results[0]
	return
}

// Create a new FirewallPolicy
func (c *WebClient) CreateFirewallPolicy(obj *FirewallPolicy) (id int, err error) {
	var errmsg Result
	var results FirewallPolicyResults
	_, err = c.napping.Post(c.URL+"/api/v2/cmdb/firewall/policy", obj, &results, &errmsg)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallPolicy '%s': %s", obj.Name, err.Error())
	}
	if results.HTTPStatus == 200 {
		return
	}
	if errmsg.HTTPStatus != 200 {
		return 0, fmt.Errorf("error creating FirewallPolicy '%s': %s", obj.Name, errmsg.Status)
	}

	return
}

// Update a FirewallPolicy
func (c *WebClient) UpdateFirewallPolicy(obj *FirewallPolicy) (err error) {
	var errmsg Result
	var results FirewallPolicyResults
	_, err = c.napping.Put(c.URL+"/api/v2/cmdb/firewall/policy/"+obj.Name, obj, &results, &errmsg)
	if err != nil {
		return fmt.Errorf("error updating FirewallPolicy '%s': %s", obj.Name, err.Error())
	}
	if results.HTTPStatus != 200 {
		if errmsg.HTTPStatus == 404 {
			return fmt.Errorf("error updating FirewallPolicy '%s': not found", obj.Name)
		} else {
			return fmt.Errorf("error updating FirewallPolicy '%s': %s", obj.Name, errmsg.Status)
		}
	}

	return
}

// Delete a FirewallPolicy by name
func (c *WebClient) DeleteFirewallPolicy(name string) (err error) {
	var errmsg Result
	var results FirewallPolicyResults
	_, err = c.napping.Delete(c.URL+"/api/v2/cmdb/firewall/policy/"+name, nil, &results, &errmsg)
	if err != nil {
		return fmt.Errorf("error deleting FirewallPolicy '%s': %s", name, err.Error())
	}
	if results.HTTPStatus == 200 {
		return
	}
	if errmsg.HTTPStatus != 200 {
		if errmsg.HTTPStatus == 404 {
			return fmt.Errorf("error deleting FirewallPolicy '%s': not found", name)
		}
		return fmt.Errorf("error deleting FirewallPolicy '%s': %s", name, errmsg.Status)
	}

	return
}

// List all FirewallPolicys
func (c *FakeClient) ListFirewallPolicys() (res []*FirewallPolicy, err error) {
	for _, r := range c.FirewallPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallPolicy by name
func (c *FakeClient) GetFirewallPolicy(name string) (*FirewallPolicy, error) {
	if res, ok := c.FirewallPolicys[name]; ok {
		return res, nil
	} else {
		return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': not found", name)
	}
}

// Create a new FirewallPolicy
func (c *FakeClient) CreateFirewallPolicy(obj *FirewallPolicy) (id int, err error) {
	c.FirewallPolicys[obj.Name] = obj
	return 0, nil
}

// Update a FirewallPolicy
func (c *FakeClient) UpdateFirewallPolicy(obj *FirewallPolicy) (err error) {
	c.FirewallPolicys[obj.Name] = obj
	return nil
}

// Delete a FirewallPolicy by name
func (c *FakeClient) DeleteFirewallPolicy(name string) (err error) {
	delete(c.FirewallPolicys, name)
	return nil
}
