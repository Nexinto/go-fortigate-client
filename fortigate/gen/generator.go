package main

import (
	"github.com/Nexinto/go-fortigate-client/fortigate"

	"bytes"
	_ "fmt"
	"strings"
	"text/template"

	"io/ioutil"
	"os"
)

func main() {

	c := fortigate.NewWebClient(fortigate.WebClient{URL: os.Getenv("FORTIGATE_URL"), ApiKey: os.Getenv("FORTIGATE_API_KEY")})

	generate := map[string]string{
		"VIP":             "/cmdb/firewall/vip",
		"FirewallAddress": "/cmdb/firewall/address",
		"FirewallPolicy":  "/cmdb/firewall/policy",
	}

	tt := `// WARNING: This file was generated by gen/generator.go

package fortigate

import (
  "fmt"
)

{{ $root := . -}}

{{ range $a, $b := .Results.Children -}}
{{ if (eq $b.Type "option") -}}
// {{ $b.Help }}
type {{$root.TypeName}}{{ makefield $a }} {{ gotype $b }}

{{ end -}}
{{ if (eq $b.Category "table") -}}
// {{ $b.Help }}
type {{$root.TypeName}}{{ makefield $a }} struct {
{{ range $c, $d := $b.Children }}
  // {{ $d.Help }}
  {{ makefield $c }} {{ gotype $d }} {{ bq }}json:"{{ $c }},omitempty"{{ bq }}
{{ end -}}
}

{{ end -}}
{{ end -}}

const (
{{ range $a, $b := .Results.Children -}}
{{ if (eq $b.Type "option") -}}
{{- range $o := $b.Options }}
  // {{ $o.Help }}
  {{$root.TypeName}}{{ makefield $a }}{{makefield $o.Name}} {{$root.TypeName}}{{ makefield $a }} = "{{ $o.Name }}"
{{ end -}}
{{ end -}}
{{ end -}}
)

// {{.Results.Help}}
type {{.TypeName}} struct {
{{ range $a, $b := .Results.Children }}
  // {{ $b.Help }}
{{- if (eq $b.Category "table") }}
  {{ makefield $a }} []{{$root.TypeName}}{{ makefield $a }} {{ bq }}json:"{{ $a }},omitempty"{{ bq }}
{{ else if (eq $b.Type "option") }}
  {{ makefield $a }} {{$root.TypeName}}{{ makefield $a }} {{ bq }}json:"{{ $a }},omitempty"{{ bq }}
{{ else }}
  {{ makefield $a }} {{ gotype $b }} {{ bq }}json:"{{ $a }},omitempty"{{ bq }}
{{ end -}}
{{ end -}}
}

// The results of a Get or List operation
type {{.TypeName}}Results struct {
  Results []{{.TypeName}} {{ bq }}json:"results"{{ bq }}
  Result
}

// List all {{.TypeName}}s
func (c *WebClient) List{{.TypeName}}s() (res []{{.TypeName}}, err error) {
  var errmsg Result
  var results {{.TypeName}}Results
   _, err = c.napping.Get(c.URL+"/api/v2{{ .Path }}", nil, &results, nil)
	if err != nil {
    return []{{.TypeName}}{}, fmt.Errorf("error listing {{.TypeName}}s: %s", err.Error())
  }
	if results.HTTPStatus != 200 {
    if errmsg.HTTPStatus == 404 {
      return []{{.TypeName}}{}, fmt.Errorf("error listing {{.TypeName}}: not found")
    } else {
      return []{{.TypeName}}{}, fmt.Errorf("error listing {{.TypeName}}: %s", errmsg.Status)
    }
  }
  res = results.Results
  return
}

// Get a {{.TypeName}} by name
func (c *WebClient) Get{{.TypeName}}(name string) (res {{.TypeName}}, err error) {
  var errmsg Result
  var results {{.TypeName}}Results
  _, err = c.napping.Get(c.URL+"/api/v2{{ .Path }}/" + name, nil, &results, &errmsg)
	if err != nil {
    return {{.TypeName}}{}, fmt.Errorf("error getting {{.TypeName}} '%s': %s", name, err.Error())
  }
	if results.HTTPStatus != 200 {
    if errmsg.HTTPStatus == 404 {
      return {{.TypeName}}{}, fmt.Errorf("error getting {{.TypeName}} '%s': not found", name)
    } else {
      return {{.TypeName}}{}, fmt.Errorf("error getting {{.TypeName}} '%s': %s", name, errmsg.Status)
    }
  }
	if len(results.Results) == 0 {
    return {{.TypeName}}{}, fmt.Errorf("error getting {{.TypeName}} '%s': not found", name)
  }

  res = results.Results[0]
  return
}

// Create a new {{.TypeName}}
func (c *WebClient) Create{{.TypeName}}(obj *{{.TypeName}}) (err error) {
  var errmsg Result
  var results {{.TypeName}}Results
  _, err = c.napping.Post(c.URL+"/api/v2{{ .Path }}", obj, &results, &errmsg)
	if err != nil {
    return fmt.Errorf("error creating {{.TypeName}} '%s': %s", obj.Name, err.Error())
  }
  if results.HTTPStatus == 200 {
    return
  }
	if errmsg.HTTPStatus != 200 {
    return fmt.Errorf("error creating {{.TypeName}} '%s': %s", obj.Name, errmsg.Status)
  }

  return
}

// Update a {{.TypeName}}
func (c *WebClient) Update{{.TypeName}}(obj *{{.TypeName}}) (err error) {
  var errmsg Result
  var results {{.TypeName}}Results
  _, err = c.napping.Put(c.URL+"/api/v2{{ .Path }}/" + obj.Name, obj, &results, &errmsg)
	if err != nil {
    return fmt.Errorf("error updating {{.TypeName}} '%s': %s", obj.Name, err.Error())
  }
	if results.HTTPStatus != 200 {
    if errmsg.HTTPStatus == 404 {
      return fmt.Errorf("error updating {{.TypeName}} '%s': not found", obj.Name)
    } else {
      return fmt.Errorf("error updating {{.TypeName}} '%s': %s", obj.Name, errmsg.Status)
    }
  }

  return
}

// Delete a {{.TypeName}} by name
func (c *WebClient) Delete{{.TypeName}}(name string) (err error) {
  var errmsg Result
  var results {{.TypeName}}Results
  _, err = c.napping.Delete(c.URL+"/api/v2{{ .Path }}/" + name, nil, &results, &errmsg)
	if err != nil {
    return fmt.Errorf("error deleting {{.TypeName}} '%s': %s", name, err.Error())
  }
  if results.HTTPStatus == 200 {
    return
  }
	if errmsg.HTTPStatus != 200 {
    if errmsg.HTTPStatus == 404 {
      return fmt.Errorf("error deleting {{.TypeName}} '%s': not found", name)
    }
    return fmt.Errorf("error deleting {{.TypeName}} '%s': %s", name, errmsg.Status)
  }

  return
}
`

	funcMap := template.FuncMap{
		"makefield": func(tt string) string {
			parts := strings.Split(tt, "-")
			for i, p := range parts {
				parts[i] = strings.Title(p)
			}
			return strings.Join(parts, "")
		},
		"gotype": func(tt fortigate.SchemaChild) string {
			switch tt.Type {
			case "integer":
				return "int"
			default:
				return "string"
			}
		},
		"bq": func() string {
			return "`"
		},
	}

	t, err := template.New("type").Funcs(funcMap).Parse(tt)
	if err != nil {
		panic(err)
	}

	for typ, path := range generate {
		schema := c.Schema(path)

		schema.TypeName = typ
		schema.Path = path

		var buffer bytes.Buffer

		err := t.Execute(&buffer, schema)
		if err != nil {
			panic(err)
		}

		err = ioutil.WriteFile("./fortigate/"+strings.ToLower(typ)+".go", buffer.Bytes(), 0644)
		if err != nil {
			panic(err)
		}
	}

	tt = `// WARNING: This file was generated by gen/generator.go

package fortigate

// A fortigate API client
type Client interface {
{{ range $a, $b := . }}

  // List all {{ $a }}s
  List{{ $a }}s() ([]{{ $a }},error)

  // Get a {{ $a }} by name
  Get{{ $a }}(name string) ({{ $a }},error)

  // Create a new {{ $a }}
  Create{{ $a }}(*{{ $a }}) error

  // Update a {{ $a }}
  Update{{ $a }}(*{{ $a }}) error

  // Delete a {{ $a }} by name
  Delete{{ $a }}(name string) error
{{ end }}
}
`

	t, err = template.New("client").Parse(tt)
	if err != nil {
		panic(err)
	}

	var buffer bytes.Buffer
	err = t.Execute(&buffer, generate)
	if err != nil {
		panic(err)
	}

	err = ioutil.WriteFile("./fortigate/client.go", buffer.Bytes(), 0644)
	if err != nil {
		panic(err)
	}

}
