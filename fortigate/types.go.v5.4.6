// WARNING: This file was generated by generator.go

package fortigate

import (
	"fmt"
	"net/http"
	"strconv"
)

// A fortigate API client
type Client interface {

	// List all FirewallAddresss
	ListFirewallAddresss() ([]*FirewallAddress, error)

	// Get a FirewallAddress by name
	GetFirewallAddress(mkey string) (*FirewallAddress, error)

	// Create a new FirewallAddress
	CreateFirewallAddress(*FirewallAddress) (string, error)

	// Update a FirewallAddress
	UpdateFirewallAddress(*FirewallAddress) error

	// Delete a FirewallAddress by name
	DeleteFirewallAddress(mkey string) error

	// List all FirewallMulticastAddresss
	ListFirewallMulticastAddresss() ([]*FirewallMulticastAddress, error)

	// Get a FirewallMulticastAddress by name
	GetFirewallMulticastAddress(mkey string) (*FirewallMulticastAddress, error)

	// Create a new FirewallMulticastAddress
	CreateFirewallMulticastAddress(*FirewallMulticastAddress) (string, error)

	// Update a FirewallMulticastAddress
	UpdateFirewallMulticastAddress(*FirewallMulticastAddress) error

	// Delete a FirewallMulticastAddress by name
	DeleteFirewallMulticastAddress(mkey string) error

	// List all FirewallAddress6s
	ListFirewallAddress6s() ([]*FirewallAddress6, error)

	// Get a FirewallAddress6 by name
	GetFirewallAddress6(mkey string) (*FirewallAddress6, error)

	// Create a new FirewallAddress6
	CreateFirewallAddress6(*FirewallAddress6) (string, error)

	// Update a FirewallAddress6
	UpdateFirewallAddress6(*FirewallAddress6) error

	// Delete a FirewallAddress6 by name
	DeleteFirewallAddress6(mkey string) error

	// List all FirewallMulticastAddress6s
	ListFirewallMulticastAddress6s() ([]*FirewallMulticastAddress6, error)

	// Get a FirewallMulticastAddress6 by name
	GetFirewallMulticastAddress6(mkey string) (*FirewallMulticastAddress6, error)

	// Create a new FirewallMulticastAddress6
	CreateFirewallMulticastAddress6(*FirewallMulticastAddress6) (string, error)

	// Update a FirewallMulticastAddress6
	UpdateFirewallMulticastAddress6(*FirewallMulticastAddress6) error

	// Delete a FirewallMulticastAddress6 by name
	DeleteFirewallMulticastAddress6(mkey string) error

	// List all FirewallAddrgrps
	ListFirewallAddrgrps() ([]*FirewallAddrgrp, error)

	// Get a FirewallAddrgrp by name
	GetFirewallAddrgrp(mkey string) (*FirewallAddrgrp, error)

	// Create a new FirewallAddrgrp
	CreateFirewallAddrgrp(*FirewallAddrgrp) (string, error)

	// Update a FirewallAddrgrp
	UpdateFirewallAddrgrp(*FirewallAddrgrp) error

	// Delete a FirewallAddrgrp by name
	DeleteFirewallAddrgrp(mkey string) error

	// List all FirewallAddrgrp6s
	ListFirewallAddrgrp6s() ([]*FirewallAddrgrp6, error)

	// Get a FirewallAddrgrp6 by name
	GetFirewallAddrgrp6(mkey string) (*FirewallAddrgrp6, error)

	// Create a new FirewallAddrgrp6
	CreateFirewallAddrgrp6(*FirewallAddrgrp6) (string, error)

	// Update a FirewallAddrgrp6
	UpdateFirewallAddrgrp6(*FirewallAddrgrp6) error

	// Delete a FirewallAddrgrp6 by name
	DeleteFirewallAddrgrp6(mkey string) error

	// List all FirewallIppools
	ListFirewallIppools() ([]*FirewallIppool, error)

	// Get a FirewallIppool by name
	GetFirewallIppool(mkey string) (*FirewallIppool, error)

	// Create a new FirewallIppool
	CreateFirewallIppool(*FirewallIppool) (string, error)

	// Update a FirewallIppool
	UpdateFirewallIppool(*FirewallIppool) error

	// Delete a FirewallIppool by name
	DeleteFirewallIppool(mkey string) error

	// List all FirewallIppool6s
	ListFirewallIppool6s() ([]*FirewallIppool6, error)

	// Get a FirewallIppool6 by name
	GetFirewallIppool6(mkey string) (*FirewallIppool6, error)

	// Create a new FirewallIppool6
	CreateFirewallIppool6(*FirewallIppool6) (string, error)

	// Update a FirewallIppool6
	UpdateFirewallIppool6(*FirewallIppool6) error

	// Delete a FirewallIppool6 by name
	DeleteFirewallIppool6(mkey string) error

	// List all FirewallLdbMonitors
	ListFirewallLdbMonitors() ([]*FirewallLdbMonitor, error)

	// Get a FirewallLdbMonitor by name
	GetFirewallLdbMonitor(mkey string) (*FirewallLdbMonitor, error)

	// Create a new FirewallLdbMonitor
	CreateFirewallLdbMonitor(*FirewallLdbMonitor) (string, error)

	// Update a FirewallLdbMonitor
	UpdateFirewallLdbMonitor(*FirewallLdbMonitor) error

	// Delete a FirewallLdbMonitor by name
	DeleteFirewallLdbMonitor(mkey string) error

	// List all FirewallVips
	ListFirewallVips() ([]*FirewallVip, error)

	// Get a FirewallVip by name
	GetFirewallVip(mkey string) (*FirewallVip, error)

	// Create a new FirewallVip
	CreateFirewallVip(*FirewallVip) (string, error)

	// Update a FirewallVip
	UpdateFirewallVip(*FirewallVip) error

	// Delete a FirewallVip by name
	DeleteFirewallVip(mkey string) error

	// List all VIPs
	ListVIPs() ([]*VIP, error)

	// Get a VIP by name
	GetVIP(mkey string) (*VIP, error)

	// Create a new VIP
	CreateVIP(*VIP) (string, error)

	// Update a VIP
	UpdateVIP(*VIP) error

	// Delete a VIP by name
	DeleteVIP(mkey string) error

	// List all FirewallVip46s
	ListFirewallVip46s() ([]*FirewallVip46, error)

	// Get a FirewallVip46 by name
	GetFirewallVip46(mkey string) (*FirewallVip46, error)

	// Create a new FirewallVip46
	CreateFirewallVip46(*FirewallVip46) (string, error)

	// Update a FirewallVip46
	UpdateFirewallVip46(*FirewallVip46) error

	// Delete a FirewallVip46 by name
	DeleteFirewallVip46(mkey string) error

	// List all FirewallVip6s
	ListFirewallVip6s() ([]*FirewallVip6, error)

	// Get a FirewallVip6 by name
	GetFirewallVip6(mkey string) (*FirewallVip6, error)

	// Create a new FirewallVip6
	CreateFirewallVip6(*FirewallVip6) (string, error)

	// Update a FirewallVip6
	UpdateFirewallVip6(*FirewallVip6) error

	// Delete a FirewallVip6 by name
	DeleteFirewallVip6(mkey string) error

	// List all FirewallVip64s
	ListFirewallVip64s() ([]*FirewallVip64, error)

	// Get a FirewallVip64 by name
	GetFirewallVip64(mkey string) (*FirewallVip64, error)

	// Create a new FirewallVip64
	CreateFirewallVip64(*FirewallVip64) (string, error)

	// Update a FirewallVip64
	UpdateFirewallVip64(*FirewallVip64) error

	// Delete a FirewallVip64 by name
	DeleteFirewallVip64(mkey string) error

	// List all FirewallVipgrps
	ListFirewallVipgrps() ([]*FirewallVipgrp, error)

	// Get a FirewallVipgrp by name
	GetFirewallVipgrp(mkey string) (*FirewallVipgrp, error)

	// Create a new FirewallVipgrp
	CreateFirewallVipgrp(*FirewallVipgrp) (string, error)

	// Update a FirewallVipgrp
	UpdateFirewallVipgrp(*FirewallVipgrp) error

	// Delete a FirewallVipgrp by name
	DeleteFirewallVipgrp(mkey string) error

	// List all FirewallVipgrp46s
	ListFirewallVipgrp46s() ([]*FirewallVipgrp46, error)

	// Get a FirewallVipgrp46 by name
	GetFirewallVipgrp46(mkey string) (*FirewallVipgrp46, error)

	// Create a new FirewallVipgrp46
	CreateFirewallVipgrp46(*FirewallVipgrp46) (string, error)

	// Update a FirewallVipgrp46
	UpdateFirewallVipgrp46(*FirewallVipgrp46) error

	// Delete a FirewallVipgrp46 by name
	DeleteFirewallVipgrp46(mkey string) error

	// List all FirewallVipgrp6s
	ListFirewallVipgrp6s() ([]*FirewallVipgrp6, error)

	// Get a FirewallVipgrp6 by name
	GetFirewallVipgrp6(mkey string) (*FirewallVipgrp6, error)

	// Create a new FirewallVipgrp6
	CreateFirewallVipgrp6(*FirewallVipgrp6) (string, error)

	// Update a FirewallVipgrp6
	UpdateFirewallVipgrp6(*FirewallVipgrp6) error

	// Delete a FirewallVipgrp6 by name
	DeleteFirewallVipgrp6(mkey string) error

	// List all FirewallVipgrp64s
	ListFirewallVipgrp64s() ([]*FirewallVipgrp64, error)

	// Get a FirewallVipgrp64 by name
	GetFirewallVipgrp64(mkey string) (*FirewallVipgrp64, error)

	// Create a new FirewallVipgrp64
	CreateFirewallVipgrp64(*FirewallVipgrp64) (string, error)

	// Update a FirewallVipgrp64
	UpdateFirewallVipgrp64(*FirewallVipgrp64) error

	// Delete a FirewallVipgrp64 by name
	DeleteFirewallVipgrp64(mkey string) error

	// List all FirewallProfileProtocolOptionss
	ListFirewallProfileProtocolOptionss() ([]*FirewallProfileProtocolOptions, error)

	// Get a FirewallProfileProtocolOptions by name
	GetFirewallProfileProtocolOptions(mkey string) (*FirewallProfileProtocolOptions, error)

	// Create a new FirewallProfileProtocolOptions
	CreateFirewallProfileProtocolOptions(*FirewallProfileProtocolOptions) (string, error)

	// Update a FirewallProfileProtocolOptions
	UpdateFirewallProfileProtocolOptions(*FirewallProfileProtocolOptions) error

	// Delete a FirewallProfileProtocolOptions by name
	DeleteFirewallProfileProtocolOptions(mkey string) error

	// List all FirewallSslSshProfiles
	ListFirewallSslSshProfiles() ([]*FirewallSslSshProfile, error)

	// Get a FirewallSslSshProfile by name
	GetFirewallSslSshProfile(mkey string) (*FirewallSslSshProfile, error)

	// Create a new FirewallSslSshProfile
	CreateFirewallSslSshProfile(*FirewallSslSshProfile) (string, error)

	// Update a FirewallSslSshProfile
	UpdateFirewallSslSshProfile(*FirewallSslSshProfile) error

	// Delete a FirewallSslSshProfile by name
	DeleteFirewallSslSshProfile(mkey string) error

	// List all FirewallProfileGroups
	ListFirewallProfileGroups() ([]*FirewallProfileGroup, error)

	// Get a FirewallProfileGroup by name
	GetFirewallProfileGroup(mkey string) (*FirewallProfileGroup, error)

	// Create a new FirewallProfileGroup
	CreateFirewallProfileGroup(*FirewallProfileGroup) (string, error)

	// Update a FirewallProfileGroup
	UpdateFirewallProfileGroup(*FirewallProfileGroup) error

	// Delete a FirewallProfileGroup by name
	DeleteFirewallProfileGroup(mkey string) error

	// List all FirewallSslServers
	ListFirewallSslServers() ([]*FirewallSslServer, error)

	// Get a FirewallSslServer by name
	GetFirewallSslServer(mkey string) (*FirewallSslServer, error)

	// Create a new FirewallSslServer
	CreateFirewallSslServer(*FirewallSslServer) (string, error)

	// Update a FirewallSslServer
	UpdateFirewallSslServer(*FirewallSslServer) error

	// Delete a FirewallSslServer by name
	DeleteFirewallSslServer(mkey string) error

	// List all FirewallIdentityBasedRoutes
	ListFirewallIdentityBasedRoutes() ([]*FirewallIdentityBasedRoute, error)

	// Get a FirewallIdentityBasedRoute by name
	GetFirewallIdentityBasedRoute(mkey string) (*FirewallIdentityBasedRoute, error)

	// Create a new FirewallIdentityBasedRoute
	CreateFirewallIdentityBasedRoute(*FirewallIdentityBasedRoute) (string, error)

	// Update a FirewallIdentityBasedRoute
	UpdateFirewallIdentityBasedRoute(*FirewallIdentityBasedRoute) error

	// Delete a FirewallIdentityBasedRoute by name
	DeleteFirewallIdentityBasedRoute(mkey string) error

	// List all FirewallPolicys
	ListFirewallPolicys() ([]*FirewallPolicy, error)

	// Get a FirewallPolicy by name
	GetFirewallPolicy(mkey int) (*FirewallPolicy, error)

	// Create a new FirewallPolicy
	CreateFirewallPolicy(*FirewallPolicy) (int, error)

	// Update a FirewallPolicy
	UpdateFirewallPolicy(*FirewallPolicy) error

	// Delete a FirewallPolicy by name
	DeleteFirewallPolicy(mkey int) error

	// List all FirewallShapingPolicys
	ListFirewallShapingPolicys() ([]*FirewallShapingPolicy, error)

	// Get a FirewallShapingPolicy by name
	GetFirewallShapingPolicy(mkey int) (*FirewallShapingPolicy, error)

	// Create a new FirewallShapingPolicy
	CreateFirewallShapingPolicy(*FirewallShapingPolicy) (int, error)

	// Update a FirewallShapingPolicy
	UpdateFirewallShapingPolicy(*FirewallShapingPolicy) error

	// Delete a FirewallShapingPolicy by name
	DeleteFirewallShapingPolicy(mkey int) error

	// List all FirewallLocalInPolicys
	ListFirewallLocalInPolicys() ([]*FirewallLocalInPolicy, error)

	// Get a FirewallLocalInPolicy by name
	GetFirewallLocalInPolicy(mkey int) (*FirewallLocalInPolicy, error)

	// Create a new FirewallLocalInPolicy
	CreateFirewallLocalInPolicy(*FirewallLocalInPolicy) (int, error)

	// Update a FirewallLocalInPolicy
	UpdateFirewallLocalInPolicy(*FirewallLocalInPolicy) error

	// Delete a FirewallLocalInPolicy by name
	DeleteFirewallLocalInPolicy(mkey int) error

	// List all FirewallPolicy6s
	ListFirewallPolicy6s() ([]*FirewallPolicy6, error)

	// Get a FirewallPolicy6 by name
	GetFirewallPolicy6(mkey int) (*FirewallPolicy6, error)

	// Create a new FirewallPolicy6
	CreateFirewallPolicy6(*FirewallPolicy6) (int, error)

	// Update a FirewallPolicy6
	UpdateFirewallPolicy6(*FirewallPolicy6) error

	// Delete a FirewallPolicy6 by name
	DeleteFirewallPolicy6(mkey int) error

	// List all FirewallLocalInPolicy6s
	ListFirewallLocalInPolicy6s() ([]*FirewallLocalInPolicy6, error)

	// Get a FirewallLocalInPolicy6 by name
	GetFirewallLocalInPolicy6(mkey int) (*FirewallLocalInPolicy6, error)

	// Create a new FirewallLocalInPolicy6
	CreateFirewallLocalInPolicy6(*FirewallLocalInPolicy6) (int, error)

	// Update a FirewallLocalInPolicy6
	UpdateFirewallLocalInPolicy6(*FirewallLocalInPolicy6) error

	// Delete a FirewallLocalInPolicy6 by name
	DeleteFirewallLocalInPolicy6(mkey int) error

	// List all FirewallTtlPolicys
	ListFirewallTtlPolicys() ([]*FirewallTtlPolicy, error)

	// Get a FirewallTtlPolicy by name
	GetFirewallTtlPolicy(mkey int) (*FirewallTtlPolicy, error)

	// Create a new FirewallTtlPolicy
	CreateFirewallTtlPolicy(*FirewallTtlPolicy) (int, error)

	// Update a FirewallTtlPolicy
	UpdateFirewallTtlPolicy(*FirewallTtlPolicy) error

	// Delete a FirewallTtlPolicy by name
	DeleteFirewallTtlPolicy(mkey int) error

	// List all FirewallPolicy64s
	ListFirewallPolicy64s() ([]*FirewallPolicy64, error)

	// Get a FirewallPolicy64 by name
	GetFirewallPolicy64(mkey int) (*FirewallPolicy64, error)

	// Create a new FirewallPolicy64
	CreateFirewallPolicy64(*FirewallPolicy64) (int, error)

	// Update a FirewallPolicy64
	UpdateFirewallPolicy64(*FirewallPolicy64) error

	// Delete a FirewallPolicy64 by name
	DeleteFirewallPolicy64(mkey int) error

	// List all FirewallPolicy46s
	ListFirewallPolicy46s() ([]*FirewallPolicy46, error)

	// Get a FirewallPolicy46 by name
	GetFirewallPolicy46(mkey int) (*FirewallPolicy46, error)

	// Create a new FirewallPolicy46
	CreateFirewallPolicy46(*FirewallPolicy46) (int, error)

	// Update a FirewallPolicy46
	UpdateFirewallPolicy46(*FirewallPolicy46) error

	// Delete a FirewallPolicy46 by name
	DeleteFirewallPolicy46(mkey int) error

	// List all FirewallExplicitProxyAddresss
	ListFirewallExplicitProxyAddresss() ([]*FirewallExplicitProxyAddress, error)

	// Get a FirewallExplicitProxyAddress by name
	GetFirewallExplicitProxyAddress(mkey string) (*FirewallExplicitProxyAddress, error)

	// Create a new FirewallExplicitProxyAddress
	CreateFirewallExplicitProxyAddress(*FirewallExplicitProxyAddress) (string, error)

	// Update a FirewallExplicitProxyAddress
	UpdateFirewallExplicitProxyAddress(*FirewallExplicitProxyAddress) error

	// Delete a FirewallExplicitProxyAddress by name
	DeleteFirewallExplicitProxyAddress(mkey string) error

	// List all FirewallExplicitProxyAddrgrps
	ListFirewallExplicitProxyAddrgrps() ([]*FirewallExplicitProxyAddrgrp, error)

	// Get a FirewallExplicitProxyAddrgrp by name
	GetFirewallExplicitProxyAddrgrp(mkey string) (*FirewallExplicitProxyAddrgrp, error)

	// Create a new FirewallExplicitProxyAddrgrp
	CreateFirewallExplicitProxyAddrgrp(*FirewallExplicitProxyAddrgrp) (string, error)

	// Update a FirewallExplicitProxyAddrgrp
	UpdateFirewallExplicitProxyAddrgrp(*FirewallExplicitProxyAddrgrp) error

	// Delete a FirewallExplicitProxyAddrgrp by name
	DeleteFirewallExplicitProxyAddrgrp(mkey string) error

	// List all FirewallExplicitProxyPolicys
	ListFirewallExplicitProxyPolicys() ([]*FirewallExplicitProxyPolicy, error)

	// Get a FirewallExplicitProxyPolicy by name
	GetFirewallExplicitProxyPolicy(mkey int) (*FirewallExplicitProxyPolicy, error)

	// Create a new FirewallExplicitProxyPolicy
	CreateFirewallExplicitProxyPolicy(*FirewallExplicitProxyPolicy) (int, error)

	// Update a FirewallExplicitProxyPolicy
	UpdateFirewallExplicitProxyPolicy(*FirewallExplicitProxyPolicy) error

	// Delete a FirewallExplicitProxyPolicy by name
	DeleteFirewallExplicitProxyPolicy(mkey int) error

	// List all FirewallDnstranslations
	ListFirewallDnstranslations() ([]*FirewallDnstranslation, error)

	// Get a FirewallDnstranslation by name
	GetFirewallDnstranslation(mkey int) (*FirewallDnstranslation, error)

	// Create a new FirewallDnstranslation
	CreateFirewallDnstranslation(*FirewallDnstranslation) (int, error)

	// Update a FirewallDnstranslation
	UpdateFirewallDnstranslation(*FirewallDnstranslation) error

	// Delete a FirewallDnstranslation by name
	DeleteFirewallDnstranslation(mkey int) error

	// List all FirewallMulticastPolicys
	ListFirewallMulticastPolicys() ([]*FirewallMulticastPolicy, error)

	// Get a FirewallMulticastPolicy by name
	GetFirewallMulticastPolicy(mkey int) (*FirewallMulticastPolicy, error)

	// Create a new FirewallMulticastPolicy
	CreateFirewallMulticastPolicy(*FirewallMulticastPolicy) (int, error)

	// Update a FirewallMulticastPolicy
	UpdateFirewallMulticastPolicy(*FirewallMulticastPolicy) error

	// Delete a FirewallMulticastPolicy by name
	DeleteFirewallMulticastPolicy(mkey int) error

	// List all FirewallMulticastPolicy6s
	ListFirewallMulticastPolicy6s() ([]*FirewallMulticastPolicy6, error)

	// Get a FirewallMulticastPolicy6 by name
	GetFirewallMulticastPolicy6(mkey int) (*FirewallMulticastPolicy6, error)

	// Create a new FirewallMulticastPolicy6
	CreateFirewallMulticastPolicy6(*FirewallMulticastPolicy6) (int, error)

	// Update a FirewallMulticastPolicy6
	UpdateFirewallMulticastPolicy6(*FirewallMulticastPolicy6) error

	// Delete a FirewallMulticastPolicy6 by name
	DeleteFirewallMulticastPolicy6(mkey int) error

	// List all FirewallInterfacePolicys
	ListFirewallInterfacePolicys() ([]*FirewallInterfacePolicy, error)

	// Get a FirewallInterfacePolicy by name
	GetFirewallInterfacePolicy(mkey int) (*FirewallInterfacePolicy, error)

	// Create a new FirewallInterfacePolicy
	CreateFirewallInterfacePolicy(*FirewallInterfacePolicy) (int, error)

	// Update a FirewallInterfacePolicy
	UpdateFirewallInterfacePolicy(*FirewallInterfacePolicy) error

	// Delete a FirewallInterfacePolicy by name
	DeleteFirewallInterfacePolicy(mkey int) error

	// List all FirewallInterfacePolicy6s
	ListFirewallInterfacePolicy6s() ([]*FirewallInterfacePolicy6, error)

	// Get a FirewallInterfacePolicy6 by name
	GetFirewallInterfacePolicy6(mkey int) (*FirewallInterfacePolicy6, error)

	// Create a new FirewallInterfacePolicy6
	CreateFirewallInterfacePolicy6(*FirewallInterfacePolicy6) (int, error)

	// Update a FirewallInterfacePolicy6
	UpdateFirewallInterfacePolicy6(*FirewallInterfacePolicy6) error

	// Delete a FirewallInterfacePolicy6 by name
	DeleteFirewallInterfacePolicy6(mkey int) error

	// List all FirewallDoSPolicys
	ListFirewallDoSPolicys() ([]*FirewallDoSPolicy, error)

	// Get a FirewallDoSPolicy by name
	GetFirewallDoSPolicy(mkey int) (*FirewallDoSPolicy, error)

	// Create a new FirewallDoSPolicy
	CreateFirewallDoSPolicy(*FirewallDoSPolicy) (int, error)

	// Update a FirewallDoSPolicy
	UpdateFirewallDoSPolicy(*FirewallDoSPolicy) error

	// Delete a FirewallDoSPolicy by name
	DeleteFirewallDoSPolicy(mkey int) error

	// List all FirewallDoSPolicy6s
	ListFirewallDoSPolicy6s() ([]*FirewallDoSPolicy6, error)

	// Get a FirewallDoSPolicy6 by name
	GetFirewallDoSPolicy6(mkey int) (*FirewallDoSPolicy6, error)

	// Create a new FirewallDoSPolicy6
	CreateFirewallDoSPolicy6(*FirewallDoSPolicy6) (int, error)

	// Update a FirewallDoSPolicy6
	UpdateFirewallDoSPolicy6(*FirewallDoSPolicy6) error

	// Delete a FirewallDoSPolicy6 by name
	DeleteFirewallDoSPolicy6(mkey int) error

	// List all FirewallSniffers
	ListFirewallSniffers() ([]*FirewallSniffer, error)

	// Get a FirewallSniffer by name
	GetFirewallSniffer(mkey int) (*FirewallSniffer, error)

	// Create a new FirewallSniffer
	CreateFirewallSniffer(*FirewallSniffer) (int, error)

	// Update a FirewallSniffer
	UpdateFirewallSniffer(*FirewallSniffer) error

	// Delete a FirewallSniffer by name
	DeleteFirewallSniffer(mkey int) error

	// List all FirewallAcls
	ListFirewallAcls() ([]*FirewallAcl, error)

	// Get a FirewallAcl by name
	GetFirewallAcl(mkey int) (*FirewallAcl, error)

	// Create a new FirewallAcl
	CreateFirewallAcl(*FirewallAcl) (int, error)

	// Update a FirewallAcl
	UpdateFirewallAcl(*FirewallAcl) error

	// Delete a FirewallAcl by name
	DeleteFirewallAcl(mkey int) error

	// List all FirewallAcl6s
	ListFirewallAcl6s() ([]*FirewallAcl6, error)

	// Get a FirewallAcl6 by name
	GetFirewallAcl6(mkey int) (*FirewallAcl6, error)

	// Create a new FirewallAcl6
	CreateFirewallAcl6(*FirewallAcl6) (int, error)

	// Update a FirewallAcl6
	UpdateFirewallAcl6(*FirewallAcl6) error

	// Delete a FirewallAcl6 by name
	DeleteFirewallAcl6(mkey int) error

	// List all FirewallCentralSnatMaps
	ListFirewallCentralSnatMaps() ([]*FirewallCentralSnatMap, error)

	// Get a FirewallCentralSnatMap by name
	GetFirewallCentralSnatMap(mkey int) (*FirewallCentralSnatMap, error)

	// Create a new FirewallCentralSnatMap
	CreateFirewallCentralSnatMap(*FirewallCentralSnatMap) (int, error)

	// Update a FirewallCentralSnatMap
	UpdateFirewallCentralSnatMap(*FirewallCentralSnatMap) error

	// Delete a FirewallCentralSnatMap by name
	DeleteFirewallCentralSnatMap(mkey int) error

	// List all FirewallIpTranslations
	ListFirewallIpTranslations() ([]*FirewallIpTranslation, error)

	// Get a FirewallIpTranslation by name
	GetFirewallIpTranslation(mkey int) (*FirewallIpTranslation, error)

	// Create a new FirewallIpTranslation
	CreateFirewallIpTranslation(*FirewallIpTranslation) (int, error)

	// Update a FirewallIpTranslation
	UpdateFirewallIpTranslation(*FirewallIpTranslation) error

	// Delete a FirewallIpTranslation by name
	DeleteFirewallIpTranslation(mkey int) error

	// List all CertificateCas
	ListCertificateCas() ([]*CertificateCa, error)

	// Get a CertificateCa by name
	GetCertificateCa(mkey string) (*CertificateCa, error)

	// Create a new CertificateCa
	CreateCertificateCa(*CertificateCa) (string, error)

	// Update a CertificateCa
	UpdateCertificateCa(*CertificateCa) error

	// Delete a CertificateCa by name
	DeleteCertificateCa(mkey string) error

	// List all CertificateLocals
	ListCertificateLocals() ([]*CertificateLocal, error)

	// Get a CertificateLocal by name
	GetCertificateLocal(mkey string) (*CertificateLocal, error)

	// Create a new CertificateLocal
	CreateCertificateLocal(*CertificateLocal) (string, error)

	// Update a CertificateLocal
	UpdateCertificateLocal(*CertificateLocal) error

	// Delete a CertificateLocal by name
	DeleteCertificateLocal(mkey string) error

	// List all CertificateCrls
	ListCertificateCrls() ([]*CertificateCrl, error)

	// Get a CertificateCrl by name
	GetCertificateCrl(mkey string) (*CertificateCrl, error)

	// Create a new CertificateCrl
	CreateCertificateCrl(*CertificateCrl) (string, error)

	// Update a CertificateCrl
	UpdateCertificateCrl(*CertificateCrl) error

	// Delete a CertificateCrl by name
	DeleteCertificateCrl(mkey string) error
}

// Fake Fortigate Client
type FakeClient struct {
	FirewallAddresss map[string]*FirewallAddress

	FirewallMulticastAddresss map[string]*FirewallMulticastAddress

	FirewallAddress6s map[string]*FirewallAddress6

	FirewallMulticastAddress6s map[string]*FirewallMulticastAddress6

	FirewallAddrgrps map[string]*FirewallAddrgrp

	FirewallAddrgrp6s map[string]*FirewallAddrgrp6

	FirewallIppools map[string]*FirewallIppool

	FirewallIppool6s map[string]*FirewallIppool6

	FirewallLdbMonitors map[string]*FirewallLdbMonitor

	FirewallVips map[string]*FirewallVip

	VIPs map[string]*VIP

	FirewallVip46s map[string]*FirewallVip46

	FirewallVip6s map[string]*FirewallVip6

	FirewallVip64s map[string]*FirewallVip64

	FirewallVipgrps map[string]*FirewallVipgrp

	FirewallVipgrp46s map[string]*FirewallVipgrp46

	FirewallVipgrp6s map[string]*FirewallVipgrp6

	FirewallVipgrp64s map[string]*FirewallVipgrp64

	FirewallProfileProtocolOptionss map[string]*FirewallProfileProtocolOptions

	FirewallSslSshProfiles map[string]*FirewallSslSshProfile

	FirewallProfileGroups map[string]*FirewallProfileGroup

	FirewallSslServers map[string]*FirewallSslServer

	FirewallIdentityBasedRoutes map[string]*FirewallIdentityBasedRoute

	FirewallPolicys map[int]*FirewallPolicy

	FirewallPolicyCounter int

	FirewallShapingPolicys map[int]*FirewallShapingPolicy

	FirewallShapingPolicyCounter int

	FirewallLocalInPolicys map[int]*FirewallLocalInPolicy

	FirewallLocalInPolicyCounter int

	FirewallPolicy6s map[int]*FirewallPolicy6

	FirewallPolicy6Counter int

	FirewallLocalInPolicy6s map[int]*FirewallLocalInPolicy6

	FirewallLocalInPolicy6Counter int

	FirewallTtlPolicys map[int]*FirewallTtlPolicy

	FirewallTtlPolicyCounter int

	FirewallPolicy64s map[int]*FirewallPolicy64

	FirewallPolicy64Counter int

	FirewallPolicy46s map[int]*FirewallPolicy46

	FirewallPolicy46Counter int

	FirewallExplicitProxyAddresss map[string]*FirewallExplicitProxyAddress

	FirewallExplicitProxyAddrgrps map[string]*FirewallExplicitProxyAddrgrp

	FirewallExplicitProxyPolicys map[int]*FirewallExplicitProxyPolicy

	FirewallExplicitProxyPolicyCounter int

	FirewallDnstranslations map[int]*FirewallDnstranslation

	FirewallDnstranslationCounter int

	FirewallMulticastPolicys map[int]*FirewallMulticastPolicy

	FirewallMulticastPolicyCounter int

	FirewallMulticastPolicy6s map[int]*FirewallMulticastPolicy6

	FirewallMulticastPolicy6Counter int

	FirewallInterfacePolicys map[int]*FirewallInterfacePolicy

	FirewallInterfacePolicyCounter int

	FirewallInterfacePolicy6s map[int]*FirewallInterfacePolicy6

	FirewallInterfacePolicy6Counter int

	FirewallDoSPolicys map[int]*FirewallDoSPolicy

	FirewallDoSPolicyCounter int

	FirewallDoSPolicy6s map[int]*FirewallDoSPolicy6

	FirewallDoSPolicy6Counter int

	FirewallSniffers map[int]*FirewallSniffer

	FirewallSnifferCounter int

	FirewallAcls map[int]*FirewallAcl

	FirewallAclCounter int

	FirewallAcl6s map[int]*FirewallAcl6

	FirewallAcl6Counter int

	FirewallCentralSnatMaps map[int]*FirewallCentralSnatMap

	FirewallCentralSnatMapCounter int

	FirewallIpTranslations map[int]*FirewallIpTranslation

	FirewallIpTranslationCounter int

	CertificateCas map[string]*CertificateCa

	CertificateLocals map[string]*CertificateLocal

	CertificateCrls map[string]*CertificateCrl
}

// Create a new fake client
func NewFakeClient() *FakeClient {
	return &FakeClient{

		FirewallAddresss: map[string]*FirewallAddress{},

		FirewallMulticastAddresss: map[string]*FirewallMulticastAddress{},

		FirewallAddress6s: map[string]*FirewallAddress6{},

		FirewallMulticastAddress6s: map[string]*FirewallMulticastAddress6{},

		FirewallAddrgrps: map[string]*FirewallAddrgrp{},

		FirewallAddrgrp6s: map[string]*FirewallAddrgrp6{},

		FirewallIppools: map[string]*FirewallIppool{},

		FirewallIppool6s: map[string]*FirewallIppool6{},

		FirewallLdbMonitors: map[string]*FirewallLdbMonitor{},

		FirewallVips: map[string]*FirewallVip{},

		VIPs: map[string]*VIP{},

		FirewallVip46s: map[string]*FirewallVip46{},

		FirewallVip6s: map[string]*FirewallVip6{},

		FirewallVip64s: map[string]*FirewallVip64{},

		FirewallVipgrps: map[string]*FirewallVipgrp{},

		FirewallVipgrp46s: map[string]*FirewallVipgrp46{},

		FirewallVipgrp6s: map[string]*FirewallVipgrp6{},

		FirewallVipgrp64s: map[string]*FirewallVipgrp64{},

		FirewallProfileProtocolOptionss: map[string]*FirewallProfileProtocolOptions{},

		FirewallSslSshProfiles: map[string]*FirewallSslSshProfile{},

		FirewallProfileGroups: map[string]*FirewallProfileGroup{},

		FirewallSslServers: map[string]*FirewallSslServer{},

		FirewallIdentityBasedRoutes: map[string]*FirewallIdentityBasedRoute{},

		FirewallPolicys:       map[int]*FirewallPolicy{},
		FirewallPolicyCounter: 1,

		FirewallShapingPolicys:       map[int]*FirewallShapingPolicy{},
		FirewallShapingPolicyCounter: 1,

		FirewallLocalInPolicys:       map[int]*FirewallLocalInPolicy{},
		FirewallLocalInPolicyCounter: 1,

		FirewallPolicy6s:       map[int]*FirewallPolicy6{},
		FirewallPolicy6Counter: 1,

		FirewallLocalInPolicy6s:       map[int]*FirewallLocalInPolicy6{},
		FirewallLocalInPolicy6Counter: 1,

		FirewallTtlPolicys:       map[int]*FirewallTtlPolicy{},
		FirewallTtlPolicyCounter: 1,

		FirewallPolicy64s:       map[int]*FirewallPolicy64{},
		FirewallPolicy64Counter: 1,

		FirewallPolicy46s:       map[int]*FirewallPolicy46{},
		FirewallPolicy46Counter: 1,

		FirewallExplicitProxyAddresss: map[string]*FirewallExplicitProxyAddress{},

		FirewallExplicitProxyAddrgrps: map[string]*FirewallExplicitProxyAddrgrp{},

		FirewallExplicitProxyPolicys:       map[int]*FirewallExplicitProxyPolicy{},
		FirewallExplicitProxyPolicyCounter: 1,

		FirewallDnstranslations:       map[int]*FirewallDnstranslation{},
		FirewallDnstranslationCounter: 1,

		FirewallMulticastPolicys:       map[int]*FirewallMulticastPolicy{},
		FirewallMulticastPolicyCounter: 1,

		FirewallMulticastPolicy6s:       map[int]*FirewallMulticastPolicy6{},
		FirewallMulticastPolicy6Counter: 1,

		FirewallInterfacePolicys:       map[int]*FirewallInterfacePolicy{},
		FirewallInterfacePolicyCounter: 1,

		FirewallInterfacePolicy6s:       map[int]*FirewallInterfacePolicy6{},
		FirewallInterfacePolicy6Counter: 1,

		FirewallDoSPolicys:       map[int]*FirewallDoSPolicy{},
		FirewallDoSPolicyCounter: 1,

		FirewallDoSPolicy6s:       map[int]*FirewallDoSPolicy6{},
		FirewallDoSPolicy6Counter: 1,

		FirewallSniffers:       map[int]*FirewallSniffer{},
		FirewallSnifferCounter: 1,

		FirewallAcls:       map[int]*FirewallAcl{},
		FirewallAclCounter: 1,

		FirewallAcl6s:       map[int]*FirewallAcl6{},
		FirewallAcl6Counter: 1,

		FirewallCentralSnatMaps:       map[int]*FirewallCentralSnatMap{},
		FirewallCentralSnatMapCounter: 1,

		FirewallIpTranslations:       map[int]*FirewallIpTranslation{},
		FirewallIpTranslationCounter: 1,

		CertificateCas: map[string]*CertificateCa{},

		CertificateLocals: map[string]*CertificateLocal{},

		CertificateCrls: map[string]*CertificateCrl{},
	}
}

// Enable/disable use of this address in the static route configuration.
type FirewallAddressAllowRouting string

// Applied object tags.
type FirewallAddressTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Type.
type FirewallAddressType string

// Enable/disable address visibility.
type FirewallAddressVisibility string

const (
	// Enable use of this address in the static route configuration.
	FirewallAddressAllowRoutingEnable FirewallAddressAllowRouting = "enable"

	// Disable use of this address in the static route configuration.
	FirewallAddressAllowRoutingDisable FirewallAddressAllowRouting = "disable"
)

const (
	// IP/netmask
	FirewallAddressTypeIpmask FirewallAddressType = "ipmask"

	// IP range.
	FirewallAddressTypeIprange FirewallAddressType = "iprange"

	// Fully qualified domain name.
	FirewallAddressTypeFqdn FirewallAddressType = "fqdn"

	// Country name.
	FirewallAddressTypeGeography FirewallAddressType = "geography"

	// IP/wildcard-netmask
	FirewallAddressTypeWildcard FirewallAddressType = "wildcard"

	// Wildcard FQDN.
	FirewallAddressTypeWildcardFqdn FirewallAddressType = "wildcard-fqdn"

	// Match URL pattern (explicit web proxy only).
	FirewallAddressTypeUrl FirewallAddressType = "url"
)

const (
	// Show in address4 selection.
	FirewallAddressVisibilityEnable FirewallAddressVisibility = "enable"

	// Hide from address4 selection.
	FirewallAddressVisibilityDisable FirewallAddressVisibility = "disable"
)

// Configure IPv4 addresses.
type FirewallAddress struct {

	// Enable/disable use of this address in the static route configuration.
	AllowRouting FirewallAddressAllowRouting `json:"allow-routing,omitempty"`

	// Associated interface name.
	AssociatedInterface string `json:"associated-interface,omitempty"`

	// Minimal TTL of individual IP addresses in FQDN cache.
	CacheTtl int `json:"cache-ttl,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Country name.
	Country string `json:"country,omitempty"`

	// End IP.
	EndIp string `json:"end-ip,omitempty"`

	// Fully qualified domain name.
	Fqdn string `json:"fqdn,omitempty"`

	// Address name.
	Name string `json:"name,omitempty"`

	// Start IP.
	StartIp string `json:"start-ip,omitempty"`

	// IP address and netmask.
	Subnet string `json:"subnet,omitempty"`

	// Applied object tags.
	Tags []FirewallAddressTags `json:"tags,omitempty"`

	// Type.
	Type FirewallAddressType `json:"type,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable address visibility.
	Visibility FirewallAddressVisibility `json:"visibility,omitempty"`

	// IP address and wildcard netmask.
	Wildcard string `json:"wildcard,omitempty"`

	// Wildcard FQDN.
	WildcardFqdn string `json:"wildcard-fqdn,omitempty"`
}

// Returns the value that identifies a FirewallAddress
func (x *FirewallAddress) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallAddressResults struct {
	Results []*FirewallAddress `json:"results"`
	Mkey    string             `json:"mkey"`
	Result
}

// List all FirewallAddresss
func (c *WebClient) ListFirewallAddresss() (res []*FirewallAddress, err error) {
	var results FirewallAddressResults
	_, err = c.do(http.MethodGet, "firewall/address", nil, nil, &results)
	if err != nil {
		return []*FirewallAddress{}, fmt.Errorf("error listing FirewallAddresss: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallAddress by name
func (c *WebClient) GetFirewallAddress(mkey string) (res *FirewallAddress, err error) {
	var results FirewallAddressResults
	_, err = c.do(http.MethodGet, "firewall/address/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallAddress{}, fmt.Errorf("error getting FirewallAddress '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallAddress
func (c *WebClient) CreateFirewallAddress(obj *FirewallAddress) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/address", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallAddress '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallAddress
func (c *WebClient) UpdateFirewallAddress(obj *FirewallAddress) error {
	_, err := c.do(http.MethodPut, "firewall/address/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallAddress '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallAddress by name
func (c *WebClient) DeleteFirewallAddress(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/address/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallAddress '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallAddresss
func (c *FakeClient) ListFirewallAddresss() (res []*FirewallAddress, err error) {
	for _, r := range c.FirewallAddresss {
		res = append(res, r)
	}
	return
}

// Get a FirewallAddress by name
func (c *FakeClient) GetFirewallAddress(mkey string) (*FirewallAddress, error) {
	if res, ok := c.FirewallAddresss[mkey]; ok {
		return res, nil
	} else {
		return &FirewallAddress{}, fmt.Errorf("error getting FirewallAddress '%s': not found", mkey)
	}
}

// Create a new FirewallAddress
func (c *FakeClient) CreateFirewallAddress(obj *FirewallAddress) (id string, err error) {
	id = obj.Name
	c.FirewallAddresss[id] = obj
	return
}

// Update a FirewallAddress
func (c *FakeClient) UpdateFirewallAddress(obj *FirewallAddress) (err error) {
	c.FirewallAddresss[obj.Name] = obj
	return nil
}

// Delete a FirewallAddress by name
func (c *FakeClient) DeleteFirewallAddress(mkey string) (err error) {
	delete(c.FirewallAddresss, mkey)
	return nil
}

// Applied object tags.
type FirewallMulticastAddressTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// type
type FirewallMulticastAddressType string

// Enable/disable multicast address visibility.
type FirewallMulticastAddressVisibility string

const (
	// Multicast range.
	FirewallMulticastAddressTypeMulticastrange FirewallMulticastAddressType = "multicastrange"

	// Broadcast subnet.
	FirewallMulticastAddressTypeBroadcastmask FirewallMulticastAddressType = "broadcastmask"
)

const (
	// Show in multicast address selection.
	FirewallMulticastAddressVisibilityEnable FirewallMulticastAddressVisibility = "enable"

	// Hide from multicast address selection.
	FirewallMulticastAddressVisibilityDisable FirewallMulticastAddressVisibility = "disable"
)

// Configure multicast addresses.
type FirewallMulticastAddress struct {

	// Associated interface name.
	AssociatedInterface string `json:"associated-interface,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// End IP.
	EndIp string `json:"end-ip,omitempty"`

	// Multicast address name.
	Name string `json:"name,omitempty"`

	// Start IP.
	StartIp string `json:"start-ip,omitempty"`

	// Broadcast address and subnet.
	Subnet string `json:"subnet,omitempty"`

	// Applied object tags.
	Tags []FirewallMulticastAddressTags `json:"tags,omitempty"`

	// type
	Type FirewallMulticastAddressType `json:"type,omitempty"`

	// Enable/disable multicast address visibility.
	Visibility FirewallMulticastAddressVisibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallMulticastAddress
func (x *FirewallMulticastAddress) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallMulticastAddressResults struct {
	Results []*FirewallMulticastAddress `json:"results"`
	Mkey    string                      `json:"mkey"`
	Result
}

// List all FirewallMulticastAddresss
func (c *WebClient) ListFirewallMulticastAddresss() (res []*FirewallMulticastAddress, err error) {
	var results FirewallMulticastAddressResults
	_, err = c.do(http.MethodGet, "firewall/multicast-address", nil, nil, &results)
	if err != nil {
		return []*FirewallMulticastAddress{}, fmt.Errorf("error listing FirewallMulticastAddresss: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallMulticastAddress by name
func (c *WebClient) GetFirewallMulticastAddress(mkey string) (res *FirewallMulticastAddress, err error) {
	var results FirewallMulticastAddressResults
	_, err = c.do(http.MethodGet, "firewall/multicast-address/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallMulticastAddress{}, fmt.Errorf("error getting FirewallMulticastAddress '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallMulticastAddress
func (c *WebClient) CreateFirewallMulticastAddress(obj *FirewallMulticastAddress) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/multicast-address", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallMulticastAddress '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallMulticastAddress
func (c *WebClient) UpdateFirewallMulticastAddress(obj *FirewallMulticastAddress) error {
	_, err := c.do(http.MethodPut, "firewall/multicast-address/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallMulticastAddress '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallMulticastAddress by name
func (c *WebClient) DeleteFirewallMulticastAddress(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/multicast-address/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallMulticastAddress '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallMulticastAddresss
func (c *FakeClient) ListFirewallMulticastAddresss() (res []*FirewallMulticastAddress, err error) {
	for _, r := range c.FirewallMulticastAddresss {
		res = append(res, r)
	}
	return
}

// Get a FirewallMulticastAddress by name
func (c *FakeClient) GetFirewallMulticastAddress(mkey string) (*FirewallMulticastAddress, error) {
	if res, ok := c.FirewallMulticastAddresss[mkey]; ok {
		return res, nil
	} else {
		return &FirewallMulticastAddress{}, fmt.Errorf("error getting FirewallMulticastAddress '%s': not found", mkey)
	}
}

// Create a new FirewallMulticastAddress
func (c *FakeClient) CreateFirewallMulticastAddress(obj *FirewallMulticastAddress) (id string, err error) {
	id = obj.Name
	c.FirewallMulticastAddresss[id] = obj
	return
}

// Update a FirewallMulticastAddress
func (c *FakeClient) UpdateFirewallMulticastAddress(obj *FirewallMulticastAddress) (err error) {
	c.FirewallMulticastAddresss[obj.Name] = obj
	return nil
}

// Delete a FirewallMulticastAddress by name
func (c *FakeClient) DeleteFirewallMulticastAddress(mkey string) (err error) {
	delete(c.FirewallMulticastAddresss, mkey)
	return nil
}

// Applied object tags.
type FirewallAddress6Tags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Type.
type FirewallAddress6Type string

// Enable/disable address visibility.
type FirewallAddress6Visibility string

const (
	// IP/prefix.
	FirewallAddress6TypeIpprefix FirewallAddress6Type = "ipprefix"

	// IP range.
	FirewallAddress6TypeIprange FirewallAddress6Type = "iprange"
)

const (
	// Show in address6 selection.
	FirewallAddress6VisibilityEnable FirewallAddress6Visibility = "enable"

	// Hide from address6 selection.
	FirewallAddress6VisibilityDisable FirewallAddress6Visibility = "disable"
)

// Configure IPv6 addresses.
type FirewallAddress6 struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// End IP.
	EndIp string `json:"end-ip,omitempty"`

	// IPv6 address prefix.
	Ip6 string `json:"ip6,omitempty"`

	// Address name.
	Name string `json:"name,omitempty"`

	// Start IP.
	StartIp string `json:"start-ip,omitempty"`

	// Applied object tags.
	Tags []FirewallAddress6Tags `json:"tags,omitempty"`

	// Type.
	Type FirewallAddress6Type `json:"type,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable address visibility.
	Visibility FirewallAddress6Visibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallAddress6
func (x *FirewallAddress6) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallAddress6Results struct {
	Results []*FirewallAddress6 `json:"results"`
	Mkey    string              `json:"mkey"`
	Result
}

// List all FirewallAddress6s
func (c *WebClient) ListFirewallAddress6s() (res []*FirewallAddress6, err error) {
	var results FirewallAddress6Results
	_, err = c.do(http.MethodGet, "firewall/address6", nil, nil, &results)
	if err != nil {
		return []*FirewallAddress6{}, fmt.Errorf("error listing FirewallAddress6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallAddress6 by name
func (c *WebClient) GetFirewallAddress6(mkey string) (res *FirewallAddress6, err error) {
	var results FirewallAddress6Results
	_, err = c.do(http.MethodGet, "firewall/address6/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallAddress6{}, fmt.Errorf("error getting FirewallAddress6 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallAddress6
func (c *WebClient) CreateFirewallAddress6(obj *FirewallAddress6) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/address6", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallAddress6 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallAddress6
func (c *WebClient) UpdateFirewallAddress6(obj *FirewallAddress6) error {
	_, err := c.do(http.MethodPut, "firewall/address6/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallAddress6 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallAddress6 by name
func (c *WebClient) DeleteFirewallAddress6(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/address6/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallAddress6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallAddress6s
func (c *FakeClient) ListFirewallAddress6s() (res []*FirewallAddress6, err error) {
	for _, r := range c.FirewallAddress6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallAddress6 by name
func (c *FakeClient) GetFirewallAddress6(mkey string) (*FirewallAddress6, error) {
	if res, ok := c.FirewallAddress6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallAddress6{}, fmt.Errorf("error getting FirewallAddress6 '%s': not found", mkey)
	}
}

// Create a new FirewallAddress6
func (c *FakeClient) CreateFirewallAddress6(obj *FirewallAddress6) (id string, err error) {
	id = obj.Name
	c.FirewallAddress6s[id] = obj
	return
}

// Update a FirewallAddress6
func (c *FakeClient) UpdateFirewallAddress6(obj *FirewallAddress6) (err error) {
	c.FirewallAddress6s[obj.Name] = obj
	return nil
}

// Delete a FirewallAddress6 by name
func (c *FakeClient) DeleteFirewallAddress6(mkey string) (err error) {
	delete(c.FirewallAddress6s, mkey)
	return nil
}

// Applied object tags.
type FirewallMulticastAddress6Tags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable multicast address visibility.
type FirewallMulticastAddress6Visibility string

const (
	// Show in multicast address selection.
	FirewallMulticastAddress6VisibilityEnable FirewallMulticastAddress6Visibility = "enable"

	// Hide from multicast address selection.
	FirewallMulticastAddress6VisibilityDisable FirewallMulticastAddress6Visibility = "disable"
)

// Configure IPv6 multicast address.
type FirewallMulticastAddress6 struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// IPv6 address prefix.
	Ip6 string `json:"ip6,omitempty"`

	// IPv6 multicast address name.
	Name string `json:"name,omitempty"`

	// Applied object tags.
	Tags []FirewallMulticastAddress6Tags `json:"tags,omitempty"`

	// Enable/disable multicast address visibility.
	Visibility FirewallMulticastAddress6Visibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallMulticastAddress6
func (x *FirewallMulticastAddress6) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallMulticastAddress6Results struct {
	Results []*FirewallMulticastAddress6 `json:"results"`
	Mkey    string                       `json:"mkey"`
	Result
}

// List all FirewallMulticastAddress6s
func (c *WebClient) ListFirewallMulticastAddress6s() (res []*FirewallMulticastAddress6, err error) {
	var results FirewallMulticastAddress6Results
	_, err = c.do(http.MethodGet, "firewall/multicast-address6", nil, nil, &results)
	if err != nil {
		return []*FirewallMulticastAddress6{}, fmt.Errorf("error listing FirewallMulticastAddress6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallMulticastAddress6 by name
func (c *WebClient) GetFirewallMulticastAddress6(mkey string) (res *FirewallMulticastAddress6, err error) {
	var results FirewallMulticastAddress6Results
	_, err = c.do(http.MethodGet, "firewall/multicast-address6/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallMulticastAddress6{}, fmt.Errorf("error getting FirewallMulticastAddress6 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallMulticastAddress6
func (c *WebClient) CreateFirewallMulticastAddress6(obj *FirewallMulticastAddress6) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/multicast-address6", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallMulticastAddress6 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallMulticastAddress6
func (c *WebClient) UpdateFirewallMulticastAddress6(obj *FirewallMulticastAddress6) error {
	_, err := c.do(http.MethodPut, "firewall/multicast-address6/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallMulticastAddress6 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallMulticastAddress6 by name
func (c *WebClient) DeleteFirewallMulticastAddress6(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/multicast-address6/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallMulticastAddress6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallMulticastAddress6s
func (c *FakeClient) ListFirewallMulticastAddress6s() (res []*FirewallMulticastAddress6, err error) {
	for _, r := range c.FirewallMulticastAddress6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallMulticastAddress6 by name
func (c *FakeClient) GetFirewallMulticastAddress6(mkey string) (*FirewallMulticastAddress6, error) {
	if res, ok := c.FirewallMulticastAddress6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallMulticastAddress6{}, fmt.Errorf("error getting FirewallMulticastAddress6 '%s': not found", mkey)
	}
}

// Create a new FirewallMulticastAddress6
func (c *FakeClient) CreateFirewallMulticastAddress6(obj *FirewallMulticastAddress6) (id string, err error) {
	id = obj.Name
	c.FirewallMulticastAddress6s[id] = obj
	return
}

// Update a FirewallMulticastAddress6
func (c *FakeClient) UpdateFirewallMulticastAddress6(obj *FirewallMulticastAddress6) (err error) {
	c.FirewallMulticastAddress6s[obj.Name] = obj
	return nil
}

// Delete a FirewallMulticastAddress6 by name
func (c *FakeClient) DeleteFirewallMulticastAddress6(mkey string) (err error) {
	delete(c.FirewallMulticastAddress6s, mkey)
	return nil
}

// Enable/disable use of this group in the static route configuration.
type FirewallAddrgrpAllowRouting string

// Address group member.
type FirewallAddrgrpMember struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Applied object tags.
type FirewallAddrgrpTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable address group visibility.
type FirewallAddrgrpVisibility string

const (
	// Enable use of this group in the static route configuration.
	FirewallAddrgrpAllowRoutingEnable FirewallAddrgrpAllowRouting = "enable"

	// Disable use of this group in the static route configuration.
	FirewallAddrgrpAllowRoutingDisable FirewallAddrgrpAllowRouting = "disable"
)

const (
	// Show in address group selection.
	FirewallAddrgrpVisibilityEnable FirewallAddrgrpVisibility = "enable"

	// Hide from address group selection.
	FirewallAddrgrpVisibilityDisable FirewallAddrgrpVisibility = "disable"
)

// Configure IPv4 address groups.
type FirewallAddrgrp struct {

	// Enable/disable use of this group in the static route configuration.
	AllowRouting FirewallAddrgrpAllowRouting `json:"allow-routing,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Address group member.
	Member []FirewallAddrgrpMember `json:"member,omitempty"`

	// Address group name.
	Name string `json:"name,omitempty"`

	// Applied object tags.
	Tags []FirewallAddrgrpTags `json:"tags,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable address group visibility.
	Visibility FirewallAddrgrpVisibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallAddrgrp
func (x *FirewallAddrgrp) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallAddrgrpResults struct {
	Results []*FirewallAddrgrp `json:"results"`
	Mkey    string             `json:"mkey"`
	Result
}

// List all FirewallAddrgrps
func (c *WebClient) ListFirewallAddrgrps() (res []*FirewallAddrgrp, err error) {
	var results FirewallAddrgrpResults
	_, err = c.do(http.MethodGet, "firewall/addrgrp", nil, nil, &results)
	if err != nil {
		return []*FirewallAddrgrp{}, fmt.Errorf("error listing FirewallAddrgrps: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallAddrgrp by name
func (c *WebClient) GetFirewallAddrgrp(mkey string) (res *FirewallAddrgrp, err error) {
	var results FirewallAddrgrpResults
	_, err = c.do(http.MethodGet, "firewall/addrgrp/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallAddrgrp{}, fmt.Errorf("error getting FirewallAddrgrp '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallAddrgrp
func (c *WebClient) CreateFirewallAddrgrp(obj *FirewallAddrgrp) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/addrgrp", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallAddrgrp '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallAddrgrp
func (c *WebClient) UpdateFirewallAddrgrp(obj *FirewallAddrgrp) error {
	_, err := c.do(http.MethodPut, "firewall/addrgrp/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallAddrgrp '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallAddrgrp by name
func (c *WebClient) DeleteFirewallAddrgrp(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/addrgrp/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallAddrgrp '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallAddrgrps
func (c *FakeClient) ListFirewallAddrgrps() (res []*FirewallAddrgrp, err error) {
	for _, r := range c.FirewallAddrgrps {
		res = append(res, r)
	}
	return
}

// Get a FirewallAddrgrp by name
func (c *FakeClient) GetFirewallAddrgrp(mkey string) (*FirewallAddrgrp, error) {
	if res, ok := c.FirewallAddrgrps[mkey]; ok {
		return res, nil
	} else {
		return &FirewallAddrgrp{}, fmt.Errorf("error getting FirewallAddrgrp '%s': not found", mkey)
	}
}

// Create a new FirewallAddrgrp
func (c *FakeClient) CreateFirewallAddrgrp(obj *FirewallAddrgrp) (id string, err error) {
	id = obj.Name
	c.FirewallAddrgrps[id] = obj
	return
}

// Update a FirewallAddrgrp
func (c *FakeClient) UpdateFirewallAddrgrp(obj *FirewallAddrgrp) (err error) {
	c.FirewallAddrgrps[obj.Name] = obj
	return nil
}

// Delete a FirewallAddrgrp by name
func (c *FakeClient) DeleteFirewallAddrgrp(mkey string) (err error) {
	delete(c.FirewallAddrgrps, mkey)
	return nil
}

// IPv6 address group member.
type FirewallAddrgrp6Member struct {

	// Address6/addrgrp6 name.
	Name string `json:"name,omitempty"`
}

// Applied object tags.
type FirewallAddrgrp6Tags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable address group6 visibility.
type FirewallAddrgrp6Visibility string

const (
	// Show in address group selection.
	FirewallAddrgrp6VisibilityEnable FirewallAddrgrp6Visibility = "enable"

	// Hide from address group selection.
	FirewallAddrgrp6VisibilityDisable FirewallAddrgrp6Visibility = "disable"
)

// Configure IPv6 address groups.
type FirewallAddrgrp6 struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// IPv6 address group member.
	Member []FirewallAddrgrp6Member `json:"member,omitempty"`

	// IPv6 address group name.
	Name string `json:"name,omitempty"`

	// Applied object tags.
	Tags []FirewallAddrgrp6Tags `json:"tags,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable address group6 visibility.
	Visibility FirewallAddrgrp6Visibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallAddrgrp6
func (x *FirewallAddrgrp6) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallAddrgrp6Results struct {
	Results []*FirewallAddrgrp6 `json:"results"`
	Mkey    string              `json:"mkey"`
	Result
}

// List all FirewallAddrgrp6s
func (c *WebClient) ListFirewallAddrgrp6s() (res []*FirewallAddrgrp6, err error) {
	var results FirewallAddrgrp6Results
	_, err = c.do(http.MethodGet, "firewall/addrgrp6", nil, nil, &results)
	if err != nil {
		return []*FirewallAddrgrp6{}, fmt.Errorf("error listing FirewallAddrgrp6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallAddrgrp6 by name
func (c *WebClient) GetFirewallAddrgrp6(mkey string) (res *FirewallAddrgrp6, err error) {
	var results FirewallAddrgrp6Results
	_, err = c.do(http.MethodGet, "firewall/addrgrp6/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallAddrgrp6{}, fmt.Errorf("error getting FirewallAddrgrp6 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallAddrgrp6
func (c *WebClient) CreateFirewallAddrgrp6(obj *FirewallAddrgrp6) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/addrgrp6", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallAddrgrp6 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallAddrgrp6
func (c *WebClient) UpdateFirewallAddrgrp6(obj *FirewallAddrgrp6) error {
	_, err := c.do(http.MethodPut, "firewall/addrgrp6/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallAddrgrp6 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallAddrgrp6 by name
func (c *WebClient) DeleteFirewallAddrgrp6(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/addrgrp6/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallAddrgrp6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallAddrgrp6s
func (c *FakeClient) ListFirewallAddrgrp6s() (res []*FirewallAddrgrp6, err error) {
	for _, r := range c.FirewallAddrgrp6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallAddrgrp6 by name
func (c *FakeClient) GetFirewallAddrgrp6(mkey string) (*FirewallAddrgrp6, error) {
	if res, ok := c.FirewallAddrgrp6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallAddrgrp6{}, fmt.Errorf("error getting FirewallAddrgrp6 '%s': not found", mkey)
	}
}

// Create a new FirewallAddrgrp6
func (c *FakeClient) CreateFirewallAddrgrp6(obj *FirewallAddrgrp6) (id string, err error) {
	id = obj.Name
	c.FirewallAddrgrp6s[id] = obj
	return
}

// Update a FirewallAddrgrp6
func (c *FakeClient) UpdateFirewallAddrgrp6(obj *FirewallAddrgrp6) (err error) {
	c.FirewallAddrgrp6s[obj.Name] = obj
	return nil
}

// Delete a FirewallAddrgrp6 by name
func (c *FakeClient) DeleteFirewallAddrgrp6(mkey string) (err error) {
	delete(c.FirewallAddrgrp6s, mkey)
	return nil
}

// Enable/disable ARP reply.
type FirewallIppoolArpReply string

// Enable/disable full cone.
type FirewallIppoolPermitAnyHost string

// IP pool type.
type FirewallIppoolType string

const (
	// Disable ARP reply.
	FirewallIppoolArpReplyDisable FirewallIppoolArpReply = "disable"

	// Enable ARP reply.
	FirewallIppoolArpReplyEnable FirewallIppoolArpReply = "enable"
)

const (
	// Disable full cone.
	FirewallIppoolPermitAnyHostDisable FirewallIppoolPermitAnyHost = "disable"

	// Enable full cone.
	FirewallIppoolPermitAnyHostEnable FirewallIppoolPermitAnyHost = "enable"
)

const (
	// IP addresses in pool can be shared by clients.
	FirewallIppoolTypeOverload FirewallIppoolType = "overload"

	// One to one mapping.
	FirewallIppoolTypeOneToOne FirewallIppoolType = "one-to-one"

	// Fixed port range.
	FirewallIppoolTypeFixedPortRange FirewallIppoolType = "fixed-port-range"

	// Port block allocation.
	FirewallIppoolTypePortBlockAllocation FirewallIppoolType = "port-block-allocation"
)

// Configure IPv4 pool.
type FirewallIppool struct {

	// ARP reply interface. Any if unset.
	ArpIntf string `json:"arp-intf,omitempty"`

	// Enable/disable ARP reply.
	ArpReply FirewallIppoolArpReply `json:"arp-reply,omitempty"`

	// Block size.
	BlockSize int `json:"block-size,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// End IP.
	Endip string `json:"endip,omitempty"`

	// IP pool name.
	Name string `json:"name,omitempty"`

	// Number of blocks per user (1 - 128).
	NumBlocksPerUser int `json:"num-blocks-per-user,omitempty"`

	// Enable/disable full cone.
	PermitAnyHost FirewallIppoolPermitAnyHost `json:"permit-any-host,omitempty"`

	// Source end IP.
	SourceEndip string `json:"source-endip,omitempty"`

	// Source start IP.
	SourceStartip string `json:"source-startip,omitempty"`

	// Start IP.
	Startip string `json:"startip,omitempty"`

	// IP pool type.
	Type FirewallIppoolType `json:"type,omitempty"`
}

// Returns the value that identifies a FirewallIppool
func (x *FirewallIppool) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallIppoolResults struct {
	Results []*FirewallIppool `json:"results"`
	Mkey    string            `json:"mkey"`
	Result
}

// List all FirewallIppools
func (c *WebClient) ListFirewallIppools() (res []*FirewallIppool, err error) {
	var results FirewallIppoolResults
	_, err = c.do(http.MethodGet, "firewall/ippool", nil, nil, &results)
	if err != nil {
		return []*FirewallIppool{}, fmt.Errorf("error listing FirewallIppools: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallIppool by name
func (c *WebClient) GetFirewallIppool(mkey string) (res *FirewallIppool, err error) {
	var results FirewallIppoolResults
	_, err = c.do(http.MethodGet, "firewall/ippool/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallIppool{}, fmt.Errorf("error getting FirewallIppool '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallIppool
func (c *WebClient) CreateFirewallIppool(obj *FirewallIppool) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/ippool", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallIppool '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallIppool
func (c *WebClient) UpdateFirewallIppool(obj *FirewallIppool) error {
	_, err := c.do(http.MethodPut, "firewall/ippool/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallIppool '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallIppool by name
func (c *WebClient) DeleteFirewallIppool(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/ippool/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallIppool '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallIppools
func (c *FakeClient) ListFirewallIppools() (res []*FirewallIppool, err error) {
	for _, r := range c.FirewallIppools {
		res = append(res, r)
	}
	return
}

// Get a FirewallIppool by name
func (c *FakeClient) GetFirewallIppool(mkey string) (*FirewallIppool, error) {
	if res, ok := c.FirewallIppools[mkey]; ok {
		return res, nil
	} else {
		return &FirewallIppool{}, fmt.Errorf("error getting FirewallIppool '%s': not found", mkey)
	}
}

// Create a new FirewallIppool
func (c *FakeClient) CreateFirewallIppool(obj *FirewallIppool) (id string, err error) {
	id = obj.Name
	c.FirewallIppools[id] = obj
	return
}

// Update a FirewallIppool
func (c *FakeClient) UpdateFirewallIppool(obj *FirewallIppool) (err error) {
	c.FirewallIppools[obj.Name] = obj
	return nil
}

// Delete a FirewallIppool by name
func (c *FakeClient) DeleteFirewallIppool(mkey string) (err error) {
	delete(c.FirewallIppools, mkey)
	return nil
}

// Configure IPv6 pool.
type FirewallIppool6 struct {

	// Comment.
	Comments string `json:"comments,omitempty"`

	// End IP.
	Endip string `json:"endip,omitempty"`

	// IPv6 pool name.
	Name string `json:"name,omitempty"`

	// Start IP.
	Startip string `json:"startip,omitempty"`
}

// Returns the value that identifies a FirewallIppool6
func (x *FirewallIppool6) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallIppool6Results struct {
	Results []*FirewallIppool6 `json:"results"`
	Mkey    string             `json:"mkey"`
	Result
}

// List all FirewallIppool6s
func (c *WebClient) ListFirewallIppool6s() (res []*FirewallIppool6, err error) {
	var results FirewallIppool6Results
	_, err = c.do(http.MethodGet, "firewall/ippool6", nil, nil, &results)
	if err != nil {
		return []*FirewallIppool6{}, fmt.Errorf("error listing FirewallIppool6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallIppool6 by name
func (c *WebClient) GetFirewallIppool6(mkey string) (res *FirewallIppool6, err error) {
	var results FirewallIppool6Results
	_, err = c.do(http.MethodGet, "firewall/ippool6/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallIppool6{}, fmt.Errorf("error getting FirewallIppool6 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallIppool6
func (c *WebClient) CreateFirewallIppool6(obj *FirewallIppool6) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/ippool6", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallIppool6 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallIppool6
func (c *WebClient) UpdateFirewallIppool6(obj *FirewallIppool6) error {
	_, err := c.do(http.MethodPut, "firewall/ippool6/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallIppool6 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallIppool6 by name
func (c *WebClient) DeleteFirewallIppool6(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/ippool6/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallIppool6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallIppool6s
func (c *FakeClient) ListFirewallIppool6s() (res []*FirewallIppool6, err error) {
	for _, r := range c.FirewallIppool6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallIppool6 by name
func (c *FakeClient) GetFirewallIppool6(mkey string) (*FirewallIppool6, error) {
	if res, ok := c.FirewallIppool6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallIppool6{}, fmt.Errorf("error getting FirewallIppool6 '%s': not found", mkey)
	}
}

// Create a new FirewallIppool6
func (c *FakeClient) CreateFirewallIppool6(obj *FirewallIppool6) (id string, err error) {
	id = obj.Name
	c.FirewallIppool6s[id] = obj
	return
}

// Update a FirewallIppool6
func (c *FakeClient) UpdateFirewallIppool6(obj *FirewallIppool6) (err error) {
	c.FirewallIppool6s[obj.Name] = obj
	return nil
}

// Delete a FirewallIppool6 by name
func (c *FakeClient) DeleteFirewallIppool6(mkey string) (err error) {
	delete(c.FirewallIppool6s, mkey)
	return nil
}

// Monitor type.
type FirewallLdbMonitorType string

const (
	// PING health monitor.
	FirewallLdbMonitorTypePing FirewallLdbMonitorType = "ping"

	// TCP-connect health monitor.
	FirewallLdbMonitorTypeTcp FirewallLdbMonitorType = "tcp"

	// HTTP-GET health monitor.
	FirewallLdbMonitorTypeHttp FirewallLdbMonitorType = "http"
)

// Configure load balance server's health monitors.
type FirewallLdbMonitor struct {

	// HTTP get URL string.
	HttpGet string `json:"http-get,omitempty"`

	// String for matching HTTP-get response.
	HttpMatch string `json:"http-match,omitempty"`

	// The maximum number of HTTP redirects to be allowed.
	HttpMaxRedirects int `json:"http-max-redirects,omitempty"`

	// Detect interval.
	Interval int `json:"interval,omitempty"`

	// Monitor name.
	Name string `json:"name,omitempty"`

	// Service port.
	Port int `json:"port,omitempty"`

	// Number of detect tries before bring server down.
	Retry int `json:"retry,omitempty"`

	// Detect request timeout.
	Timeout int `json:"timeout,omitempty"`

	// Monitor type.
	Type FirewallLdbMonitorType `json:"type,omitempty"`
}

// Returns the value that identifies a FirewallLdbMonitor
func (x *FirewallLdbMonitor) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallLdbMonitorResults struct {
	Results []*FirewallLdbMonitor `json:"results"`
	Mkey    string                `json:"mkey"`
	Result
}

// List all FirewallLdbMonitors
func (c *WebClient) ListFirewallLdbMonitors() (res []*FirewallLdbMonitor, err error) {
	var results FirewallLdbMonitorResults
	_, err = c.do(http.MethodGet, "firewall/ldb-monitor", nil, nil, &results)
	if err != nil {
		return []*FirewallLdbMonitor{}, fmt.Errorf("error listing FirewallLdbMonitors: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallLdbMonitor by name
func (c *WebClient) GetFirewallLdbMonitor(mkey string) (res *FirewallLdbMonitor, err error) {
	var results FirewallLdbMonitorResults
	_, err = c.do(http.MethodGet, "firewall/ldb-monitor/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallLdbMonitor{}, fmt.Errorf("error getting FirewallLdbMonitor '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallLdbMonitor
func (c *WebClient) CreateFirewallLdbMonitor(obj *FirewallLdbMonitor) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/ldb-monitor", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallLdbMonitor '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallLdbMonitor
func (c *WebClient) UpdateFirewallLdbMonitor(obj *FirewallLdbMonitor) error {
	_, err := c.do(http.MethodPut, "firewall/ldb-monitor/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallLdbMonitor '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallLdbMonitor by name
func (c *WebClient) DeleteFirewallLdbMonitor(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/ldb-monitor/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallLdbMonitor '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallLdbMonitors
func (c *FakeClient) ListFirewallLdbMonitors() (res []*FirewallLdbMonitor, err error) {
	for _, r := range c.FirewallLdbMonitors {
		res = append(res, r)
	}
	return
}

// Get a FirewallLdbMonitor by name
func (c *FakeClient) GetFirewallLdbMonitor(mkey string) (*FirewallLdbMonitor, error) {
	if res, ok := c.FirewallLdbMonitors[mkey]; ok {
		return res, nil
	} else {
		return &FirewallLdbMonitor{}, fmt.Errorf("error getting FirewallLdbMonitor '%s': not found", mkey)
	}
}

// Create a new FirewallLdbMonitor
func (c *FakeClient) CreateFirewallLdbMonitor(obj *FirewallLdbMonitor) (id string, err error) {
	id = obj.Name
	c.FirewallLdbMonitors[id] = obj
	return
}

// Update a FirewallLdbMonitor
func (c *FakeClient) UpdateFirewallLdbMonitor(obj *FirewallLdbMonitor) (err error) {
	c.FirewallLdbMonitors[obj.Name] = obj
	return nil
}

// Delete a FirewallLdbMonitor by name
func (c *FakeClient) DeleteFirewallLdbMonitor(mkey string) (err error) {
	delete(c.FirewallLdbMonitors, mkey)
	return nil
}

// Enable/disable ARP reply.
type FirewallVipArpReply string

// Enable/disable use of HTTP cookie domain from host field in HTTP.
type FirewallVipHttpCookieDomainFromHost string

// Share HTTP cookies across different virtual servers.
type FirewallVipHttpCookieShare string

// Add additional HTTP header containing client's original IP address.
type FirewallVipHttpIpHeader string

// Enable/disable multiplex HTTP requests/responses over a single TCP connection.
type FirewallVipHttpMultiplex string

// Enable/disable verification of cookie inserted into HTTPS is marked as secure.
type FirewallVipHttpsCookieSecure string

// Load balance method.
type FirewallVipLdbMethod string

// Mapped IP (x.x.x.x/x x.x.x.x-y.y.y.y).
type FirewallVipMappedip struct {

	// Mapped IP range.
	Range string `json:"range,omitempty"`
}

// Enable/disable force NAT as VIP when server goes out.
type FirewallVipNatSourceVip string

// Enable/disable adding HTTP header indicating SSL offload for Outlook Web Access server.
type FirewallVipOutlookWebAccess string

// Persistence.
type FirewallVipPersistence string

// Enable/disable port forward.
type FirewallVipPortforward string

// Port mapping type.
type FirewallVipPortmappingType string

// Mapped port protocol.
type FirewallVipProtocol string

// Real servers.
type FirewallVipRealservers struct {

	// Restrict server to a client IP in this range.
	ClientIp string `json:"client-ip,omitempty"`

	// Per server health check.
	Healthcheck string `json:"healthcheck,omitempty"`

	// Hold down interval.
	HolddownInterval int `json:"holddown-interval,omitempty"`

	// HTTP server domain name in HTTP header.
	HttpHost string `json:"http-host,omitempty"`

	// Real server ID.
	Id int `json:"id,omitempty"`

	// Mapped server IP.
	Ip string `json:"ip,omitempty"`

	// Maximum number of connections allowed to server.
	MaxConnections int `json:"max-connections,omitempty"`

	// Health monitors.
	Monitor string `json:"monitor,omitempty"`

	// Mapped server port.
	Port int `json:"port,omitempty"`

	// Server administrative status.
	Status string `json:"status,omitempty"`

	// weight
	Weight int `json:"weight,omitempty"`
}

// Server type.
type FirewallVipServerType string

// Source IP filter (x.x.x.x/x x.x.x.x-y.y.y.y).
type FirewallVipSrcFilter struct {

	// Source-filter range.
	Range string `json:"range,omitempty"`
}

// Source interface filter.
type FirewallVipSrcintfFilter struct {

	// Interface name.
	InterfaceName string `json:"interface-name,omitempty"`
}

// Relative strength of encryption algorithms accepted in negotiation with client.
type FirewallVipSslAlgorithm string

// SSL/TLS cipher suites acceptable from a client, ordered by priority.
type FirewallVipSslCipherSuites struct {

	// Cipher suite name.
	Cipher string `json:"cipher,omitempty"`

	// SSL/TLS cipher suites priority.
	Priority int `json:"priority,omitempty"`

	// SSL/TLS versions that the cipher suite can be used with.
	Versions string `json:"versions,omitempty"`
}

// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507).
type FirewallVipSslClientFallback string

// Allow/block client renegotiation by server.
type FirewallVipSslClientRenegotiation string

// Control Client to FortiGate SSL session state preservation.
type FirewallVipSslClientSessionStateType string

// Size of Diffie-Hellman prime used in DHE-RSA negotiation.
type FirewallVipSslDhBits string

// Enable/disable location conversion on HTTP response header.
type FirewallVipSslHttpLocationConversion string

// Enable/disable HTTP host matching for location conversion.
type FirewallVipSslHttpMatchHost string

// Highest SSL/TLS version acceptable from a client.
type FirewallVipSslMaxVersion string

// Lowest SSL/TLS version acceptable from a client.
type FirewallVipSslMinVersion string

// SSL/TLS mode for encryption & decryption of traffic.
type FirewallVipSslMode string

// SSL Perfect Forward Secrecy.
type FirewallVipSslPfs string

// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only).
type FirewallVipSslSendEmptyFrags string

// Relative strength of encryption algorithms accepted in negotiation with server.
type FirewallVipSslServerAlgorithm string

// SSL/TLS cipher suites to offer to a server, ordered by priority.
type FirewallVipSslServerCipherSuites struct {

	// Cipher suite name.
	Cipher string `json:"cipher,omitempty"`

	// SSL/TLS cipher suites priority.
	Priority int `json:"priority,omitempty"`

	// SSL/TLS versions that the cipher suite can be used with.
	Versions string `json:"versions,omitempty"`
}

// Highest SSL/TLS version acceptable from a server.
type FirewallVipSslServerMaxVersion string

// Lowest SSL/TLS version acceptable from a server.
type FirewallVipSslServerMinVersion string

// Control FortiGate to server SSL session state preservation.
type FirewallVipSslServerSessionStateType string

// VIP type: static NAT, load balance., server load balance
type FirewallVipType string

// Enable/disable adding HTTP header indicating SSL offload for WebLogic server.
type FirewallVipWeblogicServer string

// Enable/disable adding HTTP header indicating SSL offload for WebSphere server.
type FirewallVipWebsphereServer string

const (
	// Disable ARP reply.
	FirewallVipArpReplyDisable FirewallVipArpReply = "disable"

	// Enable ARP reply.
	FirewallVipArpReplyEnable FirewallVipArpReply = "enable"
)

const (
	// Disable use of HTTP cookie domain from host field in HTTP (use http-cooke-domain setting).
	FirewallVipHttpCookieDomainFromHostDisable FirewallVipHttpCookieDomainFromHost = "disable"

	// Enable use of HTTP cookie domain from host field in HTTP.
	FirewallVipHttpCookieDomainFromHostEnable FirewallVipHttpCookieDomainFromHost = "enable"
)

const (
	// Only allow HTTP cookie to match this virtual server.
	FirewallVipHttpCookieShareDisable FirewallVipHttpCookieShare = "disable"

	// Allow HTTP cookie to match any virtual server with same IP.
	FirewallVipHttpCookieShareSameIp FirewallVipHttpCookieShare = "same-ip"
)

const (
	// Enable adding HTTP header.
	FirewallVipHttpIpHeaderEnable FirewallVipHttpIpHeader = "enable"

	// Disable adding HTTP header.
	FirewallVipHttpIpHeaderDisable FirewallVipHttpIpHeader = "disable"
)

const (
	// Enable HTTP session multiplexing.
	FirewallVipHttpMultiplexEnable FirewallVipHttpMultiplex = "enable"

	// Disable HTTP session multiplexing.
	FirewallVipHttpMultiplexDisable FirewallVipHttpMultiplex = "disable"
)

const (
	// Do not mark cookie as secure, allow sharing between an HTTP and HTTPS connection.
	FirewallVipHttpsCookieSecureDisable FirewallVipHttpsCookieSecure = "disable"

	// Mark inserted cookie as secure, cookie can only be used for HTTPS a connection.
	FirewallVipHttpsCookieSecureEnable FirewallVipHttpsCookieSecure = "enable"
)

const (
	// Distribute to server based on source IP.
	FirewallVipLdbMethodStatic FirewallVipLdbMethod = "static"

	// Distribute to server based round robin order.
	FirewallVipLdbMethodRoundRobin FirewallVipLdbMethod = "round-robin"

	// Distribute to server based on weight.
	FirewallVipLdbMethodWeighted FirewallVipLdbMethod = "weighted"

	// Distribute to server with lowest session count.
	FirewallVipLdbMethodLeastSession FirewallVipLdbMethod = "least-session"

	// Distribute to server with lowest Round-Trip-Time.
	FirewallVipLdbMethodLeastRtt FirewallVipLdbMethod = "least-rtt"

	// Distribute to the first server that is alive.
	FirewallVipLdbMethodFirstAlive FirewallVipLdbMethod = "first-alive"

	// Distribute to server based on host field in HTTP header.
	FirewallVipLdbMethodHttpHost FirewallVipLdbMethod = "http-host"
)

const (
	// Do not force to NAT as VIP.
	FirewallVipNatSourceVipDisable FirewallVipNatSourceVip = "disable"

	// Force to NAT as VIP.
	FirewallVipNatSourceVipEnable FirewallVipNatSourceVip = "enable"
)

const (
	// Disable Outlook Web Access support.
	FirewallVipOutlookWebAccessDisable FirewallVipOutlookWebAccess = "disable"

	// Enable Outlook Web Access support.
	FirewallVipOutlookWebAccessEnable FirewallVipOutlookWebAccess = "enable"
)

const (
	// None.
	FirewallVipPersistenceNone FirewallVipPersistence = "none"

	// HTTP cookie.
	FirewallVipPersistenceHttpCookie FirewallVipPersistence = "http-cookie"

	// SSL session ID.
	FirewallVipPersistenceSslSessionId FirewallVipPersistence = "ssl-session-id"
)

const (
	// Disable port forward.
	FirewallVipPortforwardDisable FirewallVipPortforward = "disable"

	// Enable port forward.
	FirewallVipPortforwardEnable FirewallVipPortforward = "enable"
)

const (
	// One to one.
	FirewallVipPortmappingType1To1 FirewallVipPortmappingType = "1-to-1"

	// Many to many.
	FirewallVipPortmappingTypeMToN FirewallVipPortmappingType = "m-to-n"
)

const (
	// TCP.
	FirewallVipProtocolTcp FirewallVipProtocol = "tcp"

	// UDP.
	FirewallVipProtocolUdp FirewallVipProtocol = "udp"

	// SCTP.
	FirewallVipProtocolSctp FirewallVipProtocol = "sctp"

	// ICMP.
	FirewallVipProtocolIcmp FirewallVipProtocol = "icmp"
)

const (
	// HTTP
	FirewallVipServerTypeHttp FirewallVipServerType = "http"

	// HTTPS
	FirewallVipServerTypeHttps FirewallVipServerType = "https"

	// IMAPS
	FirewallVipServerTypeImaps FirewallVipServerType = "imaps"

	// POP3S
	FirewallVipServerTypePop3s FirewallVipServerType = "pop3s"

	// SMTPS
	FirewallVipServerTypeSmtps FirewallVipServerType = "smtps"

	// SSL
	FirewallVipServerTypeSsl FirewallVipServerType = "ssl"

	// TCP
	FirewallVipServerTypeTcp FirewallVipServerType = "tcp"

	// UDP
	FirewallVipServerTypeUdp FirewallVipServerType = "udp"

	// IP
	FirewallVipServerTypeIp FirewallVipServerType = "ip"
)

const (
	// Use AES or ChaCha.
	FirewallVipSslAlgorithmHigh FirewallVipSslAlgorithm = "high"

	// Use AES, ChaCha, 3DES, or RC4.
	FirewallVipSslAlgorithmMedium FirewallVipSslAlgorithm = "medium"

	// Use AES, ChaCha, 3DES, RC4, or DES.
	FirewallVipSslAlgorithmLow FirewallVipSslAlgorithm = "low"

	// Use custom cipher suite algorithms.
	FirewallVipSslAlgorithmCustom FirewallVipSslAlgorithm = "custom"
)

const (
	// Disable.
	FirewallVipSslClientFallbackDisable FirewallVipSslClientFallback = "disable"

	// Enable.
	FirewallVipSslClientFallbackEnable FirewallVipSslClientFallback = "enable"
)

const (
	// Allow a SSL client to renegotiate.
	FirewallVipSslClientRenegotiationAllow FirewallVipSslClientRenegotiation = "allow"

	// Abort any SSL connection that attempts to renegotiate.
	FirewallVipSslClientRenegotiationDeny FirewallVipSslClientRenegotiation = "deny"

	// Reject any SSL connection that does not offer a RFC 5746 Secure Renegotiation Indication.
	FirewallVipSslClientRenegotiationSecure FirewallVipSslClientRenegotiation = "secure"
)

const (
	// Do not keep session states.
	FirewallVipSslClientSessionStateTypeDisable FirewallVipSslClientSessionStateType = "disable"

	// Expire session states after this many minutes.
	FirewallVipSslClientSessionStateTypeTime FirewallVipSslClientSessionStateType = "time"

	// Expire session states when this maximum is reached.
	FirewallVipSslClientSessionStateTypeCount FirewallVipSslClientSessionStateType = "count"

	// Expire session states based on time or count, whichever occurs first.
	FirewallVipSslClientSessionStateTypeBoth FirewallVipSslClientSessionStateType = "both"
)

const (
	// 768-bit Diffie-Hellman prime.
	FirewallVipSslDhBits768 FirewallVipSslDhBits = "768"

	// 1024-bit Diffie-Hellman prime.
	FirewallVipSslDhBits1024 FirewallVipSslDhBits = "1024"

	// 1536-bit Diffie-Hellman prime.
	FirewallVipSslDhBits1536 FirewallVipSslDhBits = "1536"

	// 2048-bit Diffie-Hellman prime.
	FirewallVipSslDhBits2048 FirewallVipSslDhBits = "2048"

	// 3072-bit Diffie-Hellman prime.
	FirewallVipSslDhBitsX3072 FirewallVipSslDhBits = "3072"

	// 4096-bit Diffie-Hellman prime.
	FirewallVipSslDhBits4096 FirewallVipSslDhBits = "4096"
)

const (
	// Enable HTTP location conversion.
	FirewallVipSslHttpLocationConversionEnable FirewallVipSslHttpLocationConversion = "enable"

	// Disable HTTP location conversion.
	FirewallVipSslHttpLocationConversionDisable FirewallVipSslHttpLocationConversion = "disable"
)

const (
	// Match HTTP host in response header.
	FirewallVipSslHttpMatchHostEnable FirewallVipSslHttpMatchHost = "enable"

	// Do not match HTTP host.
	FirewallVipSslHttpMatchHostDisable FirewallVipSslHttpMatchHost = "disable"
)

const (
	// SSL 3.0.
	FirewallVipSslMaxVersionSslX30 FirewallVipSslMaxVersion = "ssl-3.0"

	// TLS 1.0.
	FirewallVipSslMaxVersionTls10 FirewallVipSslMaxVersion = "tls-1.0"

	// TLS 1.1.
	FirewallVipSslMaxVersionTls11 FirewallVipSslMaxVersion = "tls-1.1"

	// TLS 1.2.
	FirewallVipSslMaxVersionTls12 FirewallVipSslMaxVersion = "tls-1.2"
)

const (
	// SSL 3.0.
	FirewallVipSslMinVersionSslX30 FirewallVipSslMinVersion = "ssl-3.0"

	// TLS 1.0.
	FirewallVipSslMinVersionTls10 FirewallVipSslMinVersion = "tls-1.0"

	// TLS 1.1.
	FirewallVipSslMinVersionTls11 FirewallVipSslMinVersion = "tls-1.1"

	// TLS 1.2.
	FirewallVipSslMinVersionTls12 FirewallVipSslMinVersion = "tls-1.2"
)

const (
	// Client to FortiGate SSL.
	FirewallVipSslModeHalf FirewallVipSslMode = "half"

	// Client to FortiGate and FortiGate to Server SSL.
	FirewallVipSslModeFull FirewallVipSslMode = "full"
)

const (
	// PFS mandatory.
	FirewallVipSslPfsRequire FirewallVipSslPfs = "require"

	// PFS rejected.
	FirewallVipSslPfsDeny FirewallVipSslPfs = "deny"

	// PFS allowed.
	FirewallVipSslPfsAllow FirewallVipSslPfs = "allow"
)

const (
	// Send empty fragments.
	FirewallVipSslSendEmptyFragsEnable FirewallVipSslSendEmptyFrags = "enable"

	// Do not send empty fragments.
	FirewallVipSslSendEmptyFragsDisable FirewallVipSslSendEmptyFrags = "disable"
)

const (
	// Use AES or ChaCha.
	FirewallVipSslServerAlgorithmHigh FirewallVipSslServerAlgorithm = "high"

	// Use AES, ChaCha, 3DES, or RC4.
	FirewallVipSslServerAlgorithmMedium FirewallVipSslServerAlgorithm = "medium"

	// Use AES, ChaCha, 3DES, RC4, or DES.
	FirewallVipSslServerAlgorithmLow FirewallVipSslServerAlgorithm = "low"

	// Use custom cipher suite algorithms.
	FirewallVipSslServerAlgorithmCustom FirewallVipSslServerAlgorithm = "custom"

	// Use algorithms defined by ssl-algorithm.
	FirewallVipSslServerAlgorithmClient FirewallVipSslServerAlgorithm = "client"
)

const (
	// SSL 3.0.
	FirewallVipSslServerMaxVersionSslX30 FirewallVipSslServerMaxVersion = "ssl-3.0"

	// TLS 1.0.
	FirewallVipSslServerMaxVersionTls10 FirewallVipSslServerMaxVersion = "tls-1.0"

	// TLS 1.1.
	FirewallVipSslServerMaxVersionTls11 FirewallVipSslServerMaxVersion = "tls-1.1"

	// TLS 1.2.
	FirewallVipSslServerMaxVersionTls12 FirewallVipSslServerMaxVersion = "tls-1.2"

	// Use same value as client configuration.
	FirewallVipSslServerMaxVersionClient FirewallVipSslServerMaxVersion = "client"
)

const (
	// SSL 3.0.
	FirewallVipSslServerMinVersionSslX30 FirewallVipSslServerMinVersion = "ssl-3.0"

	// TLS 1.0.
	FirewallVipSslServerMinVersionTls10 FirewallVipSslServerMinVersion = "tls-1.0"

	// TLS 1.1.
	FirewallVipSslServerMinVersionTls11 FirewallVipSslServerMinVersion = "tls-1.1"

	// TLS 1.2.
	FirewallVipSslServerMinVersionTls12 FirewallVipSslServerMinVersion = "tls-1.2"

	// Use same value as client configuration.
	FirewallVipSslServerMinVersionClient FirewallVipSslServerMinVersion = "client"
)

const (
	// Do not keep session states.
	FirewallVipSslServerSessionStateTypeDisable FirewallVipSslServerSessionStateType = "disable"

	// Expire session states after this many minutes.
	FirewallVipSslServerSessionStateTypeTime FirewallVipSslServerSessionStateType = "time"

	// Expire session states when this maximum is reached.
	FirewallVipSslServerSessionStateTypeCount FirewallVipSslServerSessionStateType = "count"

	// Expire session states based on time or count, whichever occurs first.
	FirewallVipSslServerSessionStateTypeBoth FirewallVipSslServerSessionStateType = "both"
)

const (
	// Static NAT.
	FirewallVipTypeStaticNat FirewallVipType = "static-nat"

	// Load balance.
	FirewallVipTypeLoadBalance FirewallVipType = "load-balance"

	// Server load balance.
	FirewallVipTypeServerLoadBalance FirewallVipType = "server-load-balance"

	// DNS translation.
	FirewallVipTypeDnsTranslation FirewallVipType = "dns-translation"

	// Fully qualified domain name.
	FirewallVipTypeFqdn FirewallVipType = "fqdn"
)

const (
	// Do not add HTTP header indicating SSL offload for WebLogic server.
	FirewallVipWeblogicServerDisable FirewallVipWeblogicServer = "disable"

	// Add HTTP header indicating SSL offload for WebLogic server.
	FirewallVipWeblogicServerEnable FirewallVipWeblogicServer = "enable"
)

const (
	// Do not add HTTP header indicating SSL offload for WebSphere server.
	FirewallVipWebsphereServerDisable FirewallVipWebsphereServer = "disable"

	// Add HTTP header indicating SSL offload for WebSphere server.
	FirewallVipWebsphereServerEnable FirewallVipWebsphereServer = "enable"
)

// Configure virtual IP for IPv4.
type FirewallVip struct {

	// Enable/disable ARP reply.
	ArpReply FirewallVipArpReply `json:"arp-reply,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl int `json:"dns-mapping-ttl,omitempty"`

	// External interface.
	Extintf string `json:"extintf,omitempty"`

	// Start external IP - end external IP.
	Extip string `json:"extip,omitempty"`

	// External service port.
	Extport string `json:"extport,omitempty"`

	// Interval between sending gratuitous ARPs in seconds (0 = disable).
	GratuitousArpInterval int `json:"gratuitous-arp-interval,omitempty"`

	// Number of minutes the web browser should keep cookie (0 = forever).
	HttpCookieAge int `json:"http-cookie-age,omitempty"`

	// HTTP cookie domain.
	HttpCookieDomain string `json:"http-cookie-domain,omitempty"`

	// Enable/disable use of HTTP cookie domain from host field in HTTP.
	HttpCookieDomainFromHost FirewallVipHttpCookieDomainFromHost `json:"http-cookie-domain-from-host,omitempty"`

	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration int `json:"http-cookie-generation,omitempty"`

	// HTTP cookie path.
	HttpCookiePath string `json:"http-cookie-path,omitempty"`

	// Share HTTP cookies across different virtual servers.
	HttpCookieShare FirewallVipHttpCookieShare `json:"http-cookie-share,omitempty"`

	// Add additional HTTP header containing client's original IP address.
	HttpIpHeader FirewallVipHttpIpHeader `json:"http-ip-header,omitempty"`

	// Name of HTTP header containing client's IP address (X-Forwarded-For is used if empty).
	HttpIpHeaderName string `json:"http-ip-header-name,omitempty"`

	// Enable/disable multiplex HTTP requests/responses over a single TCP connection.
	HttpMultiplex FirewallVipHttpMultiplex `json:"http-multiplex,omitempty"`

	// Enable/disable verification of cookie inserted into HTTPS is marked as secure.
	HttpsCookieSecure FirewallVipHttpsCookieSecure `json:"https-cookie-secure,omitempty"`

	// Custom defined ID.
	Id int `json:"id,omitempty"`

	// Load balance method.
	LdbMethod FirewallVipLdbMethod `json:"ldb-method,omitempty"`

	// Mapped address.
	MappedAddr string `json:"mapped-addr,omitempty"`

	// Mapped IP (x.x.x.x/x x.x.x.x-y.y.y.y).
	Mappedip []FirewallVipMappedip `json:"mappedip,omitempty"`

	// Mapped service port.
	Mappedport string `json:"mappedport,omitempty"`

	// Maximum number of incomplete connections.
	MaxEmbryonicConnections int `json:"max-embryonic-connections,omitempty"`

	// Health monitors.
	Monitor string `json:"monitor,omitempty"`

	// Virtual IP name.
	Name string `json:"name,omitempty"`

	// Enable/disable force NAT as VIP when server goes out.
	NatSourceVip FirewallVipNatSourceVip `json:"nat-source-vip,omitempty"`

	// Enable/disable adding HTTP header indicating SSL offload for Outlook Web Access server.
	OutlookWebAccess FirewallVipOutlookWebAccess `json:"outlook-web-access,omitempty"`

	// Persistence.
	Persistence FirewallVipPersistence `json:"persistence,omitempty"`

	// Enable/disable port forward.
	Portforward FirewallVipPortforward `json:"portforward,omitempty"`

	// Port mapping type.
	PortmappingType FirewallVipPortmappingType `json:"portmapping-type,omitempty"`

	// Mapped port protocol.
	Protocol FirewallVipProtocol `json:"protocol,omitempty"`

	// Real servers.
	Realservers []FirewallVipRealservers `json:"realservers,omitempty"`

	// Server type.
	ServerType FirewallVipServerType `json:"server-type,omitempty"`

	// Source IP filter (x.x.x.x/x x.x.x.x-y.y.y.y).
	SrcFilter []FirewallVipSrcFilter `json:"src-filter,omitempty"`

	// Source interface filter.
	SrcintfFilter []FirewallVipSrcintfFilter `json:"srcintf-filter,omitempty"`

	// Relative strength of encryption algorithms accepted in negotiation with client.
	SslAlgorithm FirewallVipSslAlgorithm `json:"ssl-algorithm,omitempty"`

	// Name of Certificate to offer in every SSL connection.
	SslCertificate string `json:"ssl-certificate,omitempty"`

	// SSL/TLS cipher suites acceptable from a client, ordered by priority.
	SslCipherSuites []FirewallVipSslCipherSuites `json:"ssl-cipher-suites,omitempty"`

	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507).
	SslClientFallback FirewallVipSslClientFallback `json:"ssl-client-fallback,omitempty"`

	// Allow/block client renegotiation by server.
	SslClientRenegotiation FirewallVipSslClientRenegotiation `json:"ssl-client-renegotiation,omitempty"`

	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax int `json:"ssl-client-session-state-max,omitempty"`

	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout int `json:"ssl-client-session-state-timeout,omitempty"`

	// Control Client to FortiGate SSL session state preservation.
	SslClientSessionStateType FirewallVipSslClientSessionStateType `json:"ssl-client-session-state-type,omitempty"`

	// Size of Diffie-Hellman prime used in DHE-RSA negotiation.
	SslDhBits FirewallVipSslDhBits `json:"ssl-dh-bits,omitempty"`

	// Enable/disable location conversion on HTTP response header.
	SslHttpLocationConversion FirewallVipSslHttpLocationConversion `json:"ssl-http-location-conversion,omitempty"`

	// Enable/disable HTTP host matching for location conversion.
	SslHttpMatchHost FirewallVipSslHttpMatchHost `json:"ssl-http-match-host,omitempty"`

	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion FirewallVipSslMaxVersion `json:"ssl-max-version,omitempty"`

	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion FirewallVipSslMinVersion `json:"ssl-min-version,omitempty"`

	// SSL/TLS mode for encryption & decryption of traffic.
	SslMode FirewallVipSslMode `json:"ssl-mode,omitempty"`

	// SSL Perfect Forward Secrecy.
	SslPfs FirewallVipSslPfs `json:"ssl-pfs,omitempty"`

	// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only).
	SslSendEmptyFrags FirewallVipSslSendEmptyFrags `json:"ssl-send-empty-frags,omitempty"`

	// Relative strength of encryption algorithms accepted in negotiation with server.
	SslServerAlgorithm FirewallVipSslServerAlgorithm `json:"ssl-server-algorithm,omitempty"`

	// SSL/TLS cipher suites to offer to a server, ordered by priority.
	SslServerCipherSuites []FirewallVipSslServerCipherSuites `json:"ssl-server-cipher-suites,omitempty"`

	// Highest SSL/TLS version acceptable from a server.
	SslServerMaxVersion FirewallVipSslServerMaxVersion `json:"ssl-server-max-version,omitempty"`

	// Lowest SSL/TLS version acceptable from a server.
	SslServerMinVersion FirewallVipSslServerMinVersion `json:"ssl-server-min-version,omitempty"`

	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax int `json:"ssl-server-session-state-max,omitempty"`

	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout int `json:"ssl-server-session-state-timeout,omitempty"`

	// Control FortiGate to server SSL session state preservation.
	SslServerSessionStateType FirewallVipSslServerSessionStateType `json:"ssl-server-session-state-type,omitempty"`

	// VIP type: static NAT, load balance., server load balance
	Type FirewallVipType `json:"type,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable adding HTTP header indicating SSL offload for WebLogic server.
	WeblogicServer FirewallVipWeblogicServer `json:"weblogic-server,omitempty"`

	// Enable/disable adding HTTP header indicating SSL offload for WebSphere server.
	WebsphereServer FirewallVipWebsphereServer `json:"websphere-server,omitempty"`
}

// Returns the value that identifies a FirewallVip
func (x *FirewallVip) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVipResults struct {
	Results []*FirewallVip `json:"results"`
	Mkey    string         `json:"mkey"`
	Result
}

// List all FirewallVips
func (c *WebClient) ListFirewallVips() (res []*FirewallVip, err error) {
	var results FirewallVipResults
	_, err = c.do(http.MethodGet, "firewall/vip", nil, nil, &results)
	if err != nil {
		return []*FirewallVip{}, fmt.Errorf("error listing FirewallVips: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVip by name
func (c *WebClient) GetFirewallVip(mkey string) (res *FirewallVip, err error) {
	var results FirewallVipResults
	_, err = c.do(http.MethodGet, "firewall/vip/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVip{}, fmt.Errorf("error getting FirewallVip '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVip
func (c *WebClient) CreateFirewallVip(obj *FirewallVip) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vip", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVip '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVip
func (c *WebClient) UpdateFirewallVip(obj *FirewallVip) error {
	_, err := c.do(http.MethodPut, "firewall/vip/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVip '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVip by name
func (c *WebClient) DeleteFirewallVip(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vip/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVip '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVips
func (c *FakeClient) ListFirewallVips() (res []*FirewallVip, err error) {
	for _, r := range c.FirewallVips {
		res = append(res, r)
	}
	return
}

// Get a FirewallVip by name
func (c *FakeClient) GetFirewallVip(mkey string) (*FirewallVip, error) {
	if res, ok := c.FirewallVips[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVip{}, fmt.Errorf("error getting FirewallVip '%s': not found", mkey)
	}
}

// Create a new FirewallVip
func (c *FakeClient) CreateFirewallVip(obj *FirewallVip) (id string, err error) {
	id = obj.Name
	c.FirewallVips[id] = obj
	return
}

// Update a FirewallVip
func (c *FakeClient) UpdateFirewallVip(obj *FirewallVip) (err error) {
	c.FirewallVips[obj.Name] = obj
	return nil
}

// Delete a FirewallVip by name
func (c *FakeClient) DeleteFirewallVip(mkey string) (err error) {
	delete(c.FirewallVips, mkey)
	return nil
}

// Enable/disable ARP reply.
type VIPArpReply string

// Enable/disable use of HTTP cookie domain from host field in HTTP.
type VIPHttpCookieDomainFromHost string

// Share HTTP cookies across different virtual servers.
type VIPHttpCookieShare string

// Add additional HTTP header containing client's original IP address.
type VIPHttpIpHeader string

// Enable/disable multiplex HTTP requests/responses over a single TCP connection.
type VIPHttpMultiplex string

// Enable/disable verification of cookie inserted into HTTPS is marked as secure.
type VIPHttpsCookieSecure string

// Load balance method.
type VIPLdbMethod string

// Mapped IP (x.x.x.x/x x.x.x.x-y.y.y.y).
type VIPMappedip struct {

	// Mapped IP range.
	Range string `json:"range,omitempty"`
}

// Enable/disable force NAT as VIP when server goes out.
type VIPNatSourceVip string

// Enable/disable adding HTTP header indicating SSL offload for Outlook Web Access server.
type VIPOutlookWebAccess string

// Persistence.
type VIPPersistence string

// Enable/disable port forward.
type VIPPortforward string

// Port mapping type.
type VIPPortmappingType string

// Mapped port protocol.
type VIPProtocol string

// Real servers.
type VIPRealservers struct {

	// Restrict server to a client IP in this range.
	ClientIp string `json:"client-ip,omitempty"`

	// Per server health check.
	Healthcheck string `json:"healthcheck,omitempty"`

	// Hold down interval.
	HolddownInterval int `json:"holddown-interval,omitempty"`

	// HTTP server domain name in HTTP header.
	HttpHost string `json:"http-host,omitempty"`

	// Real server ID.
	Id int `json:"id,omitempty"`

	// Mapped server IP.
	Ip string `json:"ip,omitempty"`

	// Maximum number of connections allowed to server.
	MaxConnections int `json:"max-connections,omitempty"`

	// Health monitors.
	Monitor string `json:"monitor,omitempty"`

	// Mapped server port.
	Port int `json:"port,omitempty"`

	// Server administrative status.
	Status string `json:"status,omitempty"`

	// weight
	Weight int `json:"weight,omitempty"`
}

// Server type.
type VIPServerType string

// Source IP filter (x.x.x.x/x x.x.x.x-y.y.y.y).
type VIPSrcFilter struct {

	// Source-filter range.
	Range string `json:"range,omitempty"`
}

// Source interface filter.
type VIPSrcintfFilter struct {

	// Interface name.
	InterfaceName string `json:"interface-name,omitempty"`
}

// Relative strength of encryption algorithms accepted in negotiation with client.
type VIPSslAlgorithm string

// SSL/TLS cipher suites acceptable from a client, ordered by priority.
type VIPSslCipherSuites struct {

	// Cipher suite name.
	Cipher string `json:"cipher,omitempty"`

	// SSL/TLS cipher suites priority.
	Priority int `json:"priority,omitempty"`

	// SSL/TLS versions that the cipher suite can be used with.
	Versions string `json:"versions,omitempty"`
}

// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507).
type VIPSslClientFallback string

// Allow/block client renegotiation by server.
type VIPSslClientRenegotiation string

// Control Client to FortiGate SSL session state preservation.
type VIPSslClientSessionStateType string

// Size of Diffie-Hellman prime used in DHE-RSA negotiation.
type VIPSslDhBits string

// Enable/disable location conversion on HTTP response header.
type VIPSslHttpLocationConversion string

// Enable/disable HTTP host matching for location conversion.
type VIPSslHttpMatchHost string

// Highest SSL/TLS version acceptable from a client.
type VIPSslMaxVersion string

// Lowest SSL/TLS version acceptable from a client.
type VIPSslMinVersion string

// SSL/TLS mode for encryption & decryption of traffic.
type VIPSslMode string

// SSL Perfect Forward Secrecy.
type VIPSslPfs string

// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only).
type VIPSslSendEmptyFrags string

// Relative strength of encryption algorithms accepted in negotiation with server.
type VIPSslServerAlgorithm string

// SSL/TLS cipher suites to offer to a server, ordered by priority.
type VIPSslServerCipherSuites struct {

	// Cipher suite name.
	Cipher string `json:"cipher,omitempty"`

	// SSL/TLS cipher suites priority.
	Priority int `json:"priority,omitempty"`

	// SSL/TLS versions that the cipher suite can be used with.
	Versions string `json:"versions,omitempty"`
}

// Highest SSL/TLS version acceptable from a server.
type VIPSslServerMaxVersion string

// Lowest SSL/TLS version acceptable from a server.
type VIPSslServerMinVersion string

// Control FortiGate to server SSL session state preservation.
type VIPSslServerSessionStateType string

// VIP type: static NAT, load balance., server load balance
type VIPType string

// Enable/disable adding HTTP header indicating SSL offload for WebLogic server.
type VIPWeblogicServer string

// Enable/disable adding HTTP header indicating SSL offload for WebSphere server.
type VIPWebsphereServer string

const (
	// Disable ARP reply.
	VIPArpReplyDisable VIPArpReply = "disable"

	// Enable ARP reply.
	VIPArpReplyEnable VIPArpReply = "enable"
)

const (
	// Disable use of HTTP cookie domain from host field in HTTP (use http-cooke-domain setting).
	VIPHttpCookieDomainFromHostDisable VIPHttpCookieDomainFromHost = "disable"

	// Enable use of HTTP cookie domain from host field in HTTP.
	VIPHttpCookieDomainFromHostEnable VIPHttpCookieDomainFromHost = "enable"
)

const (
	// Only allow HTTP cookie to match this virtual server.
	VIPHttpCookieShareDisable VIPHttpCookieShare = "disable"

	// Allow HTTP cookie to match any virtual server with same IP.
	VIPHttpCookieShareSameIp VIPHttpCookieShare = "same-ip"
)

const (
	// Enable adding HTTP header.
	VIPHttpIpHeaderEnable VIPHttpIpHeader = "enable"

	// Disable adding HTTP header.
	VIPHttpIpHeaderDisable VIPHttpIpHeader = "disable"
)

const (
	// Enable HTTP session multiplexing.
	VIPHttpMultiplexEnable VIPHttpMultiplex = "enable"

	// Disable HTTP session multiplexing.
	VIPHttpMultiplexDisable VIPHttpMultiplex = "disable"
)

const (
	// Do not mark cookie as secure, allow sharing between an HTTP and HTTPS connection.
	VIPHttpsCookieSecureDisable VIPHttpsCookieSecure = "disable"

	// Mark inserted cookie as secure, cookie can only be used for HTTPS a connection.
	VIPHttpsCookieSecureEnable VIPHttpsCookieSecure = "enable"
)

const (
	// Distribute to server based on source IP.
	VIPLdbMethodStatic VIPLdbMethod = "static"

	// Distribute to server based round robin order.
	VIPLdbMethodRoundRobin VIPLdbMethod = "round-robin"

	// Distribute to server based on weight.
	VIPLdbMethodWeighted VIPLdbMethod = "weighted"

	// Distribute to server with lowest session count.
	VIPLdbMethodLeastSession VIPLdbMethod = "least-session"

	// Distribute to server with lowest Round-Trip-Time.
	VIPLdbMethodLeastRtt VIPLdbMethod = "least-rtt"

	// Distribute to the first server that is alive.
	VIPLdbMethodFirstAlive VIPLdbMethod = "first-alive"

	// Distribute to server based on host field in HTTP header.
	VIPLdbMethodHttpHost VIPLdbMethod = "http-host"
)

const (
	// Do not force to NAT as VIP.
	VIPNatSourceVipDisable VIPNatSourceVip = "disable"

	// Force to NAT as VIP.
	VIPNatSourceVipEnable VIPNatSourceVip = "enable"
)

const (
	// Disable Outlook Web Access support.
	VIPOutlookWebAccessDisable VIPOutlookWebAccess = "disable"

	// Enable Outlook Web Access support.
	VIPOutlookWebAccessEnable VIPOutlookWebAccess = "enable"
)

const (
	// None.
	VIPPersistenceNone VIPPersistence = "none"

	// HTTP cookie.
	VIPPersistenceHttpCookie VIPPersistence = "http-cookie"

	// SSL session ID.
	VIPPersistenceSslSessionId VIPPersistence = "ssl-session-id"
)

const (
	// Disable port forward.
	VIPPortforwardDisable VIPPortforward = "disable"

	// Enable port forward.
	VIPPortforwardEnable VIPPortforward = "enable"
)

const (
	// One to one.
	VIPPortmappingType1To1 VIPPortmappingType = "1-to-1"

	// Many to many.
	VIPPortmappingTypeMToN VIPPortmappingType = "m-to-n"
)

const (
	// TCP.
	VIPProtocolTcp VIPProtocol = "tcp"

	// UDP.
	VIPProtocolUdp VIPProtocol = "udp"

	// SCTP.
	VIPProtocolSctp VIPProtocol = "sctp"

	// ICMP.
	VIPProtocolIcmp VIPProtocol = "icmp"
)

const (
	// HTTP
	VIPServerTypeHttp VIPServerType = "http"

	// HTTPS
	VIPServerTypeHttps VIPServerType = "https"

	// IMAPS
	VIPServerTypeImaps VIPServerType = "imaps"

	// POP3S
	VIPServerTypePop3s VIPServerType = "pop3s"

	// SMTPS
	VIPServerTypeSmtps VIPServerType = "smtps"

	// SSL
	VIPServerTypeSsl VIPServerType = "ssl"

	// TCP
	VIPServerTypeTcp VIPServerType = "tcp"

	// UDP
	VIPServerTypeUdp VIPServerType = "udp"

	// IP
	VIPServerTypeIp VIPServerType = "ip"
)

const (
	// Use AES or ChaCha.
	VIPSslAlgorithmHigh VIPSslAlgorithm = "high"

	// Use AES, ChaCha, 3DES, or RC4.
	VIPSslAlgorithmMedium VIPSslAlgorithm = "medium"

	// Use AES, ChaCha, 3DES, RC4, or DES.
	VIPSslAlgorithmLow VIPSslAlgorithm = "low"

	// Use custom cipher suite algorithms.
	VIPSslAlgorithmCustom VIPSslAlgorithm = "custom"
)

const (
	// Disable.
	VIPSslClientFallbackDisable VIPSslClientFallback = "disable"

	// Enable.
	VIPSslClientFallbackEnable VIPSslClientFallback = "enable"
)

const (
	// Allow a SSL client to renegotiate.
	VIPSslClientRenegotiationAllow VIPSslClientRenegotiation = "allow"

	// Abort any SSL connection that attempts to renegotiate.
	VIPSslClientRenegotiationDeny VIPSslClientRenegotiation = "deny"

	// Reject any SSL connection that does not offer a RFC 5746 Secure Renegotiation Indication.
	VIPSslClientRenegotiationSecure VIPSslClientRenegotiation = "secure"
)

const (
	// Do not keep session states.
	VIPSslClientSessionStateTypeDisable VIPSslClientSessionStateType = "disable"

	// Expire session states after this many minutes.
	VIPSslClientSessionStateTypeTime VIPSslClientSessionStateType = "time"

	// Expire session states when this maximum is reached.
	VIPSslClientSessionStateTypeCount VIPSslClientSessionStateType = "count"

	// Expire session states based on time or count, whichever occurs first.
	VIPSslClientSessionStateTypeBoth VIPSslClientSessionStateType = "both"
)

const (
	// 768-bit Diffie-Hellman prime.
	VIPSslDhBits768 VIPSslDhBits = "768"

	// 1024-bit Diffie-Hellman prime.
	VIPSslDhBits1024 VIPSslDhBits = "1024"

	// 1536-bit Diffie-Hellman prime.
	VIPSslDhBits1536 VIPSslDhBits = "1536"

	// 2048-bit Diffie-Hellman prime.
	VIPSslDhBits2048 VIPSslDhBits = "2048"

	// 3072-bit Diffie-Hellman prime.
	VIPSslDhBitsX3072 VIPSslDhBits = "3072"

	// 4096-bit Diffie-Hellman prime.
	VIPSslDhBits4096 VIPSslDhBits = "4096"
)

const (
	// Enable HTTP location conversion.
	VIPSslHttpLocationConversionEnable VIPSslHttpLocationConversion = "enable"

	// Disable HTTP location conversion.
	VIPSslHttpLocationConversionDisable VIPSslHttpLocationConversion = "disable"
)

const (
	// Match HTTP host in response header.
	VIPSslHttpMatchHostEnable VIPSslHttpMatchHost = "enable"

	// Do not match HTTP host.
	VIPSslHttpMatchHostDisable VIPSslHttpMatchHost = "disable"
)

const (
	// SSL 3.0.
	VIPSslMaxVersionSslX30 VIPSslMaxVersion = "ssl-3.0"

	// TLS 1.0.
	VIPSslMaxVersionTls10 VIPSslMaxVersion = "tls-1.0"

	// TLS 1.1.
	VIPSslMaxVersionTls11 VIPSslMaxVersion = "tls-1.1"

	// TLS 1.2.
	VIPSslMaxVersionTls12 VIPSslMaxVersion = "tls-1.2"
)

const (
	// SSL 3.0.
	VIPSslMinVersionSslX30 VIPSslMinVersion = "ssl-3.0"

	// TLS 1.0.
	VIPSslMinVersionTls10 VIPSslMinVersion = "tls-1.0"

	// TLS 1.1.
	VIPSslMinVersionTls11 VIPSslMinVersion = "tls-1.1"

	// TLS 1.2.
	VIPSslMinVersionTls12 VIPSslMinVersion = "tls-1.2"
)

const (
	// Client to FortiGate SSL.
	VIPSslModeHalf VIPSslMode = "half"

	// Client to FortiGate and FortiGate to Server SSL.
	VIPSslModeFull VIPSslMode = "full"
)

const (
	// PFS mandatory.
	VIPSslPfsRequire VIPSslPfs = "require"

	// PFS rejected.
	VIPSslPfsDeny VIPSslPfs = "deny"

	// PFS allowed.
	VIPSslPfsAllow VIPSslPfs = "allow"
)

const (
	// Send empty fragments.
	VIPSslSendEmptyFragsEnable VIPSslSendEmptyFrags = "enable"

	// Do not send empty fragments.
	VIPSslSendEmptyFragsDisable VIPSslSendEmptyFrags = "disable"
)

const (
	// Use AES or ChaCha.
	VIPSslServerAlgorithmHigh VIPSslServerAlgorithm = "high"

	// Use AES, ChaCha, 3DES, or RC4.
	VIPSslServerAlgorithmMedium VIPSslServerAlgorithm = "medium"

	// Use AES, ChaCha, 3DES, RC4, or DES.
	VIPSslServerAlgorithmLow VIPSslServerAlgorithm = "low"

	// Use custom cipher suite algorithms.
	VIPSslServerAlgorithmCustom VIPSslServerAlgorithm = "custom"

	// Use algorithms defined by ssl-algorithm.
	VIPSslServerAlgorithmClient VIPSslServerAlgorithm = "client"
)

const (
	// SSL 3.0.
	VIPSslServerMaxVersionSslX30 VIPSslServerMaxVersion = "ssl-3.0"

	// TLS 1.0.
	VIPSslServerMaxVersionTls10 VIPSslServerMaxVersion = "tls-1.0"

	// TLS 1.1.
	VIPSslServerMaxVersionTls11 VIPSslServerMaxVersion = "tls-1.1"

	// TLS 1.2.
	VIPSslServerMaxVersionTls12 VIPSslServerMaxVersion = "tls-1.2"

	// Use same value as client configuration.
	VIPSslServerMaxVersionClient VIPSslServerMaxVersion = "client"
)

const (
	// SSL 3.0.
	VIPSslServerMinVersionSslX30 VIPSslServerMinVersion = "ssl-3.0"

	// TLS 1.0.
	VIPSslServerMinVersionTls10 VIPSslServerMinVersion = "tls-1.0"

	// TLS 1.1.
	VIPSslServerMinVersionTls11 VIPSslServerMinVersion = "tls-1.1"

	// TLS 1.2.
	VIPSslServerMinVersionTls12 VIPSslServerMinVersion = "tls-1.2"

	// Use same value as client configuration.
	VIPSslServerMinVersionClient VIPSslServerMinVersion = "client"
)

const (
	// Do not keep session states.
	VIPSslServerSessionStateTypeDisable VIPSslServerSessionStateType = "disable"

	// Expire session states after this many minutes.
	VIPSslServerSessionStateTypeTime VIPSslServerSessionStateType = "time"

	// Expire session states when this maximum is reached.
	VIPSslServerSessionStateTypeCount VIPSslServerSessionStateType = "count"

	// Expire session states based on time or count, whichever occurs first.
	VIPSslServerSessionStateTypeBoth VIPSslServerSessionStateType = "both"
)

const (
	// Static NAT.
	VIPTypeStaticNat VIPType = "static-nat"

	// Load balance.
	VIPTypeLoadBalance VIPType = "load-balance"

	// Server load balance.
	VIPTypeServerLoadBalance VIPType = "server-load-balance"

	// DNS translation.
	VIPTypeDnsTranslation VIPType = "dns-translation"

	// Fully qualified domain name.
	VIPTypeFqdn VIPType = "fqdn"
)

const (
	// Do not add HTTP header indicating SSL offload for WebLogic server.
	VIPWeblogicServerDisable VIPWeblogicServer = "disable"

	// Add HTTP header indicating SSL offload for WebLogic server.
	VIPWeblogicServerEnable VIPWeblogicServer = "enable"
)

const (
	// Do not add HTTP header indicating SSL offload for WebSphere server.
	VIPWebsphereServerDisable VIPWebsphereServer = "disable"

	// Add HTTP header indicating SSL offload for WebSphere server.
	VIPWebsphereServerEnable VIPWebsphereServer = "enable"
)

// Configure virtual IP for IPv4.
type VIP struct {

	// Enable/disable ARP reply.
	ArpReply VIPArpReply `json:"arp-reply,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// DNS mapping TTL (Set to zero to use TTL in DNS response, default = 0).
	DnsMappingTtl int `json:"dns-mapping-ttl,omitempty"`

	// External interface.
	Extintf string `json:"extintf,omitempty"`

	// Start external IP - end external IP.
	Extip string `json:"extip,omitempty"`

	// External service port.
	Extport string `json:"extport,omitempty"`

	// Interval between sending gratuitous ARPs in seconds (0 = disable).
	GratuitousArpInterval int `json:"gratuitous-arp-interval,omitempty"`

	// Number of minutes the web browser should keep cookie (0 = forever).
	HttpCookieAge int `json:"http-cookie-age,omitempty"`

	// HTTP cookie domain.
	HttpCookieDomain string `json:"http-cookie-domain,omitempty"`

	// Enable/disable use of HTTP cookie domain from host field in HTTP.
	HttpCookieDomainFromHost VIPHttpCookieDomainFromHost `json:"http-cookie-domain-from-host,omitempty"`

	// Generation of HTTP cookie to be accepted. Changing invalidates all existing cookies.
	HttpCookieGeneration int `json:"http-cookie-generation,omitempty"`

	// HTTP cookie path.
	HttpCookiePath string `json:"http-cookie-path,omitempty"`

	// Share HTTP cookies across different virtual servers.
	HttpCookieShare VIPHttpCookieShare `json:"http-cookie-share,omitempty"`

	// Add additional HTTP header containing client's original IP address.
	HttpIpHeader VIPHttpIpHeader `json:"http-ip-header,omitempty"`

	// Name of HTTP header containing client's IP address (X-Forwarded-For is used if empty).
	HttpIpHeaderName string `json:"http-ip-header-name,omitempty"`

	// Enable/disable multiplex HTTP requests/responses over a single TCP connection.
	HttpMultiplex VIPHttpMultiplex `json:"http-multiplex,omitempty"`

	// Enable/disable verification of cookie inserted into HTTPS is marked as secure.
	HttpsCookieSecure VIPHttpsCookieSecure `json:"https-cookie-secure,omitempty"`

	// Custom defined ID.
	Id int `json:"id,omitempty"`

	// Load balance method.
	LdbMethod VIPLdbMethod `json:"ldb-method,omitempty"`

	// Mapped address.
	MappedAddr string `json:"mapped-addr,omitempty"`

	// Mapped IP (x.x.x.x/x x.x.x.x-y.y.y.y).
	Mappedip []VIPMappedip `json:"mappedip,omitempty"`

	// Mapped service port.
	Mappedport string `json:"mappedport,omitempty"`

	// Maximum number of incomplete connections.
	MaxEmbryonicConnections int `json:"max-embryonic-connections,omitempty"`

	// Health monitors.
	Monitor string `json:"monitor,omitempty"`

	// Virtual IP name.
	Name string `json:"name,omitempty"`

	// Enable/disable force NAT as VIP when server goes out.
	NatSourceVip VIPNatSourceVip `json:"nat-source-vip,omitempty"`

	// Enable/disable adding HTTP header indicating SSL offload for Outlook Web Access server.
	OutlookWebAccess VIPOutlookWebAccess `json:"outlook-web-access,omitempty"`

	// Persistence.
	Persistence VIPPersistence `json:"persistence,omitempty"`

	// Enable/disable port forward.
	Portforward VIPPortforward `json:"portforward,omitempty"`

	// Port mapping type.
	PortmappingType VIPPortmappingType `json:"portmapping-type,omitempty"`

	// Mapped port protocol.
	Protocol VIPProtocol `json:"protocol,omitempty"`

	// Real servers.
	Realservers []VIPRealservers `json:"realservers,omitempty"`

	// Server type.
	ServerType VIPServerType `json:"server-type,omitempty"`

	// Source IP filter (x.x.x.x/x x.x.x.x-y.y.y.y).
	SrcFilter []VIPSrcFilter `json:"src-filter,omitempty"`

	// Source interface filter.
	SrcintfFilter []VIPSrcintfFilter `json:"srcintf-filter,omitempty"`

	// Relative strength of encryption algorithms accepted in negotiation with client.
	SslAlgorithm VIPSslAlgorithm `json:"ssl-algorithm,omitempty"`

	// Name of Certificate to offer in every SSL connection.
	SslCertificate string `json:"ssl-certificate,omitempty"`

	// SSL/TLS cipher suites acceptable from a client, ordered by priority.
	SslCipherSuites []VIPSslCipherSuites `json:"ssl-cipher-suites,omitempty"`

	// Enable/disable support for preventing Downgrade Attacks on client connections (RFC 7507).
	SslClientFallback VIPSslClientFallback `json:"ssl-client-fallback,omitempty"`

	// Allow/block client renegotiation by server.
	SslClientRenegotiation VIPSslClientRenegotiation `json:"ssl-client-renegotiation,omitempty"`

	// Maximum number of client to FortiGate SSL session states to keep.
	SslClientSessionStateMax int `json:"ssl-client-session-state-max,omitempty"`

	// Number of minutes to keep client to FortiGate SSL session state.
	SslClientSessionStateTimeout int `json:"ssl-client-session-state-timeout,omitempty"`

	// Control Client to FortiGate SSL session state preservation.
	SslClientSessionStateType VIPSslClientSessionStateType `json:"ssl-client-session-state-type,omitempty"`

	// Size of Diffie-Hellman prime used in DHE-RSA negotiation.
	SslDhBits VIPSslDhBits `json:"ssl-dh-bits,omitempty"`

	// Enable/disable location conversion on HTTP response header.
	SslHttpLocationConversion VIPSslHttpLocationConversion `json:"ssl-http-location-conversion,omitempty"`

	// Enable/disable HTTP host matching for location conversion.
	SslHttpMatchHost VIPSslHttpMatchHost `json:"ssl-http-match-host,omitempty"`

	// Highest SSL/TLS version acceptable from a client.
	SslMaxVersion VIPSslMaxVersion `json:"ssl-max-version,omitempty"`

	// Lowest SSL/TLS version acceptable from a client.
	SslMinVersion VIPSslMinVersion `json:"ssl-min-version,omitempty"`

	// SSL/TLS mode for encryption & decryption of traffic.
	SslMode VIPSslMode `json:"ssl-mode,omitempty"`

	// SSL Perfect Forward Secrecy.
	SslPfs VIPSslPfs `json:"ssl-pfs,omitempty"`

	// Send empty fragments to avoid attack on CBC IV (SSL 3.0 & TLS 1.0 only).
	SslSendEmptyFrags VIPSslSendEmptyFrags `json:"ssl-send-empty-frags,omitempty"`

	// Relative strength of encryption algorithms accepted in negotiation with server.
	SslServerAlgorithm VIPSslServerAlgorithm `json:"ssl-server-algorithm,omitempty"`

	// SSL/TLS cipher suites to offer to a server, ordered by priority.
	SslServerCipherSuites []VIPSslServerCipherSuites `json:"ssl-server-cipher-suites,omitempty"`

	// Highest SSL/TLS version acceptable from a server.
	SslServerMaxVersion VIPSslServerMaxVersion `json:"ssl-server-max-version,omitempty"`

	// Lowest SSL/TLS version acceptable from a server.
	SslServerMinVersion VIPSslServerMinVersion `json:"ssl-server-min-version,omitempty"`

	// Maximum number of FortiGate to Server SSL session states to keep.
	SslServerSessionStateMax int `json:"ssl-server-session-state-max,omitempty"`

	// Number of minutes to keep FortiGate to Server SSL session state.
	SslServerSessionStateTimeout int `json:"ssl-server-session-state-timeout,omitempty"`

	// Control FortiGate to server SSL session state preservation.
	SslServerSessionStateType VIPSslServerSessionStateType `json:"ssl-server-session-state-type,omitempty"`

	// VIP type: static NAT, load balance., server load balance
	Type VIPType `json:"type,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable adding HTTP header indicating SSL offload for WebLogic server.
	WeblogicServer VIPWeblogicServer `json:"weblogic-server,omitempty"`

	// Enable/disable adding HTTP header indicating SSL offload for WebSphere server.
	WebsphereServer VIPWebsphereServer `json:"websphere-server,omitempty"`
}

// Returns the value that identifies a VIP
func (x *VIP) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type VIPResults struct {
	Results []*VIP `json:"results"`
	Mkey    string `json:"mkey"`
	Result
}

// List all VIPs
func (c *WebClient) ListVIPs() (res []*VIP, err error) {
	var results VIPResults
	_, err = c.do(http.MethodGet, "firewall/vip", nil, nil, &results)
	if err != nil {
		return []*VIP{}, fmt.Errorf("error listing VIPs: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a VIP by name
func (c *WebClient) GetVIP(mkey string) (res *VIP, err error) {
	var results VIPResults
	_, err = c.do(http.MethodGet, "firewall/vip/"+mkey, nil, nil, &results)
	if err != nil {
		return &VIP{}, fmt.Errorf("error getting VIP '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new VIP
func (c *WebClient) CreateVIP(obj *VIP) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vip", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating VIP '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a VIP
func (c *WebClient) UpdateVIP(obj *VIP) error {
	_, err := c.do(http.MethodPut, "firewall/vip/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating VIP '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a VIP by name
func (c *WebClient) DeleteVIP(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vip/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting VIP '%s': %s", mkey, err.Error())
	}
	return err
}

// List all VIPs
func (c *FakeClient) ListVIPs() (res []*VIP, err error) {
	for _, r := range c.VIPs {
		res = append(res, r)
	}
	return
}

// Get a VIP by name
func (c *FakeClient) GetVIP(mkey string) (*VIP, error) {
	if res, ok := c.VIPs[mkey]; ok {
		return res, nil
	} else {
		return &VIP{}, fmt.Errorf("error getting VIP '%s': not found", mkey)
	}
}

// Create a new VIP
func (c *FakeClient) CreateVIP(obj *VIP) (id string, err error) {
	id = obj.Name
	c.VIPs[id] = obj
	return
}

// Update a VIP
func (c *FakeClient) UpdateVIP(obj *VIP) (err error) {
	c.VIPs[obj.Name] = obj
	return nil
}

// Delete a VIP by name
func (c *FakeClient) DeleteVIP(mkey string) (err error) {
	delete(c.VIPs, mkey)
	return nil
}

// Enable ARP reply.
type FirewallVip46ArpReply string

// Enable port forward.
type FirewallVip46Portforward string

// Mapped port protocol.
type FirewallVip46Protocol string

// Source IP filter (x.x.x.x/x).
type FirewallVip46SrcFilter struct {

	// Src-filter range.
	Range string `json:"range,omitempty"`
}

const (
	// Disable ARP reply.
	FirewallVip46ArpReplyDisable FirewallVip46ArpReply = "disable"

	// Enable ARP reply.
	FirewallVip46ArpReplyEnable FirewallVip46ArpReply = "enable"
)

const (
	// Disable port forward.
	FirewallVip46PortforwardDisable FirewallVip46Portforward = "disable"

	// Enable port forward.
	FirewallVip46PortforwardEnable FirewallVip46Portforward = "enable"
)

const (
	// TCP.
	FirewallVip46ProtocolTcp FirewallVip46Protocol = "tcp"

	// UDP.
	FirewallVip46ProtocolUdp FirewallVip46Protocol = "udp"
)

// Configure virtual IP for IPv4 to IPv6.
type FirewallVip46 struct {

	// Enable ARP reply.
	ArpReply FirewallVip46ArpReply `json:"arp-reply,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Start-external-IP [-end-external-IP].
	Extip string `json:"extip,omitempty"`

	// External service port.
	Extport string `json:"extport,omitempty"`

	// Custom defined id.
	Id int `json:"id,omitempty"`

	// Start-mapped-IP [-end mapped-IP].
	Mappedip string `json:"mappedip,omitempty"`

	// Mapped service port.
	Mappedport string `json:"mappedport,omitempty"`

	// VIP46 name.
	Name string `json:"name,omitempty"`

	// Enable port forward.
	Portforward FirewallVip46Portforward `json:"portforward,omitempty"`

	// Mapped port protocol.
	Protocol FirewallVip46Protocol `json:"protocol,omitempty"`

	// Source IP filter (x.x.x.x/x).
	SrcFilter []FirewallVip46SrcFilter `json:"src-filter,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVip46
func (x *FirewallVip46) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVip46Results struct {
	Results []*FirewallVip46 `json:"results"`
	Mkey    string           `json:"mkey"`
	Result
}

// List all FirewallVip46s
func (c *WebClient) ListFirewallVip46s() (res []*FirewallVip46, err error) {
	var results FirewallVip46Results
	_, err = c.do(http.MethodGet, "firewall/vip46", nil, nil, &results)
	if err != nil {
		return []*FirewallVip46{}, fmt.Errorf("error listing FirewallVip46s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVip46 by name
func (c *WebClient) GetFirewallVip46(mkey string) (res *FirewallVip46, err error) {
	var results FirewallVip46Results
	_, err = c.do(http.MethodGet, "firewall/vip46/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVip46{}, fmt.Errorf("error getting FirewallVip46 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVip46
func (c *WebClient) CreateFirewallVip46(obj *FirewallVip46) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vip46", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVip46 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVip46
func (c *WebClient) UpdateFirewallVip46(obj *FirewallVip46) error {
	_, err := c.do(http.MethodPut, "firewall/vip46/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVip46 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVip46 by name
func (c *WebClient) DeleteFirewallVip46(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vip46/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVip46 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVip46s
func (c *FakeClient) ListFirewallVip46s() (res []*FirewallVip46, err error) {
	for _, r := range c.FirewallVip46s {
		res = append(res, r)
	}
	return
}

// Get a FirewallVip46 by name
func (c *FakeClient) GetFirewallVip46(mkey string) (*FirewallVip46, error) {
	if res, ok := c.FirewallVip46s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVip46{}, fmt.Errorf("error getting FirewallVip46 '%s': not found", mkey)
	}
}

// Create a new FirewallVip46
func (c *FakeClient) CreateFirewallVip46(obj *FirewallVip46) (id string, err error) {
	id = obj.Name
	c.FirewallVip46s[id] = obj
	return
}

// Update a FirewallVip46
func (c *FakeClient) UpdateFirewallVip46(obj *FirewallVip46) (err error) {
	c.FirewallVip46s[obj.Name] = obj
	return nil
}

// Delete a FirewallVip46 by name
func (c *FakeClient) DeleteFirewallVip46(mkey string) (err error) {
	delete(c.FirewallVip46s, mkey)
	return nil
}

// Enable/disable ARP reply.
type FirewallVip6ArpReply string

// Enable/disable port forward.
type FirewallVip6Portforward string

// Mapped port protocol.
type FirewallVip6Protocol string

// Source IP6 filter (x:x:x:x:x:x:x:x/x).
type FirewallVip6SrcFilter struct {

	// Source-filter range.
	Range string `json:"range,omitempty"`
}

// VIP type: static NAT.
type FirewallVip6Type string

const (
	// Disable ARP reply.
	FirewallVip6ArpReplyDisable FirewallVip6ArpReply = "disable"

	// Enable ARP reply.
	FirewallVip6ArpReplyEnable FirewallVip6ArpReply = "enable"
)

const (
	// Disable port forward.
	FirewallVip6PortforwardDisable FirewallVip6Portforward = "disable"

	// Enable/disable port forward.
	FirewallVip6PortforwardEnable FirewallVip6Portforward = "enable"
)

const (
	// TCP.
	FirewallVip6ProtocolTcp FirewallVip6Protocol = "tcp"

	// UDP.
	FirewallVip6ProtocolUdp FirewallVip6Protocol = "udp"

	// SCTP.
	FirewallVip6ProtocolSctp FirewallVip6Protocol = "sctp"
)

const (
	// Static NAT.
	FirewallVip6TypeStaticNat FirewallVip6Type = "static-nat"
)

// Configure virtual IP for IPv6.
type FirewallVip6 struct {

	// Enable/disable ARP reply.
	ArpReply FirewallVip6ArpReply `json:"arp-reply,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Start external IP - end external IP.
	Extip string `json:"extip,omitempty"`

	// External service port.
	Extport string `json:"extport,omitempty"`

	// Custom defined ID.
	Id int `json:"id,omitempty"`

	// Start mapped IP -end mapped IP.
	Mappedip string `json:"mappedip,omitempty"`

	// Mapped service port.
	Mappedport string `json:"mappedport,omitempty"`

	// Virtual ip6 name.
	Name string `json:"name,omitempty"`

	// Enable/disable port forward.
	Portforward FirewallVip6Portforward `json:"portforward,omitempty"`

	// Mapped port protocol.
	Protocol FirewallVip6Protocol `json:"protocol,omitempty"`

	// Source IP6 filter (x:x:x:x:x:x:x:x/x).
	SrcFilter []FirewallVip6SrcFilter `json:"src-filter,omitempty"`

	// VIP type: static NAT.
	Type FirewallVip6Type `json:"type,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVip6
func (x *FirewallVip6) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVip6Results struct {
	Results []*FirewallVip6 `json:"results"`
	Mkey    string          `json:"mkey"`
	Result
}

// List all FirewallVip6s
func (c *WebClient) ListFirewallVip6s() (res []*FirewallVip6, err error) {
	var results FirewallVip6Results
	_, err = c.do(http.MethodGet, "firewall/vip6", nil, nil, &results)
	if err != nil {
		return []*FirewallVip6{}, fmt.Errorf("error listing FirewallVip6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVip6 by name
func (c *WebClient) GetFirewallVip6(mkey string) (res *FirewallVip6, err error) {
	var results FirewallVip6Results
	_, err = c.do(http.MethodGet, "firewall/vip6/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVip6{}, fmt.Errorf("error getting FirewallVip6 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVip6
func (c *WebClient) CreateFirewallVip6(obj *FirewallVip6) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vip6", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVip6 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVip6
func (c *WebClient) UpdateFirewallVip6(obj *FirewallVip6) error {
	_, err := c.do(http.MethodPut, "firewall/vip6/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVip6 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVip6 by name
func (c *WebClient) DeleteFirewallVip6(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vip6/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVip6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVip6s
func (c *FakeClient) ListFirewallVip6s() (res []*FirewallVip6, err error) {
	for _, r := range c.FirewallVip6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallVip6 by name
func (c *FakeClient) GetFirewallVip6(mkey string) (*FirewallVip6, error) {
	if res, ok := c.FirewallVip6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVip6{}, fmt.Errorf("error getting FirewallVip6 '%s': not found", mkey)
	}
}

// Create a new FirewallVip6
func (c *FakeClient) CreateFirewallVip6(obj *FirewallVip6) (id string, err error) {
	id = obj.Name
	c.FirewallVip6s[id] = obj
	return
}

// Update a FirewallVip6
func (c *FakeClient) UpdateFirewallVip6(obj *FirewallVip6) (err error) {
	c.FirewallVip6s[obj.Name] = obj
	return nil
}

// Delete a FirewallVip6 by name
func (c *FakeClient) DeleteFirewallVip6(mkey string) (err error) {
	delete(c.FirewallVip6s, mkey)
	return nil
}

// Enable ARP reply.
type FirewallVip64ArpReply string

// Enable port forward.
type FirewallVip64Portforward string

// Mapped port protocol.
type FirewallVip64Protocol string

// Source IP6 filter (x:x:x:x:x:x:x:x/x).
type FirewallVip64SrcFilter struct {

	// Src-filter range.
	Range string `json:"range,omitempty"`
}

const (
	// Disable arp reply.
	FirewallVip64ArpReplyDisable FirewallVip64ArpReply = "disable"

	// Enable arp reply.
	FirewallVip64ArpReplyEnable FirewallVip64ArpReply = "enable"
)

const (
	// Disable port forward.
	FirewallVip64PortforwardDisable FirewallVip64Portforward = "disable"

	// Enable port forward.
	FirewallVip64PortforwardEnable FirewallVip64Portforward = "enable"
)

const (
	// TCP.
	FirewallVip64ProtocolTcp FirewallVip64Protocol = "tcp"

	// UDP.
	FirewallVip64ProtocolUdp FirewallVip64Protocol = "udp"
)

// Configure virtual IP for IPv6 to IPv4.
type FirewallVip64 struct {

	// Enable ARP reply.
	ArpReply FirewallVip64ArpReply `json:"arp-reply,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Start-external-IP [-End-external-IP].
	Extip string `json:"extip,omitempty"`

	// External service port.
	Extport string `json:"extport,omitempty"`

	// Custom defined id.
	Id int `json:"id,omitempty"`

	// Start-mapped-IP [-End-mapped-IP].
	Mappedip string `json:"mappedip,omitempty"`

	// Mapped service port.
	Mappedport string `json:"mappedport,omitempty"`

	// VIP64 name.
	Name string `json:"name,omitempty"`

	// Enable port forward.
	Portforward FirewallVip64Portforward `json:"portforward,omitempty"`

	// Mapped port protocol.
	Protocol FirewallVip64Protocol `json:"protocol,omitempty"`

	// Source IP6 filter (x:x:x:x:x:x:x:x/x).
	SrcFilter []FirewallVip64SrcFilter `json:"src-filter,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVip64
func (x *FirewallVip64) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVip64Results struct {
	Results []*FirewallVip64 `json:"results"`
	Mkey    string           `json:"mkey"`
	Result
}

// List all FirewallVip64s
func (c *WebClient) ListFirewallVip64s() (res []*FirewallVip64, err error) {
	var results FirewallVip64Results
	_, err = c.do(http.MethodGet, "firewall/vip64", nil, nil, &results)
	if err != nil {
		return []*FirewallVip64{}, fmt.Errorf("error listing FirewallVip64s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVip64 by name
func (c *WebClient) GetFirewallVip64(mkey string) (res *FirewallVip64, err error) {
	var results FirewallVip64Results
	_, err = c.do(http.MethodGet, "firewall/vip64/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVip64{}, fmt.Errorf("error getting FirewallVip64 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVip64
func (c *WebClient) CreateFirewallVip64(obj *FirewallVip64) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vip64", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVip64 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVip64
func (c *WebClient) UpdateFirewallVip64(obj *FirewallVip64) error {
	_, err := c.do(http.MethodPut, "firewall/vip64/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVip64 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVip64 by name
func (c *WebClient) DeleteFirewallVip64(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vip64/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVip64 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVip64s
func (c *FakeClient) ListFirewallVip64s() (res []*FirewallVip64, err error) {
	for _, r := range c.FirewallVip64s {
		res = append(res, r)
	}
	return
}

// Get a FirewallVip64 by name
func (c *FakeClient) GetFirewallVip64(mkey string) (*FirewallVip64, error) {
	if res, ok := c.FirewallVip64s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVip64{}, fmt.Errorf("error getting FirewallVip64 '%s': not found", mkey)
	}
}

// Create a new FirewallVip64
func (c *FakeClient) CreateFirewallVip64(obj *FirewallVip64) (id string, err error) {
	id = obj.Name
	c.FirewallVip64s[id] = obj
	return
}

// Update a FirewallVip64
func (c *FakeClient) UpdateFirewallVip64(obj *FirewallVip64) (err error) {
	c.FirewallVip64s[obj.Name] = obj
	return nil
}

// Delete a FirewallVip64 by name
func (c *FakeClient) DeleteFirewallVip64(mkey string) (err error) {
	delete(c.FirewallVip64s, mkey)
	return nil
}

// VIP group member.
type FirewallVipgrpMember struct {

	// VIP name.
	Name string `json:"name,omitempty"`
}

// Configure virtual IP groups for IPv4.
type FirewallVipgrp struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// interface
	Interface string `json:"interface,omitempty"`

	// VIP group member.
	Member []FirewallVipgrpMember `json:"member,omitempty"`

	// VIP group name.
	Name string `json:"name,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVipgrp
func (x *FirewallVipgrp) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVipgrpResults struct {
	Results []*FirewallVipgrp `json:"results"`
	Mkey    string            `json:"mkey"`
	Result
}

// List all FirewallVipgrps
func (c *WebClient) ListFirewallVipgrps() (res []*FirewallVipgrp, err error) {
	var results FirewallVipgrpResults
	_, err = c.do(http.MethodGet, "firewall/vipgrp", nil, nil, &results)
	if err != nil {
		return []*FirewallVipgrp{}, fmt.Errorf("error listing FirewallVipgrps: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVipgrp by name
func (c *WebClient) GetFirewallVipgrp(mkey string) (res *FirewallVipgrp, err error) {
	var results FirewallVipgrpResults
	_, err = c.do(http.MethodGet, "firewall/vipgrp/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVipgrp{}, fmt.Errorf("error getting FirewallVipgrp '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVipgrp
func (c *WebClient) CreateFirewallVipgrp(obj *FirewallVipgrp) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vipgrp", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVipgrp '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVipgrp
func (c *WebClient) UpdateFirewallVipgrp(obj *FirewallVipgrp) error {
	_, err := c.do(http.MethodPut, "firewall/vipgrp/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVipgrp '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVipgrp by name
func (c *WebClient) DeleteFirewallVipgrp(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vipgrp/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVipgrp '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVipgrps
func (c *FakeClient) ListFirewallVipgrps() (res []*FirewallVipgrp, err error) {
	for _, r := range c.FirewallVipgrps {
		res = append(res, r)
	}
	return
}

// Get a FirewallVipgrp by name
func (c *FakeClient) GetFirewallVipgrp(mkey string) (*FirewallVipgrp, error) {
	if res, ok := c.FirewallVipgrps[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVipgrp{}, fmt.Errorf("error getting FirewallVipgrp '%s': not found", mkey)
	}
}

// Create a new FirewallVipgrp
func (c *FakeClient) CreateFirewallVipgrp(obj *FirewallVipgrp) (id string, err error) {
	id = obj.Name
	c.FirewallVipgrps[id] = obj
	return
}

// Update a FirewallVipgrp
func (c *FakeClient) UpdateFirewallVipgrp(obj *FirewallVipgrp) (err error) {
	c.FirewallVipgrps[obj.Name] = obj
	return nil
}

// Delete a FirewallVipgrp by name
func (c *FakeClient) DeleteFirewallVipgrp(mkey string) (err error) {
	delete(c.FirewallVipgrps, mkey)
	return nil
}

// VIP46 group member.
type FirewallVipgrp46Member struct {

	// VIP46 name.
	Name string `json:"name,omitempty"`
}

// Configure virtual IP groups for IPv4 to IPv6.
type FirewallVipgrp46 struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// VIP46 group member.
	Member []FirewallVipgrp46Member `json:"member,omitempty"`

	// VIP46 group name.
	Name string `json:"name,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVipgrp46
func (x *FirewallVipgrp46) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVipgrp46Results struct {
	Results []*FirewallVipgrp46 `json:"results"`
	Mkey    string              `json:"mkey"`
	Result
}

// List all FirewallVipgrp46s
func (c *WebClient) ListFirewallVipgrp46s() (res []*FirewallVipgrp46, err error) {
	var results FirewallVipgrp46Results
	_, err = c.do(http.MethodGet, "firewall/vipgrp46", nil, nil, &results)
	if err != nil {
		return []*FirewallVipgrp46{}, fmt.Errorf("error listing FirewallVipgrp46s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVipgrp46 by name
func (c *WebClient) GetFirewallVipgrp46(mkey string) (res *FirewallVipgrp46, err error) {
	var results FirewallVipgrp46Results
	_, err = c.do(http.MethodGet, "firewall/vipgrp46/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVipgrp46{}, fmt.Errorf("error getting FirewallVipgrp46 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVipgrp46
func (c *WebClient) CreateFirewallVipgrp46(obj *FirewallVipgrp46) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vipgrp46", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVipgrp46 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVipgrp46
func (c *WebClient) UpdateFirewallVipgrp46(obj *FirewallVipgrp46) error {
	_, err := c.do(http.MethodPut, "firewall/vipgrp46/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVipgrp46 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVipgrp46 by name
func (c *WebClient) DeleteFirewallVipgrp46(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vipgrp46/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVipgrp46 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVipgrp46s
func (c *FakeClient) ListFirewallVipgrp46s() (res []*FirewallVipgrp46, err error) {
	for _, r := range c.FirewallVipgrp46s {
		res = append(res, r)
	}
	return
}

// Get a FirewallVipgrp46 by name
func (c *FakeClient) GetFirewallVipgrp46(mkey string) (*FirewallVipgrp46, error) {
	if res, ok := c.FirewallVipgrp46s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVipgrp46{}, fmt.Errorf("error getting FirewallVipgrp46 '%s': not found", mkey)
	}
}

// Create a new FirewallVipgrp46
func (c *FakeClient) CreateFirewallVipgrp46(obj *FirewallVipgrp46) (id string, err error) {
	id = obj.Name
	c.FirewallVipgrp46s[id] = obj
	return
}

// Update a FirewallVipgrp46
func (c *FakeClient) UpdateFirewallVipgrp46(obj *FirewallVipgrp46) (err error) {
	c.FirewallVipgrp46s[obj.Name] = obj
	return nil
}

// Delete a FirewallVipgrp46 by name
func (c *FakeClient) DeleteFirewallVipgrp46(mkey string) (err error) {
	delete(c.FirewallVipgrp46s, mkey)
	return nil
}

// VIP group6 member.
type FirewallVipgrp6Member struct {

	// IPv6 VIP name.
	Name string `json:"name,omitempty"`
}

// Configure virtual IP groups for IPv6.
type FirewallVipgrp6 struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// VIP group6 member.
	Member []FirewallVipgrp6Member `json:"member,omitempty"`

	// IPv6 VIP group name.
	Name string `json:"name,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVipgrp6
func (x *FirewallVipgrp6) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVipgrp6Results struct {
	Results []*FirewallVipgrp6 `json:"results"`
	Mkey    string             `json:"mkey"`
	Result
}

// List all FirewallVipgrp6s
func (c *WebClient) ListFirewallVipgrp6s() (res []*FirewallVipgrp6, err error) {
	var results FirewallVipgrp6Results
	_, err = c.do(http.MethodGet, "firewall/vipgrp6", nil, nil, &results)
	if err != nil {
		return []*FirewallVipgrp6{}, fmt.Errorf("error listing FirewallVipgrp6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVipgrp6 by name
func (c *WebClient) GetFirewallVipgrp6(mkey string) (res *FirewallVipgrp6, err error) {
	var results FirewallVipgrp6Results
	_, err = c.do(http.MethodGet, "firewall/vipgrp6/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVipgrp6{}, fmt.Errorf("error getting FirewallVipgrp6 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVipgrp6
func (c *WebClient) CreateFirewallVipgrp6(obj *FirewallVipgrp6) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vipgrp6", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVipgrp6 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVipgrp6
func (c *WebClient) UpdateFirewallVipgrp6(obj *FirewallVipgrp6) error {
	_, err := c.do(http.MethodPut, "firewall/vipgrp6/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVipgrp6 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVipgrp6 by name
func (c *WebClient) DeleteFirewallVipgrp6(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vipgrp6/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVipgrp6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVipgrp6s
func (c *FakeClient) ListFirewallVipgrp6s() (res []*FirewallVipgrp6, err error) {
	for _, r := range c.FirewallVipgrp6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallVipgrp6 by name
func (c *FakeClient) GetFirewallVipgrp6(mkey string) (*FirewallVipgrp6, error) {
	if res, ok := c.FirewallVipgrp6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVipgrp6{}, fmt.Errorf("error getting FirewallVipgrp6 '%s': not found", mkey)
	}
}

// Create a new FirewallVipgrp6
func (c *FakeClient) CreateFirewallVipgrp6(obj *FirewallVipgrp6) (id string, err error) {
	id = obj.Name
	c.FirewallVipgrp6s[id] = obj
	return
}

// Update a FirewallVipgrp6
func (c *FakeClient) UpdateFirewallVipgrp6(obj *FirewallVipgrp6) (err error) {
	c.FirewallVipgrp6s[obj.Name] = obj
	return nil
}

// Delete a FirewallVipgrp6 by name
func (c *FakeClient) DeleteFirewallVipgrp6(mkey string) (err error) {
	delete(c.FirewallVipgrp6s, mkey)
	return nil
}

// VIP64 group member.
type FirewallVipgrp64Member struct {

	// VIP64 name.
	Name string `json:"name,omitempty"`
}

// Configure virtual IP groups for IPv6 to IPv4.
type FirewallVipgrp64 struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// VIP64 group member.
	Member []FirewallVipgrp64Member `json:"member,omitempty"`

	// VIP64 group name.
	Name string `json:"name,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallVipgrp64
func (x *FirewallVipgrp64) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallVipgrp64Results struct {
	Results []*FirewallVipgrp64 `json:"results"`
	Mkey    string              `json:"mkey"`
	Result
}

// List all FirewallVipgrp64s
func (c *WebClient) ListFirewallVipgrp64s() (res []*FirewallVipgrp64, err error) {
	var results FirewallVipgrp64Results
	_, err = c.do(http.MethodGet, "firewall/vipgrp64", nil, nil, &results)
	if err != nil {
		return []*FirewallVipgrp64{}, fmt.Errorf("error listing FirewallVipgrp64s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallVipgrp64 by name
func (c *WebClient) GetFirewallVipgrp64(mkey string) (res *FirewallVipgrp64, err error) {
	var results FirewallVipgrp64Results
	_, err = c.do(http.MethodGet, "firewall/vipgrp64/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallVipgrp64{}, fmt.Errorf("error getting FirewallVipgrp64 '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallVipgrp64
func (c *WebClient) CreateFirewallVipgrp64(obj *FirewallVipgrp64) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/vipgrp64", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallVipgrp64 '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallVipgrp64
func (c *WebClient) UpdateFirewallVipgrp64(obj *FirewallVipgrp64) error {
	_, err := c.do(http.MethodPut, "firewall/vipgrp64/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallVipgrp64 '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallVipgrp64 by name
func (c *WebClient) DeleteFirewallVipgrp64(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/vipgrp64/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallVipgrp64 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallVipgrp64s
func (c *FakeClient) ListFirewallVipgrp64s() (res []*FirewallVipgrp64, err error) {
	for _, r := range c.FirewallVipgrp64s {
		res = append(res, r)
	}
	return
}

// Get a FirewallVipgrp64 by name
func (c *FakeClient) GetFirewallVipgrp64(mkey string) (*FirewallVipgrp64, error) {
	if res, ok := c.FirewallVipgrp64s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallVipgrp64{}, fmt.Errorf("error getting FirewallVipgrp64 '%s': not found", mkey)
	}
}

// Create a new FirewallVipgrp64
func (c *FakeClient) CreateFirewallVipgrp64(obj *FirewallVipgrp64) (id string, err error) {
	id = obj.Name
	c.FirewallVipgrp64s[id] = obj
	return
}

// Update a FirewallVipgrp64
func (c *FakeClient) UpdateFirewallVipgrp64(obj *FirewallVipgrp64) (err error) {
	c.FirewallVipgrp64s[obj.Name] = obj
	return nil
}

// Delete a FirewallVipgrp64 by name
func (c *FakeClient) DeleteFirewallVipgrp64(mkey string) (err error) {
	delete(c.FirewallVipgrp64s, mkey)
	return nil
}

// Enable/disable logging for antivirus oversize file blocking.
type FirewallProfileProtocolOptionsOversizeLog string

// Enable/disable inspection of RPC over HTTP.
type FirewallProfileProtocolOptionsRpcOverHttp string

// Enable/disable logging of HTTP/HTTPS switching protocols.
type FirewallProfileProtocolOptionsSwitchingProtocolsLog string

const (
	// Disable logging for antivirus oversize file blocking.
	FirewallProfileProtocolOptionsOversizeLogDisable FirewallProfileProtocolOptionsOversizeLog = "disable"

	// Enable logging for antivirus oversize file blocking.
	FirewallProfileProtocolOptionsOversizeLogEnable FirewallProfileProtocolOptionsOversizeLog = "enable"
)

const (
	// Enable inspection of RPC over HTTP.
	FirewallProfileProtocolOptionsRpcOverHttpEnable FirewallProfileProtocolOptionsRpcOverHttp = "enable"

	// Disable inspection of RPC over HTTP.
	FirewallProfileProtocolOptionsRpcOverHttpDisable FirewallProfileProtocolOptionsRpcOverHttp = "disable"
)

const (
	// Disable logging of HTTP/HTTPS switching protocols.
	FirewallProfileProtocolOptionsSwitchingProtocolsLogDisable FirewallProfileProtocolOptionsSwitchingProtocolsLog = "disable"

	// Enable logging of HTTP/HTTPS switching protocols.
	FirewallProfileProtocolOptionsSwitchingProtocolsLogEnable FirewallProfileProtocolOptionsSwitchingProtocolsLog = "enable"
)

// Configure protocol options.
type FirewallProfileProtocolOptions struct {

	// Comment.
	Comment string `json:"comment,omitempty"`

	// DNS.
	Dns string `json:"dns,omitempty"`

	// FTP.
	Ftp string `json:"ftp,omitempty"`

	// HTTP.
	Http string `json:"http,omitempty"`

	// IMAP.
	Imap string `json:"imap,omitempty"`

	// Mail signature.
	MailSignature string `json:"mail-signature,omitempty"`

	// MAPI
	Mapi string `json:"mapi,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// NNTP.
	Nntp string `json:"nntp,omitempty"`

	// Enable/disable logging for antivirus oversize file blocking.
	OversizeLog FirewallProfileProtocolOptionsOversizeLog `json:"oversize-log,omitempty"`

	// POP3.
	Pop3 string `json:"pop3,omitempty"`

	// Replacement message group.
	ReplacemsgGroup string `json:"replacemsg-group,omitempty"`

	// Enable/disable inspection of RPC over HTTP.
	RpcOverHttp FirewallProfileProtocolOptionsRpcOverHttp `json:"rpc-over-http,omitempty"`

	// SMTP.
	Smtp string `json:"smtp,omitempty"`

	// Enable/disable logging of HTTP/HTTPS switching protocols.
	SwitchingProtocolsLog FirewallProfileProtocolOptionsSwitchingProtocolsLog `json:"switching-protocols-log,omitempty"`
}

// Returns the value that identifies a FirewallProfileProtocolOptions
func (x *FirewallProfileProtocolOptions) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallProfileProtocolOptionsResults struct {
	Results []*FirewallProfileProtocolOptions `json:"results"`
	Mkey    string                            `json:"mkey"`
	Result
}

// List all FirewallProfileProtocolOptionss
func (c *WebClient) ListFirewallProfileProtocolOptionss() (res []*FirewallProfileProtocolOptions, err error) {
	var results FirewallProfileProtocolOptionsResults
	_, err = c.do(http.MethodGet, "firewall/profile-protocol-options", nil, nil, &results)
	if err != nil {
		return []*FirewallProfileProtocolOptions{}, fmt.Errorf("error listing FirewallProfileProtocolOptionss: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallProfileProtocolOptions by name
func (c *WebClient) GetFirewallProfileProtocolOptions(mkey string) (res *FirewallProfileProtocolOptions, err error) {
	var results FirewallProfileProtocolOptionsResults
	_, err = c.do(http.MethodGet, "firewall/profile-protocol-options/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallProfileProtocolOptions{}, fmt.Errorf("error getting FirewallProfileProtocolOptions '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallProfileProtocolOptions
func (c *WebClient) CreateFirewallProfileProtocolOptions(obj *FirewallProfileProtocolOptions) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/profile-protocol-options", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallProfileProtocolOptions '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallProfileProtocolOptions
func (c *WebClient) UpdateFirewallProfileProtocolOptions(obj *FirewallProfileProtocolOptions) error {
	_, err := c.do(http.MethodPut, "firewall/profile-protocol-options/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallProfileProtocolOptions '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallProfileProtocolOptions by name
func (c *WebClient) DeleteFirewallProfileProtocolOptions(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/profile-protocol-options/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallProfileProtocolOptions '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallProfileProtocolOptionss
func (c *FakeClient) ListFirewallProfileProtocolOptionss() (res []*FirewallProfileProtocolOptions, err error) {
	for _, r := range c.FirewallProfileProtocolOptionss {
		res = append(res, r)
	}
	return
}

// Get a FirewallProfileProtocolOptions by name
func (c *FakeClient) GetFirewallProfileProtocolOptions(mkey string) (*FirewallProfileProtocolOptions, error) {
	if res, ok := c.FirewallProfileProtocolOptionss[mkey]; ok {
		return res, nil
	} else {
		return &FirewallProfileProtocolOptions{}, fmt.Errorf("error getting FirewallProfileProtocolOptions '%s': not found", mkey)
	}
}

// Create a new FirewallProfileProtocolOptions
func (c *FakeClient) CreateFirewallProfileProtocolOptions(obj *FirewallProfileProtocolOptions) (id string, err error) {
	id = obj.Name
	c.FirewallProfileProtocolOptionss[id] = obj
	return
}

// Update a FirewallProfileProtocolOptions
func (c *FakeClient) UpdateFirewallProfileProtocolOptions(obj *FirewallProfileProtocolOptions) (err error) {
	c.FirewallProfileProtocolOptionss[obj.Name] = obj
	return nil
}

// Delete a FirewallProfileProtocolOptions by name
func (c *FakeClient) DeleteFirewallProfileProtocolOptions(mkey string) (err error) {
	delete(c.FirewallProfileProtocolOptionss, mkey)
	return nil
}

// Enable/disable inspection of MAPI over HTTPS.
type FirewallSslSshProfileMapiOverHttps string

// Enable/disable inspection of RPC over HTTPS.
type FirewallSslSshProfileRpcOverHttps string

// Re-sign or replace the server's certificate.
type FirewallSslSshProfileServerCertMode string

// Servers to exempt from SSL inspection.
type FirewallSslSshProfileSslExempt struct {

	// Exempt servers by firewall address.
	Address string `json:"address,omitempty"`

	// Exempt servers by firewall address (IPv6).
	Address6 string `json:"address6,omitempty"`

	// Exempt servers by FortiGuard category ID.
	FortiguardCategory int `json:"fortiguard-category,omitempty"`

	// ID number.
	Id int `json:"id,omitempty"`

	// SSL exemption type.
	Type string `json:"type,omitempty"`
}

// Enable/disable SSL server certificate validation logging.
type FirewallSslSshProfileSslInvalidServerCertLog string

// SSL servers.
type FirewallSslSshProfileSslServer struct {

	// FTPS client certificate request action.
	FtpsClientCertRequest string `json:"ftps-client-cert-request,omitempty"`

	// HTTPS client certificate request action.
	HttpsClientCertRequest string `json:"https-client-cert-request,omitempty"`

	// SSL server ID.
	Id int `json:"id,omitempty"`

	// IMAPS client certificate request action.
	ImapsClientCertRequest string `json:"imaps-client-cert-request,omitempty"`

	// SSL server IP.
	Ip string `json:"ip,omitempty"`

	// POP3S client certificate request action.
	Pop3sClientCertRequest string `json:"pop3s-client-cert-request,omitempty"`

	// SMTPS client certificate request action.
	SmtpsClientCertRequest string `json:"smtps-client-cert-request,omitempty"`

	// Other SSL protocol client certificate request action.
	SslOtherClientCertRequest string `json:"ssl-other-client-cert-request,omitempty"`
}

// Enable/disable to use SSL server table for SSL offloading.
type FirewallSslSshProfileUseSslServer string

// Enable/disable exempt servers by FortiGuard whitelist.
type FirewallSslSshProfileWhitelist string

const (
	// Enable inspection of MAPI over HTTPS.
	FirewallSslSshProfileMapiOverHttpsEnable FirewallSslSshProfileMapiOverHttps = "enable"

	// Disable inspection of MAPI over HTTPS.
	FirewallSslSshProfileMapiOverHttpsDisable FirewallSslSshProfileMapiOverHttps = "disable"
)

const (
	// Enable inspection of RPC over HTTPS.
	FirewallSslSshProfileRpcOverHttpsEnable FirewallSslSshProfileRpcOverHttps = "enable"

	// Disable inspection of RPC over HTTPS.
	FirewallSslSshProfileRpcOverHttpsDisable FirewallSslSshProfileRpcOverHttps = "disable"
)

const (
	// Multiple clients connecting to multiple servers.
	FirewallSslSshProfileServerCertModeReSign FirewallSslSshProfileServerCertMode = "re-sign"

	// Protect an SSL server.
	FirewallSslSshProfileServerCertModeReplace FirewallSslSshProfileServerCertMode = "replace"
)

const (
	// Disable SSL server certificate validation logging.
	FirewallSslSshProfileSslInvalidServerCertLogDisable FirewallSslSshProfileSslInvalidServerCertLog = "disable"

	// Enable SSL server certificate validation logging.
	FirewallSslSshProfileSslInvalidServerCertLogEnable FirewallSslSshProfileSslInvalidServerCertLog = "enable"
)

const (
	// Don't use SSL server configuration.
	FirewallSslSshProfileUseSslServerDisable FirewallSslSshProfileUseSslServer = "disable"

	// Use SSL server configuration.
	FirewallSslSshProfileUseSslServerEnable FirewallSslSshProfileUseSslServer = "enable"
)

const (
	// Enable setting.
	FirewallSslSshProfileWhitelistEnable FirewallSslSshProfileWhitelist = "enable"

	// Disable setting.
	FirewallSslSshProfileWhitelistDisable FirewallSslSshProfileWhitelist = "disable"
)

// Configure SSL/SSH protocol options.
type FirewallSslSshProfile struct {

	// CA certificate used by SSL Inspection.
	Caname string `json:"caname,omitempty"`

	// Certificate containing the key to use when re-signing server certificates for SSL inspection.
	Certname string `json:"certname,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// ftps
	Ftps string `json:"ftps,omitempty"`

	// https
	Https string `json:"https,omitempty"`

	// imaps
	Imaps string `json:"imaps,omitempty"`

	// Enable/disable inspection of MAPI over HTTPS.
	MapiOverHttps FirewallSslSshProfileMapiOverHttps `json:"mapi-over-https,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// pop3s
	Pop3s string `json:"pop3s,omitempty"`

	// Enable/disable inspection of RPC over HTTPS.
	RpcOverHttps FirewallSslSshProfileRpcOverHttps `json:"rpc-over-https,omitempty"`

	// Certificate used by SSL Inspection to replace server certificate.
	ServerCert string `json:"server-cert,omitempty"`

	// Re-sign or replace the server's certificate.
	ServerCertMode FirewallSslSshProfileServerCertMode `json:"server-cert-mode,omitempty"`

	// smtps
	Smtps string `json:"smtps,omitempty"`

	// ssh
	Ssh string `json:"ssh,omitempty"`

	// ssl
	Ssl string `json:"ssl,omitempty"`

	// Servers to exempt from SSL inspection.
	SslExempt []FirewallSslSshProfileSslExempt `json:"ssl-exempt,omitempty"`

	// Enable/disable SSL server certificate validation logging.
	SslInvalidServerCertLog FirewallSslSshProfileSslInvalidServerCertLog `json:"ssl-invalid-server-cert-log,omitempty"`

	// SSL servers.
	SslServer []FirewallSslSshProfileSslServer `json:"ssl-server,omitempty"`

	// Untrusted CA certificate used by SSL Inspection.
	UntrustedCaname string `json:"untrusted-caname,omitempty"`

	// Enable/disable to use SSL server table for SSL offloading.
	UseSslServer FirewallSslSshProfileUseSslServer `json:"use-ssl-server,omitempty"`

	// Enable/disable exempt servers by FortiGuard whitelist.
	Whitelist FirewallSslSshProfileWhitelist `json:"whitelist,omitempty"`
}

// Returns the value that identifies a FirewallSslSshProfile
func (x *FirewallSslSshProfile) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallSslSshProfileResults struct {
	Results []*FirewallSslSshProfile `json:"results"`
	Mkey    string                   `json:"mkey"`
	Result
}

// List all FirewallSslSshProfiles
func (c *WebClient) ListFirewallSslSshProfiles() (res []*FirewallSslSshProfile, err error) {
	var results FirewallSslSshProfileResults
	_, err = c.do(http.MethodGet, "firewall/ssl-ssh-profile", nil, nil, &results)
	if err != nil {
		return []*FirewallSslSshProfile{}, fmt.Errorf("error listing FirewallSslSshProfiles: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallSslSshProfile by name
func (c *WebClient) GetFirewallSslSshProfile(mkey string) (res *FirewallSslSshProfile, err error) {
	var results FirewallSslSshProfileResults
	_, err = c.do(http.MethodGet, "firewall/ssl-ssh-profile/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallSslSshProfile{}, fmt.Errorf("error getting FirewallSslSshProfile '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallSslSshProfile
func (c *WebClient) CreateFirewallSslSshProfile(obj *FirewallSslSshProfile) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/ssl-ssh-profile", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallSslSshProfile '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallSslSshProfile
func (c *WebClient) UpdateFirewallSslSshProfile(obj *FirewallSslSshProfile) error {
	_, err := c.do(http.MethodPut, "firewall/ssl-ssh-profile/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallSslSshProfile '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallSslSshProfile by name
func (c *WebClient) DeleteFirewallSslSshProfile(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/ssl-ssh-profile/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallSslSshProfile '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallSslSshProfiles
func (c *FakeClient) ListFirewallSslSshProfiles() (res []*FirewallSslSshProfile, err error) {
	for _, r := range c.FirewallSslSshProfiles {
		res = append(res, r)
	}
	return
}

// Get a FirewallSslSshProfile by name
func (c *FakeClient) GetFirewallSslSshProfile(mkey string) (*FirewallSslSshProfile, error) {
	if res, ok := c.FirewallSslSshProfiles[mkey]; ok {
		return res, nil
	} else {
		return &FirewallSslSshProfile{}, fmt.Errorf("error getting FirewallSslSshProfile '%s': not found", mkey)
	}
}

// Create a new FirewallSslSshProfile
func (c *FakeClient) CreateFirewallSslSshProfile(obj *FirewallSslSshProfile) (id string, err error) {
	id = obj.Name
	c.FirewallSslSshProfiles[id] = obj
	return
}

// Update a FirewallSslSshProfile
func (c *FakeClient) UpdateFirewallSslSshProfile(obj *FirewallSslSshProfile) (err error) {
	c.FirewallSslSshProfiles[obj.Name] = obj
	return nil
}

// Delete a FirewallSslSshProfile by name
func (c *FakeClient) DeleteFirewallSslSshProfile(mkey string) (err error) {
	delete(c.FirewallSslSshProfiles, mkey)
	return nil
}

// Configure profile groups.
type FirewallProfileGroup struct {

	// Application list.
	ApplicationList string `json:"application-list,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// CASI profile.
	CasiProfile string `json:"casi-profile,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// DNS filter profile.
	DnsfilterProfile string `json:"dnsfilter-profile,omitempty"`

	// ICAP profile.
	IcapProfile string `json:"icap-profile,omitempty"`

	// IPS sensor.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Profile group name.
	Name string `json:"name,omitempty"`

	// Profile protocol options.
	ProfileProtocolOptions string `json:"profile-protocol-options,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// SSL SSH Profile.
	SslSshProfile string `json:"ssl-ssh-profile,omitempty"`

	// VoIP profile.
	VoipProfile string `json:"voip-profile,omitempty"`

	// Web application firewall profile.
	WafProfile string `json:"waf-profile,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`
}

// Returns the value that identifies a FirewallProfileGroup
func (x *FirewallProfileGroup) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallProfileGroupResults struct {
	Results []*FirewallProfileGroup `json:"results"`
	Mkey    string                  `json:"mkey"`
	Result
}

// List all FirewallProfileGroups
func (c *WebClient) ListFirewallProfileGroups() (res []*FirewallProfileGroup, err error) {
	var results FirewallProfileGroupResults
	_, err = c.do(http.MethodGet, "firewall/profile-group", nil, nil, &results)
	if err != nil {
		return []*FirewallProfileGroup{}, fmt.Errorf("error listing FirewallProfileGroups: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallProfileGroup by name
func (c *WebClient) GetFirewallProfileGroup(mkey string) (res *FirewallProfileGroup, err error) {
	var results FirewallProfileGroupResults
	_, err = c.do(http.MethodGet, "firewall/profile-group/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallProfileGroup{}, fmt.Errorf("error getting FirewallProfileGroup '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallProfileGroup
func (c *WebClient) CreateFirewallProfileGroup(obj *FirewallProfileGroup) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/profile-group", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallProfileGroup '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallProfileGroup
func (c *WebClient) UpdateFirewallProfileGroup(obj *FirewallProfileGroup) error {
	_, err := c.do(http.MethodPut, "firewall/profile-group/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallProfileGroup '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallProfileGroup by name
func (c *WebClient) DeleteFirewallProfileGroup(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/profile-group/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallProfileGroup '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallProfileGroups
func (c *FakeClient) ListFirewallProfileGroups() (res []*FirewallProfileGroup, err error) {
	for _, r := range c.FirewallProfileGroups {
		res = append(res, r)
	}
	return
}

// Get a FirewallProfileGroup by name
func (c *FakeClient) GetFirewallProfileGroup(mkey string) (*FirewallProfileGroup, error) {
	if res, ok := c.FirewallProfileGroups[mkey]; ok {
		return res, nil
	} else {
		return &FirewallProfileGroup{}, fmt.Errorf("error getting FirewallProfileGroup '%s': not found", mkey)
	}
}

// Create a new FirewallProfileGroup
func (c *FakeClient) CreateFirewallProfileGroup(obj *FirewallProfileGroup) (id string, err error) {
	id = obj.Name
	c.FirewallProfileGroups[id] = obj
	return
}

// Update a FirewallProfileGroup
func (c *FakeClient) UpdateFirewallProfileGroup(obj *FirewallProfileGroup) (err error) {
	c.FirewallProfileGroups[obj.Name] = obj
	return nil
}

// Delete a FirewallProfileGroup by name
func (c *FakeClient) DeleteFirewallProfileGroup(mkey string) (err error) {
	delete(c.FirewallProfileGroups, mkey)
	return nil
}

// Enable/disable add X-Forwarded-Proto header to forwarded requests.
type FirewallSslServerAddHeaderXForwardedProto string

// Relative strength of encryption algorithms accepted in negotiation.
type FirewallSslServerSslAlgorithm string

// Allow/block client renegotiation by server.
type FirewallSslServerSslClientRenegotiation string

// Size of Diffie-Hellman prime used in DHE-RSA negotiation.
type FirewallSslServerSslDhBits string

// Highest SSL/TLS version to negotiate.
type FirewallSslServerSslMaxVersion string

// Lowest SSL/TLS version to negotiate.
type FirewallSslServerSslMinVersion string

// SSL/TLS mode for encryption & decryption of traffic.
type FirewallSslServerSslMode string

// Enable/disable send empty fragments to avoid attack on CBC IV.
type FirewallSslServerSslSendEmptyFrags string

// Enable/disable rewrite URL.
type FirewallSslServerUrlRewrite string

const (
	// Add X-Forwarded-Proto header.
	FirewallSslServerAddHeaderXForwardedProtoEnable FirewallSslServerAddHeaderXForwardedProto = "enable"

	// Do not add X-Forwarded-Proto header.
	FirewallSslServerAddHeaderXForwardedProtoDisable FirewallSslServerAddHeaderXForwardedProto = "disable"
)

const (
	// AES|ChaCha
	FirewallSslServerSslAlgorithmHigh FirewallSslServerSslAlgorithm = "high"

	// AES|ChaCha|3DES|RC4
	FirewallSslServerSslAlgorithmMedium FirewallSslServerSslAlgorithm = "medium"

	// AES|ChaCha|3DES|RC4|DES
	FirewallSslServerSslAlgorithmLow FirewallSslServerSslAlgorithm = "low"
)

const (
	// Allow a SSL client to renegotiate.
	FirewallSslServerSslClientRenegotiationAllow FirewallSslServerSslClientRenegotiation = "allow"

	// Abort any SSL connection that attempts to renegotiate.
	FirewallSslServerSslClientRenegotiationDeny FirewallSslServerSslClientRenegotiation = "deny"

	// Reject any SSL connection that does not offer a RFC 5746 Secure Renegotiation Indication.
	FirewallSslServerSslClientRenegotiationSecure FirewallSslServerSslClientRenegotiation = "secure"
)

const (
	// 768-bit Diffie-Hellman prime.
	FirewallSslServerSslDhBits768 FirewallSslServerSslDhBits = "768"

	// 1024-bit Diffie-Hellman prime.
	FirewallSslServerSslDhBits1024 FirewallSslServerSslDhBits = "1024"

	// 1536-bit Diffie-Hellman prime.
	FirewallSslServerSslDhBits1536 FirewallSslServerSslDhBits = "1536"

	// 2048-bit Diffie-Hellman prime.
	FirewallSslServerSslDhBits2048 FirewallSslServerSslDhBits = "2048"
)

const (
	// SSL 3.0.
	FirewallSslServerSslMaxVersionSslX30 FirewallSslServerSslMaxVersion = "ssl-3.0"

	// TLS 1.0.
	FirewallSslServerSslMaxVersionTls10 FirewallSslServerSslMaxVersion = "tls-1.0"

	// TLS 1.1.
	FirewallSslServerSslMaxVersionTls11 FirewallSslServerSslMaxVersion = "tls-1.1"

	// TLS 1.2.
	FirewallSslServerSslMaxVersionTls12 FirewallSslServerSslMaxVersion = "tls-1.2"
)

const (
	// SSL 3.0.
	FirewallSslServerSslMinVersionSslX30 FirewallSslServerSslMinVersion = "ssl-3.0"

	// TLS 1.0.
	FirewallSslServerSslMinVersionTls10 FirewallSslServerSslMinVersion = "tls-1.0"

	// TLS 1.1.
	FirewallSslServerSslMinVersionTls11 FirewallSslServerSslMinVersion = "tls-1.1"

	// TLS 1.2.
	FirewallSslServerSslMinVersionTls12 FirewallSslServerSslMinVersion = "tls-1.2"
)

const (
	// Client to FortiGate SSL.
	FirewallSslServerSslModeHalf FirewallSslServerSslMode = "half"

	// Client to FortiGate and FortiGate to Server SSL.
	FirewallSslServerSslModeFull FirewallSslServerSslMode = "full"
)

const (
	// Send empty fragments.
	FirewallSslServerSslSendEmptyFragsEnable FirewallSslServerSslSendEmptyFrags = "enable"

	// Do not send empty fragments.
	FirewallSslServerSslSendEmptyFragsDisable FirewallSslServerSslSendEmptyFrags = "disable"
)

const (
	// Enable setting.
	FirewallSslServerUrlRewriteEnable FirewallSslServerUrlRewrite = "enable"

	// Disable setting.
	FirewallSslServerUrlRewriteDisable FirewallSslServerUrlRewrite = "disable"
)

// Configure SSL servers.
type FirewallSslServer struct {

	// Enable/disable add X-Forwarded-Proto header to forwarded requests.
	AddHeaderXForwardedProto FirewallSslServerAddHeaderXForwardedProto `json:"add-header-x-forwarded-proto,omitempty"`

	// Server IP address.
	Ip string `json:"ip,omitempty"`

	// Mapped server service port.
	MappedPort int `json:"mapped-port,omitempty"`

	// Server name.
	Name string `json:"name,omitempty"`

	// Server service port.
	Port int `json:"port,omitempty"`

	// Relative strength of encryption algorithms accepted in negotiation.
	SslAlgorithm FirewallSslServerSslAlgorithm `json:"ssl-algorithm,omitempty"`

	// Name of certificate for SSL connections to this server.
	SslCert string `json:"ssl-cert,omitempty"`

	// Allow/block client renegotiation by server.
	SslClientRenegotiation FirewallSslServerSslClientRenegotiation `json:"ssl-client-renegotiation,omitempty"`

	// Size of Diffie-Hellman prime used in DHE-RSA negotiation.
	SslDhBits FirewallSslServerSslDhBits `json:"ssl-dh-bits,omitempty"`

	// Highest SSL/TLS version to negotiate.
	SslMaxVersion FirewallSslServerSslMaxVersion `json:"ssl-max-version,omitempty"`

	// Lowest SSL/TLS version to negotiate.
	SslMinVersion FirewallSslServerSslMinVersion `json:"ssl-min-version,omitempty"`

	// SSL/TLS mode for encryption & decryption of traffic.
	SslMode FirewallSslServerSslMode `json:"ssl-mode,omitempty"`

	// Enable/disable send empty fragments to avoid attack on CBC IV.
	SslSendEmptyFrags FirewallSslServerSslSendEmptyFrags `json:"ssl-send-empty-frags,omitempty"`

	// Enable/disable rewrite URL.
	UrlRewrite FirewallSslServerUrlRewrite `json:"url-rewrite,omitempty"`
}

// Returns the value that identifies a FirewallSslServer
func (x *FirewallSslServer) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallSslServerResults struct {
	Results []*FirewallSslServer `json:"results"`
	Mkey    string               `json:"mkey"`
	Result
}

// List all FirewallSslServers
func (c *WebClient) ListFirewallSslServers() (res []*FirewallSslServer, err error) {
	var results FirewallSslServerResults
	_, err = c.do(http.MethodGet, "firewall/ssl-server", nil, nil, &results)
	if err != nil {
		return []*FirewallSslServer{}, fmt.Errorf("error listing FirewallSslServers: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallSslServer by name
func (c *WebClient) GetFirewallSslServer(mkey string) (res *FirewallSslServer, err error) {
	var results FirewallSslServerResults
	_, err = c.do(http.MethodGet, "firewall/ssl-server/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallSslServer{}, fmt.Errorf("error getting FirewallSslServer '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallSslServer
func (c *WebClient) CreateFirewallSslServer(obj *FirewallSslServer) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/ssl-server", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallSslServer '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallSslServer
func (c *WebClient) UpdateFirewallSslServer(obj *FirewallSslServer) error {
	_, err := c.do(http.MethodPut, "firewall/ssl-server/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallSslServer '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallSslServer by name
func (c *WebClient) DeleteFirewallSslServer(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/ssl-server/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallSslServer '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallSslServers
func (c *FakeClient) ListFirewallSslServers() (res []*FirewallSslServer, err error) {
	for _, r := range c.FirewallSslServers {
		res = append(res, r)
	}
	return
}

// Get a FirewallSslServer by name
func (c *FakeClient) GetFirewallSslServer(mkey string) (*FirewallSslServer, error) {
	if res, ok := c.FirewallSslServers[mkey]; ok {
		return res, nil
	} else {
		return &FirewallSslServer{}, fmt.Errorf("error getting FirewallSslServer '%s': not found", mkey)
	}
}

// Create a new FirewallSslServer
func (c *FakeClient) CreateFirewallSslServer(obj *FirewallSslServer) (id string, err error) {
	id = obj.Name
	c.FirewallSslServers[id] = obj
	return
}

// Update a FirewallSslServer
func (c *FakeClient) UpdateFirewallSslServer(obj *FirewallSslServer) (err error) {
	c.FirewallSslServers[obj.Name] = obj
	return nil
}

// Delete a FirewallSslServer by name
func (c *FakeClient) DeleteFirewallSslServer(mkey string) (err error) {
	delete(c.FirewallSslServers, mkey)
	return nil
}

// Rule.
type FirewallIdentityBasedRouteRule struct {

	// Output interface.
	Device string `json:"device,omitempty"`

	// Gateway address.
	Gateway string `json:"gateway,omitempty"`

	// Group name.
	Groups string `json:"groups,omitempty"`

	// Rule ID.
	Id int `json:"id,omitempty"`
}

// Configure identity based routing.
type FirewallIdentityBasedRoute struct {

	// Description/comments.
	Comments string `json:"comments,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// Rule.
	Rule []FirewallIdentityBasedRouteRule `json:"rule,omitempty"`
}

// Returns the value that identifies a FirewallIdentityBasedRoute
func (x *FirewallIdentityBasedRoute) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallIdentityBasedRouteResults struct {
	Results []*FirewallIdentityBasedRoute `json:"results"`
	Mkey    string                        `json:"mkey"`
	Result
}

// List all FirewallIdentityBasedRoutes
func (c *WebClient) ListFirewallIdentityBasedRoutes() (res []*FirewallIdentityBasedRoute, err error) {
	var results FirewallIdentityBasedRouteResults
	_, err = c.do(http.MethodGet, "firewall/identity-based-route", nil, nil, &results)
	if err != nil {
		return []*FirewallIdentityBasedRoute{}, fmt.Errorf("error listing FirewallIdentityBasedRoutes: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallIdentityBasedRoute by name
func (c *WebClient) GetFirewallIdentityBasedRoute(mkey string) (res *FirewallIdentityBasedRoute, err error) {
	var results FirewallIdentityBasedRouteResults
	_, err = c.do(http.MethodGet, "firewall/identity-based-route/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallIdentityBasedRoute{}, fmt.Errorf("error getting FirewallIdentityBasedRoute '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallIdentityBasedRoute
func (c *WebClient) CreateFirewallIdentityBasedRoute(obj *FirewallIdentityBasedRoute) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/identity-based-route", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallIdentityBasedRoute '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallIdentityBasedRoute
func (c *WebClient) UpdateFirewallIdentityBasedRoute(obj *FirewallIdentityBasedRoute) error {
	_, err := c.do(http.MethodPut, "firewall/identity-based-route/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallIdentityBasedRoute '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallIdentityBasedRoute by name
func (c *WebClient) DeleteFirewallIdentityBasedRoute(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/identity-based-route/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallIdentityBasedRoute '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallIdentityBasedRoutes
func (c *FakeClient) ListFirewallIdentityBasedRoutes() (res []*FirewallIdentityBasedRoute, err error) {
	for _, r := range c.FirewallIdentityBasedRoutes {
		res = append(res, r)
	}
	return
}

// Get a FirewallIdentityBasedRoute by name
func (c *FakeClient) GetFirewallIdentityBasedRoute(mkey string) (*FirewallIdentityBasedRoute, error) {
	if res, ok := c.FirewallIdentityBasedRoutes[mkey]; ok {
		return res, nil
	} else {
		return &FirewallIdentityBasedRoute{}, fmt.Errorf("error getting FirewallIdentityBasedRoute '%s': not found", mkey)
	}
}

// Create a new FirewallIdentityBasedRoute
func (c *FakeClient) CreateFirewallIdentityBasedRoute(obj *FirewallIdentityBasedRoute) (id string, err error) {
	id = obj.Name
	c.FirewallIdentityBasedRoutes[id] = obj
	return
}

// Update a FirewallIdentityBasedRoute
func (c *FakeClient) UpdateFirewallIdentityBasedRoute(obj *FirewallIdentityBasedRoute) (err error) {
	c.FirewallIdentityBasedRoutes[obj.Name] = obj
	return nil
}

// Delete a FirewallIdentityBasedRoute by name
func (c *FakeClient) DeleteFirewallIdentityBasedRoute(mkey string) (err error) {
	delete(c.FirewallIdentityBasedRoutes, mkey)
	return nil
}

// Policy action.
type FirewallPolicyAction string

// Enable/disable authentication-based routing.
type FirewallPolicyAuthPath string

// Enable/disable policy traffic ASIC offloading.
type FirewallPolicyAutoAsicOffload string

// Enable/disable block notification.
type FirewallPolicyBlockNotification string

// Enable/disable exemption of captive portal.
type FirewallPolicyCaptivePortalExempt string

// Custom log fields.
type FirewallPolicyCustomLogFields struct {

	// Custom log field.
	FieldId string `json:"field-id,omitempty"`
}

// Enable/disable TCP NPU session delay in order to guarantee packet order of 3-way handshake.
type FirewallPolicyDelayTcpNpuSessoin string

// Devices or device groups.
type FirewallPolicyDevices struct {

	// Device or group name.
	Name string `json:"name,omitempty"`
}

// Enable/disable forward (original) traffic DiffServ.
type FirewallPolicyDiffservForward string

// Enable/disable reverse (reply) traffic DiffServ.
type FirewallPolicyDiffservReverse string

// Enable/disable user authentication disclaimer.
type FirewallPolicyDisclaimer string

// Enable/disable DSRI.
type FirewallPolicyDsri string

// Destination address name.
type FirewallPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated destination address match.
type FirewallPolicyDstaddrNegate string

// Destination interface name.
type FirewallPolicyDstintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Packet session management.
type FirewallPolicyFirewallSessionDirty string

// Enable/disable policy fixed port.
type FirewallPolicyFixedport string

// Enable/disable Fortinet Single Sign-On.
type FirewallPolicyFsso string

// User authentication groups.
type FirewallPolicyGroups struct {

	// Group name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy inbound.
type FirewallPolicyInbound string

// Enable/disable policy IP pool.
type FirewallPolicyIppool string

// Enable/disable learning mode for policy.
type FirewallPolicyLearningMode string

// Enable/disable policy log traffic.
type FirewallPolicyLogtraffic string

// Enable/disable policy log traffic start.
type FirewallPolicyLogtrafficStart string

// Enable/disable match DNATed packet.
type FirewallPolicyMatchVip string

// Enable/disable policy NAT.
type FirewallPolicyNat string

// Enable/disable policy NAT inbound.
type FirewallPolicyNatinbound string

// Enable/disable policy NAT outbound.
type FirewallPolicyNatoutbound string

// Enable/disable NTLM authentication.
type FirewallPolicyNtlm string

// User agent strings for NTLM enabled browsers.
type FirewallPolicyNtlmEnabledBrowsers struct {

	// User agent string.
	UserAgentString string `json:"user-agent-string,omitempty"`
}

// Enable/disable guest user for NTLM authentication.
type FirewallPolicyNtlmGuest string

// Enable/disable policy outbound.
type FirewallPolicyOutbound string

// Enable/disable permit any host in.
type FirewallPolicyPermitAnyHost string

// Enable/disable permit stun host in.
type FirewallPolicyPermitStunHost string

// Policy IP pool names.
type FirewallPolicyPoolname struct {

	// IP pool name.
	Name string `json:"name,omitempty"`
}

// profile type
type FirewallPolicyProfileType string

// Enable/disable RADIUS Single Sign-On.
type FirewallPolicyRsso string

// RTP NAT address name.
type FirewallPolicyRtpAddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable use of this policy for RTP NAT.
type FirewallPolicyRtpNat string

// Enable/disable scanning of connections to Botnet servers.
type FirewallPolicyScanBotnetConnections string

// Enable/disable schedule timeout.
type FirewallPolicyScheduleTimeout string

// Enable/disable deny-packet sending.
type FirewallPolicySendDenyPacket string

// Service name.
type FirewallPolicyService struct {

	// Service name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated service match.
type FirewallPolicyServiceNegate string

// Source address name.
type FirewallPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated source address match.
type FirewallPolicySrcaddrNegate string

// Source interface name.
type FirewallPolicySrcintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Enable/disable SSL mirror.
type FirewallPolicySslMirror string

// Mirror interface name.
type FirewallPolicySslMirrorIntf struct {

	// Mirror Interface name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallPolicyStatus string

// Applied object tags.
type FirewallPolicyTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable sending of RST packet upon TCP session expiration.
type FirewallPolicyTimeoutSendRst string

// User name.
type FirewallPolicyUsers struct {

	// User name.
	Name string `json:"name,omitempty"`
}

// Enable AV/web/IPS protection profile.
type FirewallPolicyUtmStatus string

// Enable/disable Web Cache Coordination Protocol (WCCP).
type FirewallPolicyWccp string

// Enable/disable WiFi Single Sign-On.
type FirewallPolicyWsso string

const (
	// Action accept.
	FirewallPolicyActionAccept FirewallPolicyAction = "accept"

	// Action deny.
	FirewallPolicyActionDeny FirewallPolicyAction = "deny"

	// Action IPsec encryption.
	FirewallPolicyActionIpsec FirewallPolicyAction = "ipsec"

	// Action SSL-VPN.
	FirewallPolicyActionSslVpn FirewallPolicyAction = "ssl-vpn"
)

const (
	// Enable authentication-based routing.
	FirewallPolicyAuthPathEnable FirewallPolicyAuthPath = "enable"

	// Disable authentication-based routing.
	FirewallPolicyAuthPathDisable FirewallPolicyAuthPath = "disable"
)

const (
	// Enable auto ASIC offloading.
	FirewallPolicyAutoAsicOffloadEnable FirewallPolicyAutoAsicOffload = "enable"

	// Disable ASIC offloading.
	FirewallPolicyAutoAsicOffloadDisable FirewallPolicyAutoAsicOffload = "disable"
)

const (
	// Enable setting.
	FirewallPolicyBlockNotificationEnable FirewallPolicyBlockNotification = "enable"

	// Disable setting.
	FirewallPolicyBlockNotificationDisable FirewallPolicyBlockNotification = "disable"
)

const (
	// Enable exemption of captive portal.
	FirewallPolicyCaptivePortalExemptEnable FirewallPolicyCaptivePortalExempt = "enable"

	// Disable exemption of captive portal.
	FirewallPolicyCaptivePortalExemptDisable FirewallPolicyCaptivePortalExempt = "disable"
)

const (
	// Enable TCP NPU session delay in order to guarantee packet order of 3-way handshake.
	FirewallPolicyDelayTcpNpuSessoinEnable FirewallPolicyDelayTcpNpuSessoin = "enable"

	// Disable TCP NPU session delay in order to guarantee packet order of 3-way handshake.
	FirewallPolicyDelayTcpNpuSessoinDisable FirewallPolicyDelayTcpNpuSessoin = "disable"
)

const (
	// Enable setting.
	FirewallPolicyDiffservForwardEnable FirewallPolicyDiffservForward = "enable"

	// Disable setting.
	FirewallPolicyDiffservForwardDisable FirewallPolicyDiffservForward = "disable"
)

const (
	// Enable setting.
	FirewallPolicyDiffservReverseEnable FirewallPolicyDiffservReverse = "enable"

	// Disable setting.
	FirewallPolicyDiffservReverseDisable FirewallPolicyDiffservReverse = "disable"
)

const (
	// Enable user authentication disclaimer.
	FirewallPolicyDisclaimerEnable FirewallPolicyDisclaimer = "enable"

	// Disable user authentication disclaimer.
	FirewallPolicyDisclaimerDisable FirewallPolicyDisclaimer = "disable"
)

const (
	// Enable DSRI.
	FirewallPolicyDsriEnable FirewallPolicyDsri = "enable"

	// Disable DSRI.
	FirewallPolicyDsriDisable FirewallPolicyDsri = "disable"
)

const (
	// Enable destination address negate.
	FirewallPolicyDstaddrNegateEnable FirewallPolicyDstaddrNegate = "enable"

	// Disable destination address negate.
	FirewallPolicyDstaddrNegateDisable FirewallPolicyDstaddrNegate = "disable"
)

const (
	// Flush all sessions and evaluate them anew.
	FirewallPolicyFirewallSessionDirtyCheckAll FirewallPolicyFirewallSessionDirty = "check-all"

	// Keep existing sessions and check new connections only.
	FirewallPolicyFirewallSessionDirtyCheckNew FirewallPolicyFirewallSessionDirty = "check-new"
)

const (
	// Enable setting.
	FirewallPolicyFixedportEnable FirewallPolicyFixedport = "enable"

	// Disable setting.
	FirewallPolicyFixedportDisable FirewallPolicyFixedport = "disable"
)

const (
	// Enable setting.
	FirewallPolicyFssoEnable FirewallPolicyFsso = "enable"

	// Disable setting.
	FirewallPolicyFssoDisable FirewallPolicyFsso = "disable"
)

const (
	// Enable setting.
	FirewallPolicyInboundEnable FirewallPolicyInbound = "enable"

	// Disable setting.
	FirewallPolicyInboundDisable FirewallPolicyInbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicyIppoolEnable FirewallPolicyIppool = "enable"

	// Disable setting.
	FirewallPolicyIppoolDisable FirewallPolicyIppool = "disable"
)

const (
	// Enable learning mode in firewall policy.
	FirewallPolicyLearningModeEnable FirewallPolicyLearningMode = "enable"

	// Disable learning mode in firewall policy.
	FirewallPolicyLearningModeDisable FirewallPolicyLearningMode = "disable"
)

const (
	// Log all sessions.
	FirewallPolicyLogtrafficAll FirewallPolicyLogtraffic = "all"

	// UTM event and matched application traffic log.
	FirewallPolicyLogtrafficUtm FirewallPolicyLogtraffic = "utm"

	// Disable traffic and application log.
	FirewallPolicyLogtrafficDisable FirewallPolicyLogtraffic = "disable"
)

const (
	// Enable setting.
	FirewallPolicyLogtrafficStartEnable FirewallPolicyLogtrafficStart = "enable"

	// Disable setting.
	FirewallPolicyLogtrafficStartDisable FirewallPolicyLogtrafficStart = "disable"
)

const (
	// Match DNATed packet.
	FirewallPolicyMatchVipEnable FirewallPolicyMatchVip = "enable"

	// Do not match DNATed packet.
	FirewallPolicyMatchVipDisable FirewallPolicyMatchVip = "disable"
)

const (
	// Enable setting.
	FirewallPolicyNatEnable FirewallPolicyNat = "enable"

	// Disable setting.
	FirewallPolicyNatDisable FirewallPolicyNat = "disable"
)

const (
	// Enable setting.
	FirewallPolicyNatinboundEnable FirewallPolicyNatinbound = "enable"

	// Disable setting.
	FirewallPolicyNatinboundDisable FirewallPolicyNatinbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicyNatoutboundEnable FirewallPolicyNatoutbound = "enable"

	// Disable setting.
	FirewallPolicyNatoutboundDisable FirewallPolicyNatoutbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicyNtlmEnable FirewallPolicyNtlm = "enable"

	// Disable setting.
	FirewallPolicyNtlmDisable FirewallPolicyNtlm = "disable"
)

const (
	// Enable setting.
	FirewallPolicyNtlmGuestEnable FirewallPolicyNtlmGuest = "enable"

	// Disable setting.
	FirewallPolicyNtlmGuestDisable FirewallPolicyNtlmGuest = "disable"
)

const (
	// Enable setting.
	FirewallPolicyOutboundEnable FirewallPolicyOutbound = "enable"

	// Disable setting.
	FirewallPolicyOutboundDisable FirewallPolicyOutbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicyPermitAnyHostEnable FirewallPolicyPermitAnyHost = "enable"

	// Disable setting.
	FirewallPolicyPermitAnyHostDisable FirewallPolicyPermitAnyHost = "disable"
)

const (
	// Enable setting.
	FirewallPolicyPermitStunHostEnable FirewallPolicyPermitStunHost = "enable"

	// Disable setting.
	FirewallPolicyPermitStunHostDisable FirewallPolicyPermitStunHost = "disable"
)

const (
	// use single profiles
	FirewallPolicyProfileTypeSingle FirewallPolicyProfileType = "single"

	// use profile groups
	FirewallPolicyProfileTypeGroup FirewallPolicyProfileType = "group"
)

const (
	// Enable setting.
	FirewallPolicyRssoEnable FirewallPolicyRsso = "enable"

	// Disable setting.
	FirewallPolicyRssoDisable FirewallPolicyRsso = "disable"
)

const (
	// Disable setting.
	FirewallPolicyRtpNatDisable FirewallPolicyRtpNat = "disable"

	// Enable setting.
	FirewallPolicyRtpNatEnable FirewallPolicyRtpNat = "enable"
)

const (
	// Do not scan connections to botnet servers.
	FirewallPolicyScanBotnetConnectionsDisable FirewallPolicyScanBotnetConnections = "disable"

	// Block connections to botnet servers.
	FirewallPolicyScanBotnetConnectionsBlock FirewallPolicyScanBotnetConnections = "block"

	// Log connections to botnet servers.
	FirewallPolicyScanBotnetConnectionsMonitor FirewallPolicyScanBotnetConnections = "monitor"
)

const (
	// Enable schedule timeout.
	FirewallPolicyScheduleTimeoutEnable FirewallPolicyScheduleTimeout = "enable"

	// Disable schedule timeout.
	FirewallPolicyScheduleTimeoutDisable FirewallPolicyScheduleTimeout = "disable"
)

const (
	// Disable deny-packet sending.
	FirewallPolicySendDenyPacketDisable FirewallPolicySendDenyPacket = "disable"

	// Enable deny-packet sending.
	FirewallPolicySendDenyPacketEnable FirewallPolicySendDenyPacket = "enable"
)

const (
	// Enable negated service match.
	FirewallPolicyServiceNegateEnable FirewallPolicyServiceNegate = "enable"

	// Disable negated service match.
	FirewallPolicyServiceNegateDisable FirewallPolicyServiceNegate = "disable"
)

const (
	// Enable source address negate.
	FirewallPolicySrcaddrNegateEnable FirewallPolicySrcaddrNegate = "enable"

	// Disable source address negate.
	FirewallPolicySrcaddrNegateDisable FirewallPolicySrcaddrNegate = "disable"
)

const (
	// Enable SSL mirror.
	FirewallPolicySslMirrorEnable FirewallPolicySslMirror = "enable"

	// Disable SSL mirror.
	FirewallPolicySslMirrorDisable FirewallPolicySslMirror = "disable"
)

const (
	// Enable setting.
	FirewallPolicyStatusEnable FirewallPolicyStatus = "enable"

	// Disable setting.
	FirewallPolicyStatusDisable FirewallPolicyStatus = "disable"
)

const (
	// Enable sending of RST packet upon TCP session expiration.
	FirewallPolicyTimeoutSendRstEnable FirewallPolicyTimeoutSendRst = "enable"

	// Disable sending of RST packet upon TCP session expiration.
	FirewallPolicyTimeoutSendRstDisable FirewallPolicyTimeoutSendRst = "disable"
)

const (
	// Enable setting.
	FirewallPolicyUtmStatusEnable FirewallPolicyUtmStatus = "enable"

	// Disable setting.
	FirewallPolicyUtmStatusDisable FirewallPolicyUtmStatus = "disable"
)

const (
	// Enable WCCP setting.
	FirewallPolicyWccpEnable FirewallPolicyWccp = "enable"

	// Disable WCCP setting.
	FirewallPolicyWccpDisable FirewallPolicyWccp = "disable"
)

const (
	// Enable setting.
	FirewallPolicyWssoEnable FirewallPolicyWsso = "enable"

	// Disable setting.
	FirewallPolicyWssoDisable FirewallPolicyWsso = "disable"
)

// Configure IPv4 policies.
type FirewallPolicy struct {

	// Policy action.
	Action FirewallPolicyAction `json:"action,omitempty"`

	// Application list.
	ApplicationList string `json:"application-list,omitempty"`

	// HTTPS server certificate for policy authentication.
	AuthCert string `json:"auth-cert,omitempty"`

	// Enable/disable authentication-based routing.
	AuthPath FirewallPolicyAuthPath `json:"auth-path,omitempty"`

	// HTTP-to-HTTPS redirect address for firewall authentication.
	AuthRedirectAddr string `json:"auth-redirect-addr,omitempty"`

	// Enable/disable policy traffic ASIC offloading.
	AutoAsicOffload FirewallPolicyAutoAsicOffload `json:"auto-asic-offload,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// Enable/disable block notification.
	BlockNotification FirewallPolicyBlockNotification `json:"block-notification,omitempty"`

	// Enable/disable exemption of captive portal.
	CaptivePortalExempt FirewallPolicyCaptivePortalExempt `json:"captive-portal-exempt,omitempty"`

	// CASI profile.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Custom log fields.
	CustomLogFields []FirewallPolicyCustomLogFields `json:"custom-log-fields,omitempty"`

	// Enable/disable TCP NPU session delay in order to guarantee packet order of 3-way handshake.
	DelayTcpNpuSessoin FirewallPolicyDelayTcpNpuSessoin `json:"delay-tcp-npu-sessoin,omitempty"`

	// Devices or device groups.
	Devices []FirewallPolicyDevices `json:"devices,omitempty"`

	// Enable/disable forward (original) traffic DiffServ.
	DiffservForward FirewallPolicyDiffservForward `json:"diffserv-forward,omitempty"`

	// Enable/disable reverse (reply) traffic DiffServ.
	DiffservReverse FirewallPolicyDiffservReverse `json:"diffserv-reverse,omitempty"`

	// Forward (original) traffic DiffServ code point value.
	DiffservcodeForward string `json:"diffservcode-forward,omitempty"`

	// Reverse (reply) traffic DiffServ code point value.
	DiffservcodeRev string `json:"diffservcode-rev,omitempty"`

	// Enable/disable user authentication disclaimer.
	Disclaimer FirewallPolicyDisclaimer `json:"disclaimer,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// DNS filter profile.
	DnsfilterProfile string `json:"dnsfilter-profile,omitempty"`

	// Enable/disable DSRI.
	Dsri FirewallPolicyDsri `json:"dsri,omitempty"`

	// Destination address name.
	Dstaddr []FirewallPolicyDstaddr `json:"dstaddr,omitempty"`

	// Enable/disable negated destination address match.
	DstaddrNegate FirewallPolicyDstaddrNegate `json:"dstaddr-negate,omitempty"`

	// Destination interface name.
	Dstintf []FirewallPolicyDstintf `json:"dstintf,omitempty"`

	// Packet session management.
	FirewallSessionDirty FirewallPolicyFirewallSessionDirty `json:"firewall-session-dirty,omitempty"`

	// Enable/disable policy fixed port.
	Fixedport FirewallPolicyFixedport `json:"fixedport,omitempty"`

	// Enable/disable Fortinet Single Sign-On.
	Fsso FirewallPolicyFsso `json:"fsso,omitempty"`

	// Specify FSSO agent for NTLM authentication.
	FssoAgentForNtlm string `json:"fsso-agent-for-ntlm,omitempty"`

	// Label for global view.
	GlobalLabel string `json:"global-label,omitempty"`

	// User authentication groups.
	Groups []FirewallPolicyGroups `json:"groups,omitempty"`

	// ICAP profile.
	IcapProfile string `json:"icap-profile,omitempty"`

	// Name of identity-based routing rule.
	IdentityBasedRoute string `json:"identity-based-route,omitempty"`

	// Enable/disable policy inbound.
	Inbound FirewallPolicyInbound `json:"inbound,omitempty"`

	// Enable/disable policy IP pool.
	Ippool FirewallPolicyIppool `json:"ippool,omitempty"`

	// IPS sensor.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Label for section view.
	Label string `json:"label,omitempty"`

	// Enable/disable learning mode for policy.
	LearningMode FirewallPolicyLearningMode `json:"learning-mode,omitempty"`

	// Enable/disable policy log traffic.
	Logtraffic FirewallPolicyLogtraffic `json:"logtraffic,omitempty"`

	// Enable/disable policy log traffic start.
	LogtrafficStart FirewallPolicyLogtrafficStart `json:"logtraffic-start,omitempty"`

	// Enable/disable match DNATed packet.
	MatchVip FirewallPolicyMatchVip `json:"match-vip,omitempty"`

	// Policy name.
	Name string `json:"name,omitempty"`

	// Enable/disable policy NAT.
	Nat FirewallPolicyNat `json:"nat,omitempty"`

	// Enable/disable policy NAT inbound.
	Natinbound FirewallPolicyNatinbound `json:"natinbound,omitempty"`

	// NAT address.
	Natip string `json:"natip,omitempty"`

	// Enable/disable policy NAT outbound.
	Natoutbound FirewallPolicyNatoutbound `json:"natoutbound,omitempty"`

	// Enable/disable NTLM authentication.
	Ntlm FirewallPolicyNtlm `json:"ntlm,omitempty"`

	// User agent strings for NTLM enabled browsers.
	NtlmEnabledBrowsers []FirewallPolicyNtlmEnabledBrowsers `json:"ntlm-enabled-browsers,omitempty"`

	// Enable/disable guest user for NTLM authentication.
	NtlmGuest FirewallPolicyNtlmGuest `json:"ntlm-guest,omitempty"`

	// Enable/disable policy outbound.
	Outbound FirewallPolicyOutbound `json:"outbound,omitempty"`

	// Per-IP shaper.
	PerIpShaper string `json:"per-ip-shaper,omitempty"`

	// Enable/disable permit any host in.
	PermitAnyHost FirewallPolicyPermitAnyHost `json:"permit-any-host,omitempty"`

	// Enable/disable permit stun host in.
	PermitStunHost FirewallPolicyPermitStunHost `json:"permit-stun-host,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Policy IP pool names.
	Poolname []FirewallPolicyPoolname `json:"poolname,omitempty"`

	// profile group
	ProfileGroup string `json:"profile-group,omitempty"`

	// Profile protocol options.
	ProfileProtocolOptions string `json:"profile-protocol-options,omitempty"`

	// profile type
	ProfileType FirewallPolicyProfileType `json:"profile-type,omitempty"`

	// URL redirection after disclaimer/authentication.
	RedirectUrl string `json:"redirect-url,omitempty"`

	// Specify authentication replacement message override group.
	ReplacemsgOverrideGroup string `json:"replacemsg-override-group,omitempty"`

	// Enable/disable RADIUS Single Sign-On.
	Rsso FirewallPolicyRsso `json:"rsso,omitempty"`

	// RTP NAT address name.
	RtpAddr []FirewallPolicyRtpAddr `json:"rtp-addr,omitempty"`

	// Enable/disable use of this policy for RTP NAT.
	RtpNat FirewallPolicyRtpNat `json:"rtp-nat,omitempty"`

	// Enable/disable scanning of connections to Botnet servers.
	ScanBotnetConnections FirewallPolicyScanBotnetConnections `json:"scan-botnet-connections,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Enable/disable schedule timeout.
	ScheduleTimeout FirewallPolicyScheduleTimeout `json:"schedule-timeout,omitempty"`

	// Enable/disable deny-packet sending.
	SendDenyPacket FirewallPolicySendDenyPacket `json:"send-deny-packet,omitempty"`

	// Service name.
	Service []FirewallPolicyService `json:"service,omitempty"`

	// Enable/disable negated service match.
	ServiceNegate FirewallPolicyServiceNegate `json:"service-negate,omitempty"`

	// Session TTL.
	SessionTtl int `json:"session-ttl,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Source address name.
	Srcaddr []FirewallPolicySrcaddr `json:"srcaddr,omitempty"`

	// Enable/disable negated source address match.
	SrcaddrNegate FirewallPolicySrcaddrNegate `json:"srcaddr-negate,omitempty"`

	// Source interface name.
	Srcintf []FirewallPolicySrcintf `json:"srcintf,omitempty"`

	// Enable/disable SSL mirror.
	SslMirror FirewallPolicySslMirror `json:"ssl-mirror,omitempty"`

	// Mirror interface name.
	SslMirrorIntf []FirewallPolicySslMirrorIntf `json:"ssl-mirror-intf,omitempty"`

	// SSL SSH Profile.
	SslSshProfile string `json:"ssl-ssh-profile,omitempty"`

	// Enable/disable policy status.
	Status FirewallPolicyStatus `json:"status,omitempty"`

	// Applied object tags.
	Tags []FirewallPolicyTags `json:"tags,omitempty"`

	// TCP MSS value of receiver.
	TcpMssReceiver int `json:"tcp-mss-receiver,omitempty"`

	// TCP MSS value of sender.
	TcpMssSender int `json:"tcp-mss-sender,omitempty"`

	// Enable/disable sending of RST packet upon TCP session expiration.
	TimeoutSendRst FirewallPolicyTimeoutSendRst `json:"timeout-send-rst,omitempty"`

	// Traffic shaper.
	TrafficShaper string `json:"traffic-shaper,omitempty"`

	// Traffic shaper.
	TrafficShaperReverse string `json:"traffic-shaper-reverse,omitempty"`

	// User name.
	Users []FirewallPolicyUsers `json:"users,omitempty"`

	// Enable AV/web/IPS protection profile.
	UtmStatus FirewallPolicyUtmStatus `json:"utm-status,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// VLAN forward direction user priority.
	VlanCosFwd int `json:"vlan-cos-fwd,omitempty"`

	// VLAN reverse direction user priority.
	VlanCosRev int `json:"vlan-cos-rev,omitempty"`

	// VoIP profile.
	VoipProfile string `json:"voip-profile,omitempty"`

	// Policy VPN tunnel.
	Vpntunnel string `json:"vpntunnel,omitempty"`

	// Web application firewall profile.
	WafProfile string `json:"waf-profile,omitempty"`

	// Enable/disable Web Cache Coordination Protocol (WCCP).
	Wccp FirewallPolicyWccp `json:"wccp,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`

	// Enable/disable WiFi Single Sign-On.
	Wsso FirewallPolicyWsso `json:"wsso,omitempty"`
}

// Returns the value that identifies a FirewallPolicy
func (x *FirewallPolicy) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallPolicyResults struct {
	Results []*FirewallPolicy `json:"results"`
	Mkey    int               `json:"mkey"`
	Result
}

// List all FirewallPolicys
func (c *WebClient) ListFirewallPolicys() (res []*FirewallPolicy, err error) {
	var results FirewallPolicyResults
	_, err = c.do(http.MethodGet, "firewall/policy", nil, nil, &results)
	if err != nil {
		return []*FirewallPolicy{}, fmt.Errorf("error listing FirewallPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallPolicy by name
func (c *WebClient) GetFirewallPolicy(mkey int) (res *FirewallPolicy, err error) {
	var results FirewallPolicyResults
	_, err = c.do(http.MethodGet, "firewall/policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallPolicy
func (c *WebClient) CreateFirewallPolicy(obj *FirewallPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallPolicy
func (c *WebClient) UpdateFirewallPolicy(obj *FirewallPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/policy/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallPolicy by name
func (c *WebClient) DeleteFirewallPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallPolicys
func (c *FakeClient) ListFirewallPolicys() (res []*FirewallPolicy, err error) {
	for _, r := range c.FirewallPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallPolicy by name
func (c *FakeClient) GetFirewallPolicy(mkey int) (*FirewallPolicy, error) {
	if res, ok := c.FirewallPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallPolicy{}, fmt.Errorf("error getting FirewallPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallPolicy
func (c *FakeClient) CreateFirewallPolicy(obj *FirewallPolicy) (id int, err error) {
	id = c.FirewallPolicyCounter
	c.FirewallPolicyCounter++
	c.FirewallPolicys[id] = obj
	return
}

// Update a FirewallPolicy
func (c *FakeClient) UpdateFirewallPolicy(obj *FirewallPolicy) (err error) {
	c.FirewallPolicys[obj.Policyid] = obj
	return nil
}

// Delete a FirewallPolicy by name
func (c *FakeClient) DeleteFirewallPolicy(mkey int) (err error) {
	delete(c.FirewallPolicys, mkey)
	return nil
}

// Application category ID list.
type FirewallShapingPolicyAppCategory struct {

	// Category IDs.
	Id int `json:"id,omitempty"`
}

// Application ID list.
type FirewallShapingPolicyApplication struct {

	// Application IDs.
	Id int `json:"id,omitempty"`
}

// Destination address.
type FirewallShapingPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// IPv6 destination address.
type FirewallShapingPolicyDstaddr6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Destination interface list.
type FirewallShapingPolicyDstintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// User authentication groups.
type FirewallShapingPolicyGroups struct {

	// Group name.
	Name string `json:"name,omitempty"`
}

// IP version.
type FirewallShapingPolicyIpVersion string

// Service name.
type FirewallShapingPolicyService struct {

	// Service name.
	Name string `json:"name,omitempty"`
}

// Source address.
type FirewallShapingPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// IPv6 source address.
type FirewallShapingPolicySrcaddr6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable traffic shaping policy.
type FirewallShapingPolicyStatus string

// URL category ID list.
type FirewallShapingPolicyUrlCategory struct {

	// URL category ID.
	Id int `json:"id,omitempty"`
}

// User name.
type FirewallShapingPolicyUsers struct {

	// User name.
	Name string `json:"name,omitempty"`
}

const (
	// Use IPv4 addressing for Configuration Method.
	FirewallShapingPolicyIpVersion4 FirewallShapingPolicyIpVersion = "4"

	// Use IPv6 addressing for Configuration Method.
	FirewallShapingPolicyIpVersion6 FirewallShapingPolicyIpVersion = "6"
)

const (
	// Enable traffic shaping policy.
	FirewallShapingPolicyStatusEnable FirewallShapingPolicyStatus = "enable"

	// Disable traffic shaping policy.
	FirewallShapingPolicyStatusDisable FirewallShapingPolicyStatus = "disable"
)

// Configure shaping policies.
type FirewallShapingPolicy struct {

	// Application category ID list.
	AppCategory []FirewallShapingPolicyAppCategory `json:"app-category,omitempty"`

	// Application ID list.
	Application []FirewallShapingPolicyApplication `json:"application,omitempty"`

	// Destination address.
	Dstaddr []FirewallShapingPolicyDstaddr `json:"dstaddr,omitempty"`

	// IPv6 destination address.
	Dstaddr6 []FirewallShapingPolicyDstaddr6 `json:"dstaddr6,omitempty"`

	// Destination interface list.
	Dstintf []FirewallShapingPolicyDstintf `json:"dstintf,omitempty"`

	// User authentication groups.
	Groups []FirewallShapingPolicyGroups `json:"groups,omitempty"`

	// Shaping policy ID.
	Id int `json:"id,omitempty"`

	// IP version.
	IpVersion FirewallShapingPolicyIpVersion `json:"ip-version,omitempty"`

	// Per IP shaper.
	PerIpShaper string `json:"per-ip-shaper,omitempty"`

	// Service name.
	Service []FirewallShapingPolicyService `json:"service,omitempty"`

	// Source address.
	Srcaddr []FirewallShapingPolicySrcaddr `json:"srcaddr,omitempty"`

	// IPv6 source address.
	Srcaddr6 []FirewallShapingPolicySrcaddr6 `json:"srcaddr6,omitempty"`

	// Enable/disable traffic shaping policy.
	Status FirewallShapingPolicyStatus `json:"status,omitempty"`

	// Forward traffic shaper.
	TrafficShaper string `json:"traffic-shaper,omitempty"`

	// Reverse traffic shaper.
	TrafficShaperReverse string `json:"traffic-shaper-reverse,omitempty"`

	// URL category ID list.
	UrlCategory []FirewallShapingPolicyUrlCategory `json:"url-category,omitempty"`

	// User name.
	Users []FirewallShapingPolicyUsers `json:"users,omitempty"`
}

// Returns the value that identifies a FirewallShapingPolicy
func (x *FirewallShapingPolicy) MKey() int {
	return x.Id
}

// The results of a Get or List operation
type FirewallShapingPolicyResults struct {
	Results []*FirewallShapingPolicy `json:"results"`
	Mkey    int                      `json:"mkey"`
	Result
}

// List all FirewallShapingPolicys
func (c *WebClient) ListFirewallShapingPolicys() (res []*FirewallShapingPolicy, err error) {
	var results FirewallShapingPolicyResults
	_, err = c.do(http.MethodGet, "firewall/shaping-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallShapingPolicy{}, fmt.Errorf("error listing FirewallShapingPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallShapingPolicy by name
func (c *WebClient) GetFirewallShapingPolicy(mkey int) (res *FirewallShapingPolicy, err error) {
	var results FirewallShapingPolicyResults
	_, err = c.do(http.MethodGet, "firewall/shaping-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallShapingPolicy{}, fmt.Errorf("error getting FirewallShapingPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallShapingPolicy
func (c *WebClient) CreateFirewallShapingPolicy(obj *FirewallShapingPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/shaping-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallShapingPolicy '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return
}

// Update a FirewallShapingPolicy
func (c *WebClient) UpdateFirewallShapingPolicy(obj *FirewallShapingPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/shaping-policy/"+strconv.Itoa(obj.Id), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallShapingPolicy '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return err
}

// Delete a FirewallShapingPolicy by name
func (c *WebClient) DeleteFirewallShapingPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/shaping-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallShapingPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallShapingPolicys
func (c *FakeClient) ListFirewallShapingPolicys() (res []*FirewallShapingPolicy, err error) {
	for _, r := range c.FirewallShapingPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallShapingPolicy by name
func (c *FakeClient) GetFirewallShapingPolicy(mkey int) (*FirewallShapingPolicy, error) {
	if res, ok := c.FirewallShapingPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallShapingPolicy{}, fmt.Errorf("error getting FirewallShapingPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallShapingPolicy
func (c *FakeClient) CreateFirewallShapingPolicy(obj *FirewallShapingPolicy) (id int, err error) {
	id = c.FirewallShapingPolicyCounter
	c.FirewallShapingPolicyCounter++
	c.FirewallShapingPolicys[id] = obj
	return
}

// Update a FirewallShapingPolicy
func (c *FakeClient) UpdateFirewallShapingPolicy(obj *FirewallShapingPolicy) (err error) {
	c.FirewallShapingPolicys[obj.Id] = obj
	return nil
}

// Delete a FirewallShapingPolicy by name
func (c *FakeClient) DeleteFirewallShapingPolicy(mkey int) (err error) {
	delete(c.FirewallShapingPolicys, mkey)
	return nil
}

// Local-In policy action.
type FirewallLocalInPolicyAction string

// Destination address name.
type FirewallLocalInPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable dedication of HA management interface only for local-in policy.
type FirewallLocalInPolicyHaMgmtIntfOnly string

// Service name.
type FirewallLocalInPolicyService struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallLocalInPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallLocalInPolicyStatus string

const (
	// Action accept.
	FirewallLocalInPolicyActionAccept FirewallLocalInPolicyAction = "accept"

	// Action deny.
	FirewallLocalInPolicyActionDeny FirewallLocalInPolicyAction = "deny"
)

const (
	// Enable dedication of HA management interface only for local-in policy.
	FirewallLocalInPolicyHaMgmtIntfOnlyEnable FirewallLocalInPolicyHaMgmtIntfOnly = "enable"

	// Disable dedication of HA management interface only for local-in policy.
	FirewallLocalInPolicyHaMgmtIntfOnlyDisable FirewallLocalInPolicyHaMgmtIntfOnly = "disable"
)

const (
	// Enable policy status.
	FirewallLocalInPolicyStatusEnable FirewallLocalInPolicyStatus = "enable"

	// Disable policy status.
	FirewallLocalInPolicyStatusDisable FirewallLocalInPolicyStatus = "disable"
)

// Configure user defined IPv4 local-in policies.
type FirewallLocalInPolicy struct {

	// Local-In policy action.
	Action FirewallLocalInPolicyAction `json:"action,omitempty"`

	// Destination address name.
	Dstaddr []FirewallLocalInPolicyDstaddr `json:"dstaddr,omitempty"`

	// Enable/disable dedication of HA management interface only for local-in policy.
	HaMgmtIntfOnly FirewallLocalInPolicyHaMgmtIntfOnly `json:"ha-mgmt-intf-only,omitempty"`

	// Source interface name.
	Intf string `json:"intf,omitempty"`

	// User defined local in policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Service name.
	Service []FirewallLocalInPolicyService `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallLocalInPolicySrcaddr `json:"srcaddr,omitempty"`

	// Enable/disable policy status.
	Status FirewallLocalInPolicyStatus `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallLocalInPolicy
func (x *FirewallLocalInPolicy) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallLocalInPolicyResults struct {
	Results []*FirewallLocalInPolicy `json:"results"`
	Mkey    int                      `json:"mkey"`
	Result
}

// List all FirewallLocalInPolicys
func (c *WebClient) ListFirewallLocalInPolicys() (res []*FirewallLocalInPolicy, err error) {
	var results FirewallLocalInPolicyResults
	_, err = c.do(http.MethodGet, "firewall/local-in-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallLocalInPolicy{}, fmt.Errorf("error listing FirewallLocalInPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallLocalInPolicy by name
func (c *WebClient) GetFirewallLocalInPolicy(mkey int) (res *FirewallLocalInPolicy, err error) {
	var results FirewallLocalInPolicyResults
	_, err = c.do(http.MethodGet, "firewall/local-in-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallLocalInPolicy{}, fmt.Errorf("error getting FirewallLocalInPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallLocalInPolicy
func (c *WebClient) CreateFirewallLocalInPolicy(obj *FirewallLocalInPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/local-in-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallLocalInPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallLocalInPolicy
func (c *WebClient) UpdateFirewallLocalInPolicy(obj *FirewallLocalInPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/local-in-policy/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallLocalInPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallLocalInPolicy by name
func (c *WebClient) DeleteFirewallLocalInPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/local-in-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallLocalInPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallLocalInPolicys
func (c *FakeClient) ListFirewallLocalInPolicys() (res []*FirewallLocalInPolicy, err error) {
	for _, r := range c.FirewallLocalInPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallLocalInPolicy by name
func (c *FakeClient) GetFirewallLocalInPolicy(mkey int) (*FirewallLocalInPolicy, error) {
	if res, ok := c.FirewallLocalInPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallLocalInPolicy{}, fmt.Errorf("error getting FirewallLocalInPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallLocalInPolicy
func (c *FakeClient) CreateFirewallLocalInPolicy(obj *FirewallLocalInPolicy) (id int, err error) {
	id = c.FirewallLocalInPolicyCounter
	c.FirewallLocalInPolicyCounter++
	c.FirewallLocalInPolicys[id] = obj
	return
}

// Update a FirewallLocalInPolicy
func (c *FakeClient) UpdateFirewallLocalInPolicy(obj *FirewallLocalInPolicy) (err error) {
	c.FirewallLocalInPolicys[obj.Policyid] = obj
	return nil
}

// Delete a FirewallLocalInPolicy by name
func (c *FakeClient) DeleteFirewallLocalInPolicy(mkey int) (err error) {
	delete(c.FirewallLocalInPolicys, mkey)
	return nil
}

// Policy action.
type FirewallPolicy6Action string

// Enable/disable policy traffic ASIC offloading.
type FirewallPolicy6AutoAsicOffload string

// Custom log fields.
type FirewallPolicy6CustomLogFields struct {

	// Custom log field.
	FieldId string `json:"field-id,omitempty"`
}

// Devices or device groups.
type FirewallPolicy6Devices struct {

	// Device or group name.
	Name string `json:"name,omitempty"`
}

// Enable/disable forward (original) traffic DiffServ.
type FirewallPolicy6DiffservForward string

// Enable/disable reverse (reply) traffic DiffServ.
type FirewallPolicy6DiffservReverse string

// Enable/disable DSRI.
type FirewallPolicy6Dsri string

// Destination address name.
type FirewallPolicy6Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated destination address match.
type FirewallPolicy6DstaddrNegate string

// Destination interface name.
type FirewallPolicy6Dstintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Packet session management.
type FirewallPolicy6FirewallSessionDirty string

// Enable/disable policy fixed port.
type FirewallPolicy6Fixedport string

// User authentication groups.
type FirewallPolicy6Groups struct {

	// Group name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy inbound.
type FirewallPolicy6Inbound string

// Enable/disable policy IP pool.
type FirewallPolicy6Ippool string

// Enable/disable policy log traffic.
type FirewallPolicy6Logtraffic string

// Enable/disable policy log traffic start.
type FirewallPolicy6LogtrafficStart string

// Enable/disable policy NAT.
type FirewallPolicy6Nat string

// Enable/disable policy NAT inbound.
type FirewallPolicy6Natinbound string

// Enable/disable policy NAT outbound.
type FirewallPolicy6Natoutbound string

// Enable/disable policy outbound.
type FirewallPolicy6Outbound string

// Policy IP pool names.
type FirewallPolicy6Poolname struct {

	// IP pool name.
	Name string `json:"name,omitempty"`
}

// profile type
type FirewallPolicy6ProfileType string

// Enable/disable RADIUS Single Sign-On.
type FirewallPolicy6Rsso string

// Enable/disable return of deny-packet.
type FirewallPolicy6SendDenyPacket string

// Service name.
type FirewallPolicy6Service struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated service match.
type FirewallPolicy6ServiceNegate string

// Source address name.
type FirewallPolicy6Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated source address match.
type FirewallPolicy6SrcaddrNegate string

// Source interface name.
type FirewallPolicy6Srcintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Enable/disable SSL mirror.
type FirewallPolicy6SslMirror string

// Mirror interface name.
type FirewallPolicy6SslMirrorIntf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallPolicy6Status string

// Applied object tags.
type FirewallPolicy6Tags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable sending of RST packet upon TCP session expiration.
type FirewallPolicy6TimeoutSendRst string

// User name.
type FirewallPolicy6Users struct {

	// User name.
	Name string `json:"name,omitempty"`
}

// Enable AV/web/ips protection profile.
type FirewallPolicy6UtmStatus string

const (
	// Action accept.
	FirewallPolicy6ActionAccept FirewallPolicy6Action = "accept"

	// Action deny.
	FirewallPolicy6ActionDeny FirewallPolicy6Action = "deny"

	// Action IPsec encryption.
	FirewallPolicy6ActionIpsec FirewallPolicy6Action = "ipsec"

	// Action SSL-VPN.
	FirewallPolicy6ActionSslVpn FirewallPolicy6Action = "ssl-vpn"
)

const (
	// Enable auto ASIC offloading.
	FirewallPolicy6AutoAsicOffloadEnable FirewallPolicy6AutoAsicOffload = "enable"

	// Disable ASIC offloading.
	FirewallPolicy6AutoAsicOffloadDisable FirewallPolicy6AutoAsicOffload = "disable"
)

const (
	// Enable forward (original) traffic DiffServ.
	FirewallPolicy6DiffservForwardEnable FirewallPolicy6DiffservForward = "enable"

	// Disable forward (original) traffic DiffServ.
	FirewallPolicy6DiffservForwardDisable FirewallPolicy6DiffservForward = "disable"
)

const (
	// Enable reverse (reply) traffic DiffServ.
	FirewallPolicy6DiffservReverseEnable FirewallPolicy6DiffservReverse = "enable"

	// Disable reverse (reply) traffic DiffServ.
	FirewallPolicy6DiffservReverseDisable FirewallPolicy6DiffservReverse = "disable"
)

const (
	// Enable DSRI.
	FirewallPolicy6DsriEnable FirewallPolicy6Dsri = "enable"

	// Disable DSRI.
	FirewallPolicy6DsriDisable FirewallPolicy6Dsri = "disable"
)

const (
	// Enable source address negate.
	FirewallPolicy6DstaddrNegateEnable FirewallPolicy6DstaddrNegate = "enable"

	// Disable destination address negate.
	FirewallPolicy6DstaddrNegateDisable FirewallPolicy6DstaddrNegate = "disable"
)

const (
	// Flush all sessions and evaluate them anew.
	FirewallPolicy6FirewallSessionDirtyCheckAll FirewallPolicy6FirewallSessionDirty = "check-all"

	// Keep existing sessions and check new connections only.
	FirewallPolicy6FirewallSessionDirtyCheckNew FirewallPolicy6FirewallSessionDirty = "check-new"
)

const (
	// Enable setting.
	FirewallPolicy6FixedportEnable FirewallPolicy6Fixedport = "enable"

	// Disable setting.
	FirewallPolicy6FixedportDisable FirewallPolicy6Fixedport = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6InboundEnable FirewallPolicy6Inbound = "enable"

	// Disable setting.
	FirewallPolicy6InboundDisable FirewallPolicy6Inbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6IppoolEnable FirewallPolicy6Ippool = "enable"

	// Disable setting.
	FirewallPolicy6IppoolDisable FirewallPolicy6Ippool = "disable"
)

const (
	// Log all sessions.
	FirewallPolicy6LogtrafficAll FirewallPolicy6Logtraffic = "all"

	// UTM event and matched application traffic log.
	FirewallPolicy6LogtrafficUtm FirewallPolicy6Logtraffic = "utm"

	// Disable traffic and application log.
	FirewallPolicy6LogtrafficDisable FirewallPolicy6Logtraffic = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6LogtrafficStartEnable FirewallPolicy6LogtrafficStart = "enable"

	// Disable setting.
	FirewallPolicy6LogtrafficStartDisable FirewallPolicy6LogtrafficStart = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6NatEnable FirewallPolicy6Nat = "enable"

	// Disable setting.
	FirewallPolicy6NatDisable FirewallPolicy6Nat = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6NatinboundEnable FirewallPolicy6Natinbound = "enable"

	// Disable setting.
	FirewallPolicy6NatinboundDisable FirewallPolicy6Natinbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6NatoutboundEnable FirewallPolicy6Natoutbound = "enable"

	// Disable setting.
	FirewallPolicy6NatoutboundDisable FirewallPolicy6Natoutbound = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6OutboundEnable FirewallPolicy6Outbound = "enable"

	// Disable setting.
	FirewallPolicy6OutboundDisable FirewallPolicy6Outbound = "disable"
)

const (
	// use single profiles
	FirewallPolicy6ProfileTypeSingle FirewallPolicy6ProfileType = "single"

	// use profile groups
	FirewallPolicy6ProfileTypeGroup FirewallPolicy6ProfileType = "group"
)

const (
	// Enable setting.
	FirewallPolicy6RssoEnable FirewallPolicy6Rsso = "enable"

	// Disable setting.
	FirewallPolicy6RssoDisable FirewallPolicy6Rsso = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6SendDenyPacketEnable FirewallPolicy6SendDenyPacket = "enable"

	// Disable setting.
	FirewallPolicy6SendDenyPacketDisable FirewallPolicy6SendDenyPacket = "disable"
)

const (
	// Enable negated service match.
	FirewallPolicy6ServiceNegateEnable FirewallPolicy6ServiceNegate = "enable"

	// Disable negated service match.
	FirewallPolicy6ServiceNegateDisable FirewallPolicy6ServiceNegate = "disable"
)

const (
	// Enable source address negate.
	FirewallPolicy6SrcaddrNegateEnable FirewallPolicy6SrcaddrNegate = "enable"

	// Disable destination address negate.
	FirewallPolicy6SrcaddrNegateDisable FirewallPolicy6SrcaddrNegate = "disable"
)

const (
	// Enable SSL mirror.
	FirewallPolicy6SslMirrorEnable FirewallPolicy6SslMirror = "enable"

	// Disable SSL mirror.
	FirewallPolicy6SslMirrorDisable FirewallPolicy6SslMirror = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6StatusEnable FirewallPolicy6Status = "enable"

	// Disable setting.
	FirewallPolicy6StatusDisable FirewallPolicy6Status = "disable"
)

const (
	// Send RST when session times out.
	FirewallPolicy6TimeoutSendRstEnable FirewallPolicy6TimeoutSendRst = "enable"

	// Donot send RST when session times out.
	FirewallPolicy6TimeoutSendRstDisable FirewallPolicy6TimeoutSendRst = "disable"
)

const (
	// Enable setting.
	FirewallPolicy6UtmStatusEnable FirewallPolicy6UtmStatus = "enable"

	// Disable setting.
	FirewallPolicy6UtmStatusDisable FirewallPolicy6UtmStatus = "disable"
)

// Configure IPv6 policies.
type FirewallPolicy6 struct {

	// Policy action.
	Action FirewallPolicy6Action `json:"action,omitempty"`

	// Application list.
	ApplicationList string `json:"application-list,omitempty"`

	// Enable/disable policy traffic ASIC offloading.
	AutoAsicOffload FirewallPolicy6AutoAsicOffload `json:"auto-asic-offload,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// CASI profile.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Custom log fields.
	CustomLogFields []FirewallPolicy6CustomLogFields `json:"custom-log-fields,omitempty"`

	// Devices or device groups.
	Devices []FirewallPolicy6Devices `json:"devices,omitempty"`

	// Enable/disable forward (original) traffic DiffServ.
	DiffservForward FirewallPolicy6DiffservForward `json:"diffserv-forward,omitempty"`

	// Enable/disable reverse (reply) traffic DiffServ.
	DiffservReverse FirewallPolicy6DiffservReverse `json:"diffserv-reverse,omitempty"`

	// Forward (original) Traffic DiffServ code point value.
	DiffservcodeForward string `json:"diffservcode-forward,omitempty"`

	// Reverse (reply) Traffic DiffServ code point value.
	DiffservcodeRev string `json:"diffservcode-rev,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Enable/disable DSRI.
	Dsri FirewallPolicy6Dsri `json:"dsri,omitempty"`

	// Destination address name.
	Dstaddr []FirewallPolicy6Dstaddr `json:"dstaddr,omitempty"`

	// Enable/disable negated destination address match.
	DstaddrNegate FirewallPolicy6DstaddrNegate `json:"dstaddr-negate,omitempty"`

	// Destination interface name.
	Dstintf []FirewallPolicy6Dstintf `json:"dstintf,omitempty"`

	// Packet session management.
	FirewallSessionDirty FirewallPolicy6FirewallSessionDirty `json:"firewall-session-dirty,omitempty"`

	// Enable/disable policy fixed port.
	Fixedport FirewallPolicy6Fixedport `json:"fixedport,omitempty"`

	// Label for global view.
	GlobalLabel string `json:"global-label,omitempty"`

	// User authentication groups.
	Groups []FirewallPolicy6Groups `json:"groups,omitempty"`

	// ICAP profile.
	IcapProfile string `json:"icap-profile,omitempty"`

	// Enable/disable policy inbound.
	Inbound FirewallPolicy6Inbound `json:"inbound,omitempty"`

	// Enable/disable policy IP pool.
	Ippool FirewallPolicy6Ippool `json:"ippool,omitempty"`

	// IPS sensor.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Label for section view.
	Label string `json:"label,omitempty"`

	// Enable/disable policy log traffic.
	Logtraffic FirewallPolicy6Logtraffic `json:"logtraffic,omitempty"`

	// Enable/disable policy log traffic start.
	LogtrafficStart FirewallPolicy6LogtrafficStart `json:"logtraffic-start,omitempty"`

	// Policy name.
	Name string `json:"name,omitempty"`

	// Enable/disable policy NAT.
	Nat FirewallPolicy6Nat `json:"nat,omitempty"`

	// Enable/disable policy NAT inbound.
	Natinbound FirewallPolicy6Natinbound `json:"natinbound,omitempty"`

	// Enable/disable policy NAT outbound.
	Natoutbound FirewallPolicy6Natoutbound `json:"natoutbound,omitempty"`

	// Enable/disable policy outbound.
	Outbound FirewallPolicy6Outbound `json:"outbound,omitempty"`

	// Per-IP shaper.
	PerIpShaper string `json:"per-ip-shaper,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Policy IP pool names.
	Poolname []FirewallPolicy6Poolname `json:"poolname,omitempty"`

	// profile group
	ProfileGroup string `json:"profile-group,omitempty"`

	// Profile protocol options.
	ProfileProtocolOptions string `json:"profile-protocol-options,omitempty"`

	// profile type
	ProfileType FirewallPolicy6ProfileType `json:"profile-type,omitempty"`

	// Specify authentication replacement message override group.
	ReplacemsgOverrideGroup string `json:"replacemsg-override-group,omitempty"`

	// Enable/disable RADIUS Single Sign-On.
	Rsso FirewallPolicy6Rsso `json:"rsso,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Enable/disable return of deny-packet.
	SendDenyPacket FirewallPolicy6SendDenyPacket `json:"send-deny-packet,omitempty"`

	// Service name.
	Service []FirewallPolicy6Service `json:"service,omitempty"`

	// Enable/disable negated service match.
	ServiceNegate FirewallPolicy6ServiceNegate `json:"service-negate,omitempty"`

	// Session TTL.
	SessionTtl int `json:"session-ttl,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Source address name.
	Srcaddr []FirewallPolicy6Srcaddr `json:"srcaddr,omitempty"`

	// Enable/disable negated source address match.
	SrcaddrNegate FirewallPolicy6SrcaddrNegate `json:"srcaddr-negate,omitempty"`

	// Source interface name.
	Srcintf []FirewallPolicy6Srcintf `json:"srcintf,omitempty"`

	// Enable/disable SSL mirror.
	SslMirror FirewallPolicy6SslMirror `json:"ssl-mirror,omitempty"`

	// Mirror interface name.
	SslMirrorIntf []FirewallPolicy6SslMirrorIntf `json:"ssl-mirror-intf,omitempty"`

	// SSL SSH Profile.
	SslSshProfile string `json:"ssl-ssh-profile,omitempty"`

	// Enable/disable policy status.
	Status FirewallPolicy6Status `json:"status,omitempty"`

	// Applied object tags.
	Tags []FirewallPolicy6Tags `json:"tags,omitempty"`

	// TCP MSS value of receiver.
	TcpMssReceiver int `json:"tcp-mss-receiver,omitempty"`

	// TCP MSS value of sender.
	TcpMssSender int `json:"tcp-mss-sender,omitempty"`

	// Enable/disable sending of RST packet upon TCP session expiration.
	TimeoutSendRst FirewallPolicy6TimeoutSendRst `json:"timeout-send-rst,omitempty"`

	// Traffic shaper.
	TrafficShaper string `json:"traffic-shaper,omitempty"`

	// Traffic shaper.
	TrafficShaperReverse string `json:"traffic-shaper-reverse,omitempty"`

	// User name.
	Users []FirewallPolicy6Users `json:"users,omitempty"`

	// Enable AV/web/ips protection profile.
	UtmStatus FirewallPolicy6UtmStatus `json:"utm-status,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// VLAN forward direction user priority.
	VlanCosFwd int `json:"vlan-cos-fwd,omitempty"`

	// VLAN reverse direction user priority.
	VlanCosRev int `json:"vlan-cos-rev,omitempty"`

	// VoIP profile.
	VoipProfile string `json:"voip-profile,omitempty"`

	// Policy VPN tunnel.
	Vpntunnel string `json:"vpntunnel,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`
}

// Returns the value that identifies a FirewallPolicy6
func (x *FirewallPolicy6) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallPolicy6Results struct {
	Results []*FirewallPolicy6 `json:"results"`
	Mkey    int                `json:"mkey"`
	Result
}

// List all FirewallPolicy6s
func (c *WebClient) ListFirewallPolicy6s() (res []*FirewallPolicy6, err error) {
	var results FirewallPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/policy6", nil, nil, &results)
	if err != nil {
		return []*FirewallPolicy6{}, fmt.Errorf("error listing FirewallPolicy6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallPolicy6 by name
func (c *WebClient) GetFirewallPolicy6(mkey int) (res *FirewallPolicy6, err error) {
	var results FirewallPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/policy6/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallPolicy6{}, fmt.Errorf("error getting FirewallPolicy6 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallPolicy6
func (c *WebClient) CreateFirewallPolicy6(obj *FirewallPolicy6) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/policy6", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallPolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallPolicy6
func (c *WebClient) UpdateFirewallPolicy6(obj *FirewallPolicy6) error {
	_, err := c.do(http.MethodPut, "firewall/policy6/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallPolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallPolicy6 by name
func (c *WebClient) DeleteFirewallPolicy6(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/policy6/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallPolicy6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallPolicy6s
func (c *FakeClient) ListFirewallPolicy6s() (res []*FirewallPolicy6, err error) {
	for _, r := range c.FirewallPolicy6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallPolicy6 by name
func (c *FakeClient) GetFirewallPolicy6(mkey int) (*FirewallPolicy6, error) {
	if res, ok := c.FirewallPolicy6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallPolicy6{}, fmt.Errorf("error getting FirewallPolicy6 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallPolicy6
func (c *FakeClient) CreateFirewallPolicy6(obj *FirewallPolicy6) (id int, err error) {
	id = c.FirewallPolicy6Counter
	c.FirewallPolicy6Counter++
	c.FirewallPolicy6s[id] = obj
	return
}

// Update a FirewallPolicy6
func (c *FakeClient) UpdateFirewallPolicy6(obj *FirewallPolicy6) (err error) {
	c.FirewallPolicy6s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallPolicy6 by name
func (c *FakeClient) DeleteFirewallPolicy6(mkey int) (err error) {
	delete(c.FirewallPolicy6s, mkey)
	return nil
}

// Local-In policy action.
type FirewallLocalInPolicy6Action string

// Destination address name.
type FirewallLocalInPolicy6Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Service name.
type FirewallLocalInPolicy6Service struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallLocalInPolicy6Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallLocalInPolicy6Status string

const (
	// Action accept.
	FirewallLocalInPolicy6ActionAccept FirewallLocalInPolicy6Action = "accept"

	// Action deny.
	FirewallLocalInPolicy6ActionDeny FirewallLocalInPolicy6Action = "deny"
)

const (
	// Enable policy status.
	FirewallLocalInPolicy6StatusEnable FirewallLocalInPolicy6Status = "enable"

	// Disable policy status.
	FirewallLocalInPolicy6StatusDisable FirewallLocalInPolicy6Status = "disable"
)

// Configure user defined IPv6 local-in policies.
type FirewallLocalInPolicy6 struct {

	// Local-In policy action.
	Action FirewallLocalInPolicy6Action `json:"action,omitempty"`

	// Destination address name.
	Dstaddr []FirewallLocalInPolicy6Dstaddr `json:"dstaddr,omitempty"`

	// Source interface name.
	Intf string `json:"intf,omitempty"`

	// User defined local in policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Service name.
	Service []FirewallLocalInPolicy6Service `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallLocalInPolicy6Srcaddr `json:"srcaddr,omitempty"`

	// Enable/disable policy status.
	Status FirewallLocalInPolicy6Status `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallLocalInPolicy6
func (x *FirewallLocalInPolicy6) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallLocalInPolicy6Results struct {
	Results []*FirewallLocalInPolicy6 `json:"results"`
	Mkey    int                       `json:"mkey"`
	Result
}

// List all FirewallLocalInPolicy6s
func (c *WebClient) ListFirewallLocalInPolicy6s() (res []*FirewallLocalInPolicy6, err error) {
	var results FirewallLocalInPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/local-in-policy6", nil, nil, &results)
	if err != nil {
		return []*FirewallLocalInPolicy6{}, fmt.Errorf("error listing FirewallLocalInPolicy6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallLocalInPolicy6 by name
func (c *WebClient) GetFirewallLocalInPolicy6(mkey int) (res *FirewallLocalInPolicy6, err error) {
	var results FirewallLocalInPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/local-in-policy6/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallLocalInPolicy6{}, fmt.Errorf("error getting FirewallLocalInPolicy6 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallLocalInPolicy6
func (c *WebClient) CreateFirewallLocalInPolicy6(obj *FirewallLocalInPolicy6) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/local-in-policy6", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallLocalInPolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallLocalInPolicy6
func (c *WebClient) UpdateFirewallLocalInPolicy6(obj *FirewallLocalInPolicy6) error {
	_, err := c.do(http.MethodPut, "firewall/local-in-policy6/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallLocalInPolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallLocalInPolicy6 by name
func (c *WebClient) DeleteFirewallLocalInPolicy6(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/local-in-policy6/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallLocalInPolicy6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallLocalInPolicy6s
func (c *FakeClient) ListFirewallLocalInPolicy6s() (res []*FirewallLocalInPolicy6, err error) {
	for _, r := range c.FirewallLocalInPolicy6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallLocalInPolicy6 by name
func (c *FakeClient) GetFirewallLocalInPolicy6(mkey int) (*FirewallLocalInPolicy6, error) {
	if res, ok := c.FirewallLocalInPolicy6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallLocalInPolicy6{}, fmt.Errorf("error getting FirewallLocalInPolicy6 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallLocalInPolicy6
func (c *FakeClient) CreateFirewallLocalInPolicy6(obj *FirewallLocalInPolicy6) (id int, err error) {
	id = c.FirewallLocalInPolicy6Counter
	c.FirewallLocalInPolicy6Counter++
	c.FirewallLocalInPolicy6s[id] = obj
	return
}

// Update a FirewallLocalInPolicy6
func (c *FakeClient) UpdateFirewallLocalInPolicy6(obj *FirewallLocalInPolicy6) (err error) {
	c.FirewallLocalInPolicy6s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallLocalInPolicy6 by name
func (c *FakeClient) DeleteFirewallLocalInPolicy6(mkey int) (err error) {
	delete(c.FirewallLocalInPolicy6s, mkey)
	return nil
}

// Action.
type FirewallTtlPolicyAction string

// Service name.
type FirewallTtlPolicyService struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallTtlPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// status
type FirewallTtlPolicyStatus string

const (
	// Action accept.
	FirewallTtlPolicyActionAccept FirewallTtlPolicyAction = "accept"

	// Action deny.
	FirewallTtlPolicyActionDeny FirewallTtlPolicyAction = "deny"
)

const (
	// Enable setting.
	FirewallTtlPolicyStatusEnable FirewallTtlPolicyStatus = "enable"

	// Disable setting.
	FirewallTtlPolicyStatusDisable FirewallTtlPolicyStatus = "disable"
)

// Configure TTL policies.
type FirewallTtlPolicy struct {

	// Action.
	Action FirewallTtlPolicyAction `json:"action,omitempty"`

	// ID.
	Id int `json:"id,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Service name.
	Service []FirewallTtlPolicyService `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallTtlPolicySrcaddr `json:"srcaddr,omitempty"`

	// Source interface name.
	Srcintf string `json:"srcintf,omitempty"`

	// status
	Status FirewallTtlPolicyStatus `json:"status,omitempty"`

	// TTL range.
	Ttl string `json:"ttl,omitempty"`
}

// Returns the value that identifies a FirewallTtlPolicy
func (x *FirewallTtlPolicy) MKey() int {
	return x.Id
}

// The results of a Get or List operation
type FirewallTtlPolicyResults struct {
	Results []*FirewallTtlPolicy `json:"results"`
	Mkey    int                  `json:"mkey"`
	Result
}

// List all FirewallTtlPolicys
func (c *WebClient) ListFirewallTtlPolicys() (res []*FirewallTtlPolicy, err error) {
	var results FirewallTtlPolicyResults
	_, err = c.do(http.MethodGet, "firewall/ttl-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallTtlPolicy{}, fmt.Errorf("error listing FirewallTtlPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallTtlPolicy by name
func (c *WebClient) GetFirewallTtlPolicy(mkey int) (res *FirewallTtlPolicy, err error) {
	var results FirewallTtlPolicyResults
	_, err = c.do(http.MethodGet, "firewall/ttl-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallTtlPolicy{}, fmt.Errorf("error getting FirewallTtlPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallTtlPolicy
func (c *WebClient) CreateFirewallTtlPolicy(obj *FirewallTtlPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/ttl-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallTtlPolicy '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return
}

// Update a FirewallTtlPolicy
func (c *WebClient) UpdateFirewallTtlPolicy(obj *FirewallTtlPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/ttl-policy/"+strconv.Itoa(obj.Id), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallTtlPolicy '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return err
}

// Delete a FirewallTtlPolicy by name
func (c *WebClient) DeleteFirewallTtlPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/ttl-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallTtlPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallTtlPolicys
func (c *FakeClient) ListFirewallTtlPolicys() (res []*FirewallTtlPolicy, err error) {
	for _, r := range c.FirewallTtlPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallTtlPolicy by name
func (c *FakeClient) GetFirewallTtlPolicy(mkey int) (*FirewallTtlPolicy, error) {
	if res, ok := c.FirewallTtlPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallTtlPolicy{}, fmt.Errorf("error getting FirewallTtlPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallTtlPolicy
func (c *FakeClient) CreateFirewallTtlPolicy(obj *FirewallTtlPolicy) (id int, err error) {
	id = c.FirewallTtlPolicyCounter
	c.FirewallTtlPolicyCounter++
	c.FirewallTtlPolicys[id] = obj
	return
}

// Update a FirewallTtlPolicy
func (c *FakeClient) UpdateFirewallTtlPolicy(obj *FirewallTtlPolicy) (err error) {
	c.FirewallTtlPolicys[obj.Id] = obj
	return nil
}

// Delete a FirewallTtlPolicy by name
func (c *FakeClient) DeleteFirewallTtlPolicy(mkey int) (err error) {
	delete(c.FirewallTtlPolicys, mkey)
	return nil
}

// Policy action.
type FirewallPolicy64Action string

// Destination address name.
type FirewallPolicy64Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy fixed port.
type FirewallPolicy64Fixedport string

// Enable/disable policy64 IP pool.
type FirewallPolicy64Ippool string

// Enable/disable policy log traffic.
type FirewallPolicy64Logtraffic string

// Enable/disable permit any host in.
type FirewallPolicy64PermitAnyHost string

// Policy IP pool names.
type FirewallPolicy64Poolname struct {

	// IP pool name.
	Name string `json:"name,omitempty"`
}

// Service name.
type FirewallPolicy64Service struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallPolicy64Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallPolicy64Status string

// Applied object tags.
type FirewallPolicy64Tags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

const (
	// Action accept.
	FirewallPolicy64ActionAccept FirewallPolicy64Action = "accept"

	// Action deny.
	FirewallPolicy64ActionDeny FirewallPolicy64Action = "deny"
)

const (
	// Enable setting.
	FirewallPolicy64FixedportEnable FirewallPolicy64Fixedport = "enable"

	// Disable setting.
	FirewallPolicy64FixedportDisable FirewallPolicy64Fixedport = "disable"
)

const (
	// Enable setting.
	FirewallPolicy64IppoolEnable FirewallPolicy64Ippool = "enable"

	// Disable setting.
	FirewallPolicy64IppoolDisable FirewallPolicy64Ippool = "disable"
)

const (
	// Enable setting.
	FirewallPolicy64LogtrafficEnable FirewallPolicy64Logtraffic = "enable"

	// Disable setting.
	FirewallPolicy64LogtrafficDisable FirewallPolicy64Logtraffic = "disable"
)

const (
	// Enable setting.
	FirewallPolicy64PermitAnyHostEnable FirewallPolicy64PermitAnyHost = "enable"

	// Disable setting.
	FirewallPolicy64PermitAnyHostDisable FirewallPolicy64PermitAnyHost = "disable"
)

const (
	// Enable setting.
	FirewallPolicy64StatusEnable FirewallPolicy64Status = "enable"

	// Disable setting.
	FirewallPolicy64StatusDisable FirewallPolicy64Status = "disable"
)

// Configure IPv6 to IPv4 policies.
type FirewallPolicy64 struct {

	// Policy action.
	Action FirewallPolicy64Action `json:"action,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Destination address name.
	Dstaddr []FirewallPolicy64Dstaddr `json:"dstaddr,omitempty"`

	// Destination interface name.
	Dstintf string `json:"dstintf,omitempty"`

	// Enable/disable policy fixed port.
	Fixedport FirewallPolicy64Fixedport `json:"fixedport,omitempty"`

	// Enable/disable policy64 IP pool.
	Ippool FirewallPolicy64Ippool `json:"ippool,omitempty"`

	// Enable/disable policy log traffic.
	Logtraffic FirewallPolicy64Logtraffic `json:"logtraffic,omitempty"`

	// Per-IP traffic shaper.
	PerIpShaper string `json:"per-ip-shaper,omitempty"`

	// Enable/disable permit any host in.
	PermitAnyHost FirewallPolicy64PermitAnyHost `json:"permit-any-host,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Policy IP pool names.
	Poolname []FirewallPolicy64Poolname `json:"poolname,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Service name.
	Service []FirewallPolicy64Service `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallPolicy64Srcaddr `json:"srcaddr,omitempty"`

	// Source interface name.
	Srcintf string `json:"srcintf,omitempty"`

	// Enable/disable policy status.
	Status FirewallPolicy64Status `json:"status,omitempty"`

	// Applied object tags.
	Tags []FirewallPolicy64Tags `json:"tags,omitempty"`

	// TCP MSS value of receiver.
	TcpMssReceiver int `json:"tcp-mss-receiver,omitempty"`

	// TCP MSS value of sender.
	TcpMssSender int `json:"tcp-mss-sender,omitempty"`

	// Traffic shaper.
	TrafficShaper string `json:"traffic-shaper,omitempty"`

	// Reverse traffic shaper.
	TrafficShaperReverse string `json:"traffic-shaper-reverse,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallPolicy64
func (x *FirewallPolicy64) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallPolicy64Results struct {
	Results []*FirewallPolicy64 `json:"results"`
	Mkey    int                 `json:"mkey"`
	Result
}

// List all FirewallPolicy64s
func (c *WebClient) ListFirewallPolicy64s() (res []*FirewallPolicy64, err error) {
	var results FirewallPolicy64Results
	_, err = c.do(http.MethodGet, "firewall/policy64", nil, nil, &results)
	if err != nil {
		return []*FirewallPolicy64{}, fmt.Errorf("error listing FirewallPolicy64s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallPolicy64 by name
func (c *WebClient) GetFirewallPolicy64(mkey int) (res *FirewallPolicy64, err error) {
	var results FirewallPolicy64Results
	_, err = c.do(http.MethodGet, "firewall/policy64/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallPolicy64{}, fmt.Errorf("error getting FirewallPolicy64 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallPolicy64
func (c *WebClient) CreateFirewallPolicy64(obj *FirewallPolicy64) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/policy64", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallPolicy64 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallPolicy64
func (c *WebClient) UpdateFirewallPolicy64(obj *FirewallPolicy64) error {
	_, err := c.do(http.MethodPut, "firewall/policy64/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallPolicy64 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallPolicy64 by name
func (c *WebClient) DeleteFirewallPolicy64(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/policy64/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallPolicy64 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallPolicy64s
func (c *FakeClient) ListFirewallPolicy64s() (res []*FirewallPolicy64, err error) {
	for _, r := range c.FirewallPolicy64s {
		res = append(res, r)
	}
	return
}

// Get a FirewallPolicy64 by name
func (c *FakeClient) GetFirewallPolicy64(mkey int) (*FirewallPolicy64, error) {
	if res, ok := c.FirewallPolicy64s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallPolicy64{}, fmt.Errorf("error getting FirewallPolicy64 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallPolicy64
func (c *FakeClient) CreateFirewallPolicy64(obj *FirewallPolicy64) (id int, err error) {
	id = c.FirewallPolicy64Counter
	c.FirewallPolicy64Counter++
	c.FirewallPolicy64s[id] = obj
	return
}

// Update a FirewallPolicy64
func (c *FakeClient) UpdateFirewallPolicy64(obj *FirewallPolicy64) (err error) {
	c.FirewallPolicy64s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallPolicy64 by name
func (c *FakeClient) DeleteFirewallPolicy64(mkey int) (err error) {
	delete(c.FirewallPolicy64s, mkey)
	return nil
}

// Policy action.
type FirewallPolicy46Action string

// Destination address name.
type FirewallPolicy46Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy fixed port.
type FirewallPolicy46Fixedport string

// Enable/disable traffic log.
type FirewallPolicy46Logtraffic string

// Enable/disable permit any host in.
type FirewallPolicy46PermitAnyHost string

// Service name.
type FirewallPolicy46Service struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallPolicy46Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Policy status.
type FirewallPolicy46Status string

// Applied object tags.
type FirewallPolicy46Tags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

const (
	// Action accept.
	FirewallPolicy46ActionAccept FirewallPolicy46Action = "accept"

	// Action deny.
	FirewallPolicy46ActionDeny FirewallPolicy46Action = "deny"
)

const (
	// Enable setting.
	FirewallPolicy46FixedportEnable FirewallPolicy46Fixedport = "enable"

	// Disable setting.
	FirewallPolicy46FixedportDisable FirewallPolicy46Fixedport = "disable"
)

const (
	// Enable setting.
	FirewallPolicy46LogtrafficEnable FirewallPolicy46Logtraffic = "enable"

	// Disable setting.
	FirewallPolicy46LogtrafficDisable FirewallPolicy46Logtraffic = "disable"
)

const (
	// Enable setting.
	FirewallPolicy46PermitAnyHostEnable FirewallPolicy46PermitAnyHost = "enable"

	// Disable setting.
	FirewallPolicy46PermitAnyHostDisable FirewallPolicy46PermitAnyHost = "disable"
)

const (
	// Enable setting.
	FirewallPolicy46StatusEnable FirewallPolicy46Status = "enable"

	// Disable setting.
	FirewallPolicy46StatusDisable FirewallPolicy46Status = "disable"
)

// Configure IPv4 to IPv6 policies.
type FirewallPolicy46 struct {

	// Policy action.
	Action FirewallPolicy46Action `json:"action,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Destination address name.
	Dstaddr []FirewallPolicy46Dstaddr `json:"dstaddr,omitempty"`

	// Destination interface name.
	Dstintf string `json:"dstintf,omitempty"`

	// Enable/disable policy fixed port.
	Fixedport FirewallPolicy46Fixedport `json:"fixedport,omitempty"`

	// Enable/disable traffic log.
	Logtraffic FirewallPolicy46Logtraffic `json:"logtraffic,omitempty"`

	// Per IP traffic shaper.
	PerIpShaper string `json:"per-ip-shaper,omitempty"`

	// Enable/disable permit any host in.
	PermitAnyHost FirewallPolicy46PermitAnyHost `json:"permit-any-host,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Service name.
	Service []FirewallPolicy46Service `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallPolicy46Srcaddr `json:"srcaddr,omitempty"`

	// Source interface name.
	Srcintf string `json:"srcintf,omitempty"`

	// Policy status.
	Status FirewallPolicy46Status `json:"status,omitempty"`

	// Applied object tags.
	Tags []FirewallPolicy46Tags `json:"tags,omitempty"`

	// TCP MSS value of receiver.
	TcpMssReceiver int `json:"tcp-mss-receiver,omitempty"`

	// TCP MSS value of sender.
	TcpMssSender int `json:"tcp-mss-sender,omitempty"`

	// Traffic shaper.
	TrafficShaper string `json:"traffic-shaper,omitempty"`

	// Reverse traffic shaper.
	TrafficShaperReverse string `json:"traffic-shaper-reverse,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`
}

// Returns the value that identifies a FirewallPolicy46
func (x *FirewallPolicy46) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallPolicy46Results struct {
	Results []*FirewallPolicy46 `json:"results"`
	Mkey    int                 `json:"mkey"`
	Result
}

// List all FirewallPolicy46s
func (c *WebClient) ListFirewallPolicy46s() (res []*FirewallPolicy46, err error) {
	var results FirewallPolicy46Results
	_, err = c.do(http.MethodGet, "firewall/policy46", nil, nil, &results)
	if err != nil {
		return []*FirewallPolicy46{}, fmt.Errorf("error listing FirewallPolicy46s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallPolicy46 by name
func (c *WebClient) GetFirewallPolicy46(mkey int) (res *FirewallPolicy46, err error) {
	var results FirewallPolicy46Results
	_, err = c.do(http.MethodGet, "firewall/policy46/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallPolicy46{}, fmt.Errorf("error getting FirewallPolicy46 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallPolicy46
func (c *WebClient) CreateFirewallPolicy46(obj *FirewallPolicy46) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/policy46", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallPolicy46 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallPolicy46
func (c *WebClient) UpdateFirewallPolicy46(obj *FirewallPolicy46) error {
	_, err := c.do(http.MethodPut, "firewall/policy46/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallPolicy46 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallPolicy46 by name
func (c *WebClient) DeleteFirewallPolicy46(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/policy46/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallPolicy46 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallPolicy46s
func (c *FakeClient) ListFirewallPolicy46s() (res []*FirewallPolicy46, err error) {
	for _, r := range c.FirewallPolicy46s {
		res = append(res, r)
	}
	return
}

// Get a FirewallPolicy46 by name
func (c *FakeClient) GetFirewallPolicy46(mkey int) (*FirewallPolicy46, error) {
	if res, ok := c.FirewallPolicy46s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallPolicy46{}, fmt.Errorf("error getting FirewallPolicy46 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallPolicy46
func (c *FakeClient) CreateFirewallPolicy46(obj *FirewallPolicy46) (id int, err error) {
	id = c.FirewallPolicy46Counter
	c.FirewallPolicy46Counter++
	c.FirewallPolicy46s[id] = obj
	return
}

// Update a FirewallPolicy46
func (c *FakeClient) UpdateFirewallPolicy46(obj *FirewallPolicy46) (err error) {
	c.FirewallPolicy46s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallPolicy46 by name
func (c *FakeClient) DeleteFirewallPolicy46(mkey int) (err error) {
	delete(c.FirewallPolicy46s, mkey)
	return nil
}

// Case sensitivity in pattern.
type FirewallExplicitProxyAddressCaseSensitivity string

// FortiGuard category ID.
type FirewallExplicitProxyAddressCategory struct {

	// Fortiguard category id.
	Id int `json:"id,omitempty"`
}

// HTTP header group.
type FirewallExplicitProxyAddressHeaderGroup struct {

	// Case sensitivity in pattern.
	CaseSensitivity string `json:"case-sensitivity,omitempty"`

	// HTTP header regular expression.
	Header string `json:"header,omitempty"`

	// HTTP header.
	HeaderName string `json:"header-name,omitempty"`

	// ID.
	Id int `json:"id,omitempty"`
}

// HTTP methods.
type FirewallExplicitProxyAddressMethod string

// Applied object tags.
type FirewallExplicitProxyAddressTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Address type.
type FirewallExplicitProxyAddressType string

// User agent.
type FirewallExplicitProxyAddressUa string

// Enable/disable address visibility.
type FirewallExplicitProxyAddressVisibility string

const (
	// Case insensitive in pattern.
	FirewallExplicitProxyAddressCaseSensitivityDisable FirewallExplicitProxyAddressCaseSensitivity = "disable"

	// Case sensitive in pattern.
	FirewallExplicitProxyAddressCaseSensitivityEnable FirewallExplicitProxyAddressCaseSensitivity = "enable"
)

const (
	// GET method.
	FirewallExplicitProxyAddressMethodGet FirewallExplicitProxyAddressMethod = "get"

	// POST method.
	FirewallExplicitProxyAddressMethodPost FirewallExplicitProxyAddressMethod = "post"

	// PUT method.
	FirewallExplicitProxyAddressMethodPut FirewallExplicitProxyAddressMethod = "put"

	// HEAD method.
	FirewallExplicitProxyAddressMethodHead FirewallExplicitProxyAddressMethod = "head"

	// CONNECT method.
	FirewallExplicitProxyAddressMethodConnect FirewallExplicitProxyAddressMethod = "connect"

	// TRACE method.
	FirewallExplicitProxyAddressMethodTrace FirewallExplicitProxyAddressMethod = "trace"

	// OPTIONS method.
	FirewallExplicitProxyAddressMethodOptions FirewallExplicitProxyAddressMethod = "options"

	// DELETE method.
	FirewallExplicitProxyAddressMethodDelete FirewallExplicitProxyAddressMethod = "delete"
)

const (
	// Host regular expression.
	FirewallExplicitProxyAddressTypeHostRegex FirewallExplicitProxyAddressType = "host-regex"

	// HTTP URL.
	FirewallExplicitProxyAddressTypeUrl FirewallExplicitProxyAddressType = "url"

	// FortiGuard URL catgegory.
	FirewallExplicitProxyAddressTypeCategory FirewallExplicitProxyAddressType = "category"

	// HTTP request method.
	FirewallExplicitProxyAddressTypeMethod FirewallExplicitProxyAddressType = "method"

	// HTTP request user agent.
	FirewallExplicitProxyAddressTypeUa FirewallExplicitProxyAddressType = "ua"

	// HTTP request header.
	FirewallExplicitProxyAddressTypeHeader FirewallExplicitProxyAddressType = "header"

	// HTTP advanced source criteria.
	FirewallExplicitProxyAddressTypeSrcAdvanced FirewallExplicitProxyAddressType = "src-advanced"

	// HTTP advanced destination criteria.
	FirewallExplicitProxyAddressTypeDstAdvanced FirewallExplicitProxyAddressType = "dst-advanced"
)

const (
	// Google Chrome.
	FirewallExplicitProxyAddressUaChrome FirewallExplicitProxyAddressUa = "chrome"

	// Microsoft Internet Explorer or EDGE.
	FirewallExplicitProxyAddressUaMs FirewallExplicitProxyAddressUa = "ms"

	// Mozilla Firefox.
	FirewallExplicitProxyAddressUaFirefox FirewallExplicitProxyAddressUa = "firefox"

	// Apple Safari.
	FirewallExplicitProxyAddressUaSafari FirewallExplicitProxyAddressUa = "safari"

	// Other browsers.
	FirewallExplicitProxyAddressUaOther FirewallExplicitProxyAddressUa = "other"
)

const (
	// Enable setting.
	FirewallExplicitProxyAddressVisibilityEnable FirewallExplicitProxyAddressVisibility = "enable"

	// Disable setting.
	FirewallExplicitProxyAddressVisibilityDisable FirewallExplicitProxyAddressVisibility = "disable"
)

// Explicit web proxy address configuration.
type FirewallExplicitProxyAddress struct {

	// Case sensitivity in pattern.
	CaseSensitivity FirewallExplicitProxyAddressCaseSensitivity `json:"case-sensitivity,omitempty"`

	// FortiGuard category ID.
	Category []FirewallExplicitProxyAddressCategory `json:"category,omitempty"`

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// HTTP header regular expression.
	Header string `json:"header,omitempty"`

	// HTTP header group.
	HeaderGroup []FirewallExplicitProxyAddressHeaderGroup `json:"header-group,omitempty"`

	// HTTP header.
	HeaderName string `json:"header-name,omitempty"`

	// Host address
	Host string `json:"host,omitempty"`

	// Host regular expression.
	HostRegex string `json:"host-regex,omitempty"`

	// HTTP methods.
	Method FirewallExplicitProxyAddressMethod `json:"method,omitempty"`

	// Address name.
	Name string `json:"name,omitempty"`

	// URL path regular expression.
	Path string `json:"path,omitempty"`

	// Applied object tags.
	Tags []FirewallExplicitProxyAddressTags `json:"tags,omitempty"`

	// Address type.
	Type FirewallExplicitProxyAddressType `json:"type,omitempty"`

	// User agent.
	Ua FirewallExplicitProxyAddressUa `json:"ua,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable address visibility.
	Visibility FirewallExplicitProxyAddressVisibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallExplicitProxyAddress
func (x *FirewallExplicitProxyAddress) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallExplicitProxyAddressResults struct {
	Results []*FirewallExplicitProxyAddress `json:"results"`
	Mkey    string                          `json:"mkey"`
	Result
}

// List all FirewallExplicitProxyAddresss
func (c *WebClient) ListFirewallExplicitProxyAddresss() (res []*FirewallExplicitProxyAddress, err error) {
	var results FirewallExplicitProxyAddressResults
	_, err = c.do(http.MethodGet, "firewall/explicit-proxy-address", nil, nil, &results)
	if err != nil {
		return []*FirewallExplicitProxyAddress{}, fmt.Errorf("error listing FirewallExplicitProxyAddresss: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallExplicitProxyAddress by name
func (c *WebClient) GetFirewallExplicitProxyAddress(mkey string) (res *FirewallExplicitProxyAddress, err error) {
	var results FirewallExplicitProxyAddressResults
	_, err = c.do(http.MethodGet, "firewall/explicit-proxy-address/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallExplicitProxyAddress{}, fmt.Errorf("error getting FirewallExplicitProxyAddress '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallExplicitProxyAddress
func (c *WebClient) CreateFirewallExplicitProxyAddress(obj *FirewallExplicitProxyAddress) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/explicit-proxy-address", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallExplicitProxyAddress '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallExplicitProxyAddress
func (c *WebClient) UpdateFirewallExplicitProxyAddress(obj *FirewallExplicitProxyAddress) error {
	_, err := c.do(http.MethodPut, "firewall/explicit-proxy-address/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallExplicitProxyAddress '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallExplicitProxyAddress by name
func (c *WebClient) DeleteFirewallExplicitProxyAddress(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/explicit-proxy-address/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallExplicitProxyAddress '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallExplicitProxyAddresss
func (c *FakeClient) ListFirewallExplicitProxyAddresss() (res []*FirewallExplicitProxyAddress, err error) {
	for _, r := range c.FirewallExplicitProxyAddresss {
		res = append(res, r)
	}
	return
}

// Get a FirewallExplicitProxyAddress by name
func (c *FakeClient) GetFirewallExplicitProxyAddress(mkey string) (*FirewallExplicitProxyAddress, error) {
	if res, ok := c.FirewallExplicitProxyAddresss[mkey]; ok {
		return res, nil
	} else {
		return &FirewallExplicitProxyAddress{}, fmt.Errorf("error getting FirewallExplicitProxyAddress '%s': not found", mkey)
	}
}

// Create a new FirewallExplicitProxyAddress
func (c *FakeClient) CreateFirewallExplicitProxyAddress(obj *FirewallExplicitProxyAddress) (id string, err error) {
	id = obj.Name
	c.FirewallExplicitProxyAddresss[id] = obj
	return
}

// Update a FirewallExplicitProxyAddress
func (c *FakeClient) UpdateFirewallExplicitProxyAddress(obj *FirewallExplicitProxyAddress) (err error) {
	c.FirewallExplicitProxyAddresss[obj.Name] = obj
	return nil
}

// Delete a FirewallExplicitProxyAddress by name
func (c *FakeClient) DeleteFirewallExplicitProxyAddress(mkey string) (err error) {
	delete(c.FirewallExplicitProxyAddresss, mkey)
	return nil
}

// Address group members.
type FirewallExplicitProxyAddrgrpMember struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Applied object tags.
type FirewallExplicitProxyAddrgrpTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Address group type.
type FirewallExplicitProxyAddrgrpType string

// Enable/disable address visibility.
type FirewallExplicitProxyAddrgrpVisibility string

const (
	// Source group.
	FirewallExplicitProxyAddrgrpTypeSrc FirewallExplicitProxyAddrgrpType = "src"

	// Destination group.
	FirewallExplicitProxyAddrgrpTypeDst FirewallExplicitProxyAddrgrpType = "dst"
)

const (
	// Enable setting.
	FirewallExplicitProxyAddrgrpVisibilityEnable FirewallExplicitProxyAddrgrpVisibility = "enable"

	// Disable setting.
	FirewallExplicitProxyAddrgrpVisibilityDisable FirewallExplicitProxyAddrgrpVisibility = "disable"
)

// Explicit web proxy address group configuration.
type FirewallExplicitProxyAddrgrp struct {

	// GUI icon color.
	Color int `json:"color,omitempty"`

	// Comment.
	Comment string `json:"comment,omitempty"`

	// Address group members.
	Member []FirewallExplicitProxyAddrgrpMember `json:"member,omitempty"`

	// Address group name.
	Name string `json:"name,omitempty"`

	// Applied object tags.
	Tags []FirewallExplicitProxyAddrgrpTags `json:"tags,omitempty"`

	// Address group type.
	Type FirewallExplicitProxyAddrgrpType `json:"type,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Enable/disable address visibility.
	Visibility FirewallExplicitProxyAddrgrpVisibility `json:"visibility,omitempty"`
}

// Returns the value that identifies a FirewallExplicitProxyAddrgrp
func (x *FirewallExplicitProxyAddrgrp) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type FirewallExplicitProxyAddrgrpResults struct {
	Results []*FirewallExplicitProxyAddrgrp `json:"results"`
	Mkey    string                          `json:"mkey"`
	Result
}

// List all FirewallExplicitProxyAddrgrps
func (c *WebClient) ListFirewallExplicitProxyAddrgrps() (res []*FirewallExplicitProxyAddrgrp, err error) {
	var results FirewallExplicitProxyAddrgrpResults
	_, err = c.do(http.MethodGet, "firewall/explicit-proxy-addrgrp", nil, nil, &results)
	if err != nil {
		return []*FirewallExplicitProxyAddrgrp{}, fmt.Errorf("error listing FirewallExplicitProxyAddrgrps: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallExplicitProxyAddrgrp by name
func (c *WebClient) GetFirewallExplicitProxyAddrgrp(mkey string) (res *FirewallExplicitProxyAddrgrp, err error) {
	var results FirewallExplicitProxyAddrgrpResults
	_, err = c.do(http.MethodGet, "firewall/explicit-proxy-addrgrp/"+mkey, nil, nil, &results)
	if err != nil {
		return &FirewallExplicitProxyAddrgrp{}, fmt.Errorf("error getting FirewallExplicitProxyAddrgrp '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallExplicitProxyAddrgrp
func (c *WebClient) CreateFirewallExplicitProxyAddrgrp(obj *FirewallExplicitProxyAddrgrp) (id string, err error) {
	_, err = c.do(http.MethodPost, "firewall/explicit-proxy-addrgrp", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating FirewallExplicitProxyAddrgrp '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a FirewallExplicitProxyAddrgrp
func (c *WebClient) UpdateFirewallExplicitProxyAddrgrp(obj *FirewallExplicitProxyAddrgrp) error {
	_, err := c.do(http.MethodPut, "firewall/explicit-proxy-addrgrp/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallExplicitProxyAddrgrp '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a FirewallExplicitProxyAddrgrp by name
func (c *WebClient) DeleteFirewallExplicitProxyAddrgrp(mkey string) error {
	_, err := c.do(http.MethodDelete, "firewall/explicit-proxy-addrgrp/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallExplicitProxyAddrgrp '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallExplicitProxyAddrgrps
func (c *FakeClient) ListFirewallExplicitProxyAddrgrps() (res []*FirewallExplicitProxyAddrgrp, err error) {
	for _, r := range c.FirewallExplicitProxyAddrgrps {
		res = append(res, r)
	}
	return
}

// Get a FirewallExplicitProxyAddrgrp by name
func (c *FakeClient) GetFirewallExplicitProxyAddrgrp(mkey string) (*FirewallExplicitProxyAddrgrp, error) {
	if res, ok := c.FirewallExplicitProxyAddrgrps[mkey]; ok {
		return res, nil
	} else {
		return &FirewallExplicitProxyAddrgrp{}, fmt.Errorf("error getting FirewallExplicitProxyAddrgrp '%s': not found", mkey)
	}
}

// Create a new FirewallExplicitProxyAddrgrp
func (c *FakeClient) CreateFirewallExplicitProxyAddrgrp(obj *FirewallExplicitProxyAddrgrp) (id string, err error) {
	id = obj.Name
	c.FirewallExplicitProxyAddrgrps[id] = obj
	return
}

// Update a FirewallExplicitProxyAddrgrp
func (c *FakeClient) UpdateFirewallExplicitProxyAddrgrp(obj *FirewallExplicitProxyAddrgrp) (err error) {
	c.FirewallExplicitProxyAddrgrps[obj.Name] = obj
	return nil
}

// Delete a FirewallExplicitProxyAddrgrp by name
func (c *FakeClient) DeleteFirewallExplicitProxyAddrgrp(mkey string) (err error) {
	delete(c.FirewallExplicitProxyAddrgrps, mkey)
	return nil
}

// Policy action.
type FirewallExplicitProxyPolicyAction string

// Active authentication method.
type FirewallExplicitProxyPolicyActiveAuthMethod string

// Web proxy disclaimer setting.
type FirewallExplicitProxyPolicyDisclaimer string

// Destination address name. [dstaddr or dstaddr6(web proxy only) must be set].
type FirewallExplicitProxyPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated destination address match.
type FirewallExplicitProxyPolicyDstaddrNegate string

// IPv6 destination address (web proxy only). [dstaddr6 or dstaddr must be set].
type FirewallExplicitProxyPolicyDstaddr6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Destination interface name.
type FirewallExplicitProxyPolicyDstintf struct {

	// Interface name.
	Name string `json:"name,omitempty"`
}

// Enable/disable identity-based policy.
type FirewallExplicitProxyPolicyIdentityBased string

// Identity-based policy.
type FirewallExplicitProxyPolicyIdentityBasedPolicy struct {

	// Application list.
	ApplicationList string `json:"application-list,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// CASI profile.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Web proxy disclaimer setting.
	Disclaimer string `json:"disclaimer,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Group name.
	Groups string `json:"groups,omitempty"`

	// ICAP profile.
	IcapProfile string `json:"icap-profile,omitempty"`

	// ID.
	Id int `json:"id,omitempty"`

	// IPS sensor.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Enable/disable policy log traffic.
	Logtraffic string `json:"logtraffic,omitempty"`

	// Enable/disable policy log traffic start.
	LogtrafficStart string `json:"logtraffic-start,omitempty"`

	// profile group
	ProfileGroup string `json:"profile-group,omitempty"`

	// Profile protocol options.
	ProfileProtocolOptions string `json:"profile-protocol-options,omitempty"`

	// profile type
	ProfileType string `json:"profile-type,omitempty"`

	// Specify authentication replacement message override group.
	ReplacemsgOverrideGroup string `json:"replacemsg-override-group,omitempty"`

	// Enable/disable scanning of connections to Botnet servers.
	ScanBotnetConnections string `json:"scan-botnet-connections,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// SSL SSH Profile.
	SslSshProfile string `json:"ssl-ssh-profile,omitempty"`

	// User name.
	Users string `json:"users,omitempty"`

	// Enable AV/web/IPS protection profile.
	UtmStatus string `json:"utm-status,omitempty"`

	// Web application firewall profile.
	WafProfile string `json:"waf-profile,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`
}

// Enable/disable IP-based authentication.
type FirewallExplicitProxyPolicyIpBased string

// Enable/disable policy log traffic.
type FirewallExplicitProxyPolicyLogtraffic string

// Enable/disable policy log traffic start.
type FirewallExplicitProxyPolicyLogtrafficStart string

// profile type
type FirewallExplicitProxyPolicyProfileType string

// Explicit proxy type.
type FirewallExplicitProxyPolicyProxy string

// Enable/disable requirement of 2-factor authentication.
type FirewallExplicitProxyPolicyRequireTfa string

// Enable/disable scanning of connections to Botnet servers.
type FirewallExplicitProxyPolicyScanBotnetConnections string

// Service name.
type FirewallExplicitProxyPolicyService struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated service match.
type FirewallExplicitProxyPolicyServiceNegate string

// Source address name. [srcaddr or srcaddr6(web proxy only) must be set].
type FirewallExplicitProxyPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable negated source address match.
type FirewallExplicitProxyPolicySrcaddrNegate string

// IPv6 source address (web proxy only). [srcaddr6 or srcaddr must be set].
type FirewallExplicitProxyPolicySrcaddr6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// SSO authentication method.
type FirewallExplicitProxyPolicySsoAuthMethod string

// Enable/disable policy status.
type FirewallExplicitProxyPolicyStatus string

// Applied object tags.
type FirewallExplicitProxyPolicyTags struct {

	// Tag name.
	Name string `json:"name,omitempty"`
}

// Enable/disable transaction based authentication.
type FirewallExplicitProxyPolicyTransactionBased string

// Use IP address of client to connect to server.
type FirewallExplicitProxyPolicyTransparent string

// Enable AV/web/IPS protection profile.
type FirewallExplicitProxyPolicyUtmStatus string

// Enable/disable Web authentication cookie.
type FirewallExplicitProxyPolicyWebAuthCookie string

const (
	// Action accept.
	FirewallExplicitProxyPolicyActionAccept FirewallExplicitProxyPolicyAction = "accept"

	// Action deny.
	FirewallExplicitProxyPolicyActionDeny FirewallExplicitProxyPolicyAction = "deny"
)

const (
	// NTLM authentication.
	FirewallExplicitProxyPolicyActiveAuthMethodNtlm FirewallExplicitProxyPolicyActiveAuthMethod = "ntlm"

	// Basic HTTP authentication.
	FirewallExplicitProxyPolicyActiveAuthMethodBasic FirewallExplicitProxyPolicyActiveAuthMethod = "basic"

	// Digest HTTP authentication.
	FirewallExplicitProxyPolicyActiveAuthMethodDigest FirewallExplicitProxyPolicyActiveAuthMethod = "digest"

	// Form-based HTTP authentication.
	FirewallExplicitProxyPolicyActiveAuthMethodForm FirewallExplicitProxyPolicyActiveAuthMethod = "form"

	// Negotiate authentication.
	FirewallExplicitProxyPolicyActiveAuthMethodNegotiate FirewallExplicitProxyPolicyActiveAuthMethod = "negotiate"

	// No authentication.
	FirewallExplicitProxyPolicyActiveAuthMethodNone FirewallExplicitProxyPolicyActiveAuthMethod = "none"
)

const (
	// Disable disclaimer.
	FirewallExplicitProxyPolicyDisclaimerDisable FirewallExplicitProxyPolicyDisclaimer = "disable"

	// Display disclaimer for domain
	FirewallExplicitProxyPolicyDisclaimerDomain FirewallExplicitProxyPolicyDisclaimer = "domain"

	// Display disclaimer for policy
	FirewallExplicitProxyPolicyDisclaimerPolicy FirewallExplicitProxyPolicyDisclaimer = "policy"

	// Display disclaimer for current user
	FirewallExplicitProxyPolicyDisclaimerUser FirewallExplicitProxyPolicyDisclaimer = "user"
)

const (
	// Enable source address negate.
	FirewallExplicitProxyPolicyDstaddrNegateEnable FirewallExplicitProxyPolicyDstaddrNegate = "enable"

	// Disable destination address negate.
	FirewallExplicitProxyPolicyDstaddrNegateDisable FirewallExplicitProxyPolicyDstaddrNegate = "disable"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyIdentityBasedEnable FirewallExplicitProxyPolicyIdentityBased = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyIdentityBasedDisable FirewallExplicitProxyPolicyIdentityBased = "disable"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyIpBasedEnable FirewallExplicitProxyPolicyIpBased = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyIpBasedDisable FirewallExplicitProxyPolicyIpBased = "disable"
)

const (
	// Log all sessions.
	FirewallExplicitProxyPolicyLogtrafficAll FirewallExplicitProxyPolicyLogtraffic = "all"

	// UTM event and matched application traffic log.
	FirewallExplicitProxyPolicyLogtrafficUtm FirewallExplicitProxyPolicyLogtraffic = "utm"

	// Disable traffic and application log.
	FirewallExplicitProxyPolicyLogtrafficDisable FirewallExplicitProxyPolicyLogtraffic = "disable"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyLogtrafficStartEnable FirewallExplicitProxyPolicyLogtrafficStart = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyLogtrafficStartDisable FirewallExplicitProxyPolicyLogtrafficStart = "disable"
)

const (
	// use single profiles
	FirewallExplicitProxyPolicyProfileTypeSingle FirewallExplicitProxyPolicyProfileType = "single"

	// use profile groups
	FirewallExplicitProxyPolicyProfileTypeGroup FirewallExplicitProxyPolicyProfileType = "group"
)

const (
	// Explicit Web Proxy
	FirewallExplicitProxyPolicyProxyWeb FirewallExplicitProxyPolicyProxy = "web"

	// Explicit FTP Proxy
	FirewallExplicitProxyPolicyProxyFtp FirewallExplicitProxyPolicyProxy = "ftp"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyRequireTfaEnable FirewallExplicitProxyPolicyRequireTfa = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyRequireTfaDisable FirewallExplicitProxyPolicyRequireTfa = "disable"
)

const (
	// Do not scan connections to botnet servers.
	FirewallExplicitProxyPolicyScanBotnetConnectionsDisable FirewallExplicitProxyPolicyScanBotnetConnections = "disable"

	// Block connections to botnet servers.
	FirewallExplicitProxyPolicyScanBotnetConnectionsBlock FirewallExplicitProxyPolicyScanBotnetConnections = "block"

	// Log connections to botnet servers.
	FirewallExplicitProxyPolicyScanBotnetConnectionsMonitor FirewallExplicitProxyPolicyScanBotnetConnections = "monitor"
)

const (
	// Enable negated service match.
	FirewallExplicitProxyPolicyServiceNegateEnable FirewallExplicitProxyPolicyServiceNegate = "enable"

	// Disable negated service match.
	FirewallExplicitProxyPolicyServiceNegateDisable FirewallExplicitProxyPolicyServiceNegate = "disable"
)

const (
	// Enable source address negate.
	FirewallExplicitProxyPolicySrcaddrNegateEnable FirewallExplicitProxyPolicySrcaddrNegate = "enable"

	// Disable destination address negate.
	FirewallExplicitProxyPolicySrcaddrNegateDisable FirewallExplicitProxyPolicySrcaddrNegate = "disable"
)

const (
	// FSSO authentication.
	FirewallExplicitProxyPolicySsoAuthMethodFsso FirewallExplicitProxyPolicySsoAuthMethod = "fsso"

	// RADIUS Single Sign-On authentication.
	FirewallExplicitProxyPolicySsoAuthMethodRsso FirewallExplicitProxyPolicySsoAuthMethod = "rsso"

	// No authentication.
	FirewallExplicitProxyPolicySsoAuthMethodNone FirewallExplicitProxyPolicySsoAuthMethod = "none"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyStatusEnable FirewallExplicitProxyPolicyStatus = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyStatusDisable FirewallExplicitProxyPolicyStatus = "disable"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyTransactionBasedEnable FirewallExplicitProxyPolicyTransactionBased = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyTransactionBasedDisable FirewallExplicitProxyPolicyTransactionBased = "disable"
)

const (
	// Enable use of IP address of client to connect to server.
	FirewallExplicitProxyPolicyTransparentEnable FirewallExplicitProxyPolicyTransparent = "enable"

	// Disable use of IP address of client to connect to server.
	FirewallExplicitProxyPolicyTransparentDisable FirewallExplicitProxyPolicyTransparent = "disable"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyUtmStatusEnable FirewallExplicitProxyPolicyUtmStatus = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyUtmStatusDisable FirewallExplicitProxyPolicyUtmStatus = "disable"
)

const (
	// Enable setting.
	FirewallExplicitProxyPolicyWebAuthCookieEnable FirewallExplicitProxyPolicyWebAuthCookie = "enable"

	// Disable setting.
	FirewallExplicitProxyPolicyWebAuthCookieDisable FirewallExplicitProxyPolicyWebAuthCookie = "disable"
)

// Configure Explicit proxy policies.
type FirewallExplicitProxyPolicy struct {

	// Policy action.
	Action FirewallExplicitProxyPolicyAction `json:"action,omitempty"`

	// Active authentication method.
	ActiveAuthMethod FirewallExplicitProxyPolicyActiveAuthMethod `json:"active-auth-method,omitempty"`

	// Application list.
	ApplicationList string `json:"application-list,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// CASI profile.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Web proxy disclaimer setting.
	Disclaimer FirewallExplicitProxyPolicyDisclaimer `json:"disclaimer,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Destination address name. [dstaddr or dstaddr6(web proxy only) must be set].
	Dstaddr []FirewallExplicitProxyPolicyDstaddr `json:"dstaddr,omitempty"`

	// Enable/disable negated destination address match.
	DstaddrNegate FirewallExplicitProxyPolicyDstaddrNegate `json:"dstaddr-negate,omitempty"`

	// IPv6 destination address (web proxy only). [dstaddr6 or dstaddr must be set].
	Dstaddr6 []FirewallExplicitProxyPolicyDstaddr6 `json:"dstaddr6,omitempty"`

	// Destination interface name.
	Dstintf []FirewallExplicitProxyPolicyDstintf `json:"dstintf,omitempty"`

	// Label for global view.
	GlobalLabel string `json:"global-label,omitempty"`

	// ICAP profile.
	IcapProfile string `json:"icap-profile,omitempty"`

	// Enable/disable identity-based policy.
	IdentityBased FirewallExplicitProxyPolicyIdentityBased `json:"identity-based,omitempty"`

	// Identity-based policy.
	IdentityBasedPolicy []FirewallExplicitProxyPolicyIdentityBasedPolicy `json:"identity-based-policy,omitempty"`

	// Enable/disable IP-based authentication.
	IpBased FirewallExplicitProxyPolicyIpBased `json:"ip-based,omitempty"`

	// IPS sensor.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Label for section view.
	Label string `json:"label,omitempty"`

	// Enable/disable policy log traffic.
	Logtraffic FirewallExplicitProxyPolicyLogtraffic `json:"logtraffic,omitempty"`

	// Enable/disable policy log traffic start.
	LogtrafficStart FirewallExplicitProxyPolicyLogtrafficStart `json:"logtraffic-start,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// profile group
	ProfileGroup string `json:"profile-group,omitempty"`

	// Profile protocol options.
	ProfileProtocolOptions string `json:"profile-protocol-options,omitempty"`

	// profile type
	ProfileType FirewallExplicitProxyPolicyProfileType `json:"profile-type,omitempty"`

	// Explicit proxy type.
	Proxy FirewallExplicitProxyPolicyProxy `json:"proxy,omitempty"`

	// Specify authentication replacement message override group.
	ReplacemsgOverrideGroup string `json:"replacemsg-override-group,omitempty"`

	// Enable/disable requirement of 2-factor authentication.
	RequireTfa FirewallExplicitProxyPolicyRequireTfa `json:"require-tfa,omitempty"`

	// Enable/disable scanning of connections to Botnet servers.
	ScanBotnetConnections FirewallExplicitProxyPolicyScanBotnetConnections `json:"scan-botnet-connections,omitempty"`

	// Schedule name.
	Schedule string `json:"schedule,omitempty"`

	// Service name.
	Service []FirewallExplicitProxyPolicyService `json:"service,omitempty"`

	// Enable/disable negated service match.
	ServiceNegate FirewallExplicitProxyPolicyServiceNegate `json:"service-negate,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Source address name. [srcaddr or srcaddr6(web proxy only) must be set].
	Srcaddr []FirewallExplicitProxyPolicySrcaddr `json:"srcaddr,omitempty"`

	// Enable/disable negated source address match.
	SrcaddrNegate FirewallExplicitProxyPolicySrcaddrNegate `json:"srcaddr-negate,omitempty"`

	// IPv6 source address (web proxy only). [srcaddr6 or srcaddr must be set].
	Srcaddr6 []FirewallExplicitProxyPolicySrcaddr6 `json:"srcaddr6,omitempty"`

	// SSL SSH Profile.
	SslSshProfile string `json:"ssl-ssh-profile,omitempty"`

	// SSO authentication method.
	SsoAuthMethod FirewallExplicitProxyPolicySsoAuthMethod `json:"sso-auth-method,omitempty"`

	// Enable/disable policy status.
	Status FirewallExplicitProxyPolicyStatus `json:"status,omitempty"`

	// Applied object tags.
	Tags []FirewallExplicitProxyPolicyTags `json:"tags,omitempty"`

	// Enable/disable transaction based authentication.
	TransactionBased FirewallExplicitProxyPolicyTransactionBased `json:"transaction-based,omitempty"`

	// Use IP address of client to connect to server.
	Transparent FirewallExplicitProxyPolicyTransparent `json:"transparent,omitempty"`

	// Enable AV/web/IPS protection profile.
	UtmStatus FirewallExplicitProxyPolicyUtmStatus `json:"utm-status,omitempty"`

	// Universally Unique IDentifier.
	Uuid string `json:"uuid,omitempty"`

	// Web application firewall profile.
	WafProfile string `json:"waf-profile,omitempty"`

	// Enable/disable Web authentication cookie.
	WebAuthCookie FirewallExplicitProxyPolicyWebAuthCookie `json:"web-auth-cookie,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`

	// Web proxy forward server.
	WebproxyForwardServer string `json:"webproxy-forward-server,omitempty"`

	// Web proxy profile.
	WebproxyProfile string `json:"webproxy-profile,omitempty"`
}

// Returns the value that identifies a FirewallExplicitProxyPolicy
func (x *FirewallExplicitProxyPolicy) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallExplicitProxyPolicyResults struct {
	Results []*FirewallExplicitProxyPolicy `json:"results"`
	Mkey    int                            `json:"mkey"`
	Result
}

// List all FirewallExplicitProxyPolicys
func (c *WebClient) ListFirewallExplicitProxyPolicys() (res []*FirewallExplicitProxyPolicy, err error) {
	var results FirewallExplicitProxyPolicyResults
	_, err = c.do(http.MethodGet, "firewall/explicit-proxy-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallExplicitProxyPolicy{}, fmt.Errorf("error listing FirewallExplicitProxyPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallExplicitProxyPolicy by name
func (c *WebClient) GetFirewallExplicitProxyPolicy(mkey int) (res *FirewallExplicitProxyPolicy, err error) {
	var results FirewallExplicitProxyPolicyResults
	_, err = c.do(http.MethodGet, "firewall/explicit-proxy-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallExplicitProxyPolicy{}, fmt.Errorf("error getting FirewallExplicitProxyPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallExplicitProxyPolicy
func (c *WebClient) CreateFirewallExplicitProxyPolicy(obj *FirewallExplicitProxyPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/explicit-proxy-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallExplicitProxyPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallExplicitProxyPolicy
func (c *WebClient) UpdateFirewallExplicitProxyPolicy(obj *FirewallExplicitProxyPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/explicit-proxy-policy/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallExplicitProxyPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallExplicitProxyPolicy by name
func (c *WebClient) DeleteFirewallExplicitProxyPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/explicit-proxy-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallExplicitProxyPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallExplicitProxyPolicys
func (c *FakeClient) ListFirewallExplicitProxyPolicys() (res []*FirewallExplicitProxyPolicy, err error) {
	for _, r := range c.FirewallExplicitProxyPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallExplicitProxyPolicy by name
func (c *FakeClient) GetFirewallExplicitProxyPolicy(mkey int) (*FirewallExplicitProxyPolicy, error) {
	if res, ok := c.FirewallExplicitProxyPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallExplicitProxyPolicy{}, fmt.Errorf("error getting FirewallExplicitProxyPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallExplicitProxyPolicy
func (c *FakeClient) CreateFirewallExplicitProxyPolicy(obj *FirewallExplicitProxyPolicy) (id int, err error) {
	id = c.FirewallExplicitProxyPolicyCounter
	c.FirewallExplicitProxyPolicyCounter++
	c.FirewallExplicitProxyPolicys[id] = obj
	return
}

// Update a FirewallExplicitProxyPolicy
func (c *FakeClient) UpdateFirewallExplicitProxyPolicy(obj *FirewallExplicitProxyPolicy) (err error) {
	c.FirewallExplicitProxyPolicys[obj.Policyid] = obj
	return nil
}

// Delete a FirewallExplicitProxyPolicy by name
func (c *FakeClient) DeleteFirewallExplicitProxyPolicy(mkey int) (err error) {
	delete(c.FirewallExplicitProxyPolicys, mkey)
	return nil
}

// Configure DNS translation.
type FirewallDnstranslation struct {

	// Destination IP.
	Dst string `json:"dst,omitempty"`

	// ID.
	Id int `json:"id,omitempty"`

	// Network mask.
	Netmask string `json:"netmask,omitempty"`

	// Source IP.
	Src string `json:"src,omitempty"`
}

// Returns the value that identifies a FirewallDnstranslation
func (x *FirewallDnstranslation) MKey() int {
	return x.Id
}

// The results of a Get or List operation
type FirewallDnstranslationResults struct {
	Results []*FirewallDnstranslation `json:"results"`
	Mkey    int                       `json:"mkey"`
	Result
}

// List all FirewallDnstranslations
func (c *WebClient) ListFirewallDnstranslations() (res []*FirewallDnstranslation, err error) {
	var results FirewallDnstranslationResults
	_, err = c.do(http.MethodGet, "firewall/dnstranslation", nil, nil, &results)
	if err != nil {
		return []*FirewallDnstranslation{}, fmt.Errorf("error listing FirewallDnstranslations: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallDnstranslation by name
func (c *WebClient) GetFirewallDnstranslation(mkey int) (res *FirewallDnstranslation, err error) {
	var results FirewallDnstranslationResults
	_, err = c.do(http.MethodGet, "firewall/dnstranslation/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallDnstranslation{}, fmt.Errorf("error getting FirewallDnstranslation '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallDnstranslation
func (c *WebClient) CreateFirewallDnstranslation(obj *FirewallDnstranslation) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/dnstranslation", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallDnstranslation '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return
}

// Update a FirewallDnstranslation
func (c *WebClient) UpdateFirewallDnstranslation(obj *FirewallDnstranslation) error {
	_, err := c.do(http.MethodPut, "firewall/dnstranslation/"+strconv.Itoa(obj.Id), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallDnstranslation '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return err
}

// Delete a FirewallDnstranslation by name
func (c *WebClient) DeleteFirewallDnstranslation(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/dnstranslation/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallDnstranslation '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallDnstranslations
func (c *FakeClient) ListFirewallDnstranslations() (res []*FirewallDnstranslation, err error) {
	for _, r := range c.FirewallDnstranslations {
		res = append(res, r)
	}
	return
}

// Get a FirewallDnstranslation by name
func (c *FakeClient) GetFirewallDnstranslation(mkey int) (*FirewallDnstranslation, error) {
	if res, ok := c.FirewallDnstranslations[mkey]; ok {
		return res, nil
	} else {
		return &FirewallDnstranslation{}, fmt.Errorf("error getting FirewallDnstranslation '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallDnstranslation
func (c *FakeClient) CreateFirewallDnstranslation(obj *FirewallDnstranslation) (id int, err error) {
	id = c.FirewallDnstranslationCounter
	c.FirewallDnstranslationCounter++
	c.FirewallDnstranslations[id] = obj
	return
}

// Update a FirewallDnstranslation
func (c *FakeClient) UpdateFirewallDnstranslation(obj *FirewallDnstranslation) (err error) {
	c.FirewallDnstranslations[obj.Id] = obj
	return nil
}

// Delete a FirewallDnstranslation by name
func (c *FakeClient) DeleteFirewallDnstranslation(mkey int) (err error) {
	delete(c.FirewallDnstranslations, mkey)
	return nil
}

// Policy action.
type FirewallMulticastPolicyAction string

// Enable/disable policy traffic ASIC offloading.
type FirewallMulticastPolicyAutoAsicOffload string

// Destination address name.
type FirewallMulticastPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy log traffic.
type FirewallMulticastPolicyLogtraffic string

// Enable/disable NAT source address.
type FirewallMulticastPolicySnat string

// Source address name.
type FirewallMulticastPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallMulticastPolicyStatus string

const (
	// Action accept.
	FirewallMulticastPolicyActionAccept FirewallMulticastPolicyAction = "accept"

	// Action deny.
	FirewallMulticastPolicyActionDeny FirewallMulticastPolicyAction = "deny"
)

const (
	// Enable auto ASIC offloading.
	FirewallMulticastPolicyAutoAsicOffloadEnable FirewallMulticastPolicyAutoAsicOffload = "enable"

	// Disable ASIC offloading.
	FirewallMulticastPolicyAutoAsicOffloadDisable FirewallMulticastPolicyAutoAsicOffload = "disable"
)

const (
	// Enable setting.
	FirewallMulticastPolicyLogtrafficEnable FirewallMulticastPolicyLogtraffic = "enable"

	// Disable setting.
	FirewallMulticastPolicyLogtrafficDisable FirewallMulticastPolicyLogtraffic = "disable"
)

const (
	// Enable setting.
	FirewallMulticastPolicySnatEnable FirewallMulticastPolicySnat = "enable"

	// Disable setting.
	FirewallMulticastPolicySnatDisable FirewallMulticastPolicySnat = "disable"
)

const (
	// Enable setting.
	FirewallMulticastPolicyStatusEnable FirewallMulticastPolicyStatus = "enable"

	// Disable setting.
	FirewallMulticastPolicyStatusDisable FirewallMulticastPolicyStatus = "disable"
)

// Configure multicast NAT policies.
type FirewallMulticastPolicy struct {

	// Policy action.
	Action FirewallMulticastPolicyAction `json:"action,omitempty"`

	// Enable/disable policy traffic ASIC offloading.
	AutoAsicOffload FirewallMulticastPolicyAutoAsicOffload `json:"auto-asic-offload,omitempty"`

	// NAT destination address.
	Dnat string `json:"dnat,omitempty"`

	// Destination address name.
	Dstaddr []FirewallMulticastPolicyDstaddr `json:"dstaddr,omitempty"`

	// Destination interface name.
	Dstintf string `json:"dstintf,omitempty"`

	// End port number.
	EndPort int `json:"end-port,omitempty"`

	// Policy ID.
	Id int `json:"id,omitempty"`

	// Enable/disable policy log traffic.
	Logtraffic FirewallMulticastPolicyLogtraffic `json:"logtraffic,omitempty"`

	// Protocol number.
	Protocol int `json:"protocol,omitempty"`

	// Enable/disable NAT source address.
	Snat FirewallMulticastPolicySnat `json:"snat,omitempty"`

	// NAT source address.
	SnatIp string `json:"snat-ip,omitempty"`

	// Source address name.
	Srcaddr []FirewallMulticastPolicySrcaddr `json:"srcaddr,omitempty"`

	// Source interface name.
	Srcintf string `json:"srcintf,omitempty"`

	// Start port number.
	StartPort int `json:"start-port,omitempty"`

	// Enable/disable policy status.
	Status FirewallMulticastPolicyStatus `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallMulticastPolicy
func (x *FirewallMulticastPolicy) MKey() int {
	return x.Id
}

// The results of a Get or List operation
type FirewallMulticastPolicyResults struct {
	Results []*FirewallMulticastPolicy `json:"results"`
	Mkey    int                        `json:"mkey"`
	Result
}

// List all FirewallMulticastPolicys
func (c *WebClient) ListFirewallMulticastPolicys() (res []*FirewallMulticastPolicy, err error) {
	var results FirewallMulticastPolicyResults
	_, err = c.do(http.MethodGet, "firewall/multicast-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallMulticastPolicy{}, fmt.Errorf("error listing FirewallMulticastPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallMulticastPolicy by name
func (c *WebClient) GetFirewallMulticastPolicy(mkey int) (res *FirewallMulticastPolicy, err error) {
	var results FirewallMulticastPolicyResults
	_, err = c.do(http.MethodGet, "firewall/multicast-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallMulticastPolicy{}, fmt.Errorf("error getting FirewallMulticastPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallMulticastPolicy
func (c *WebClient) CreateFirewallMulticastPolicy(obj *FirewallMulticastPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/multicast-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallMulticastPolicy '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return
}

// Update a FirewallMulticastPolicy
func (c *WebClient) UpdateFirewallMulticastPolicy(obj *FirewallMulticastPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/multicast-policy/"+strconv.Itoa(obj.Id), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallMulticastPolicy '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return err
}

// Delete a FirewallMulticastPolicy by name
func (c *WebClient) DeleteFirewallMulticastPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/multicast-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallMulticastPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallMulticastPolicys
func (c *FakeClient) ListFirewallMulticastPolicys() (res []*FirewallMulticastPolicy, err error) {
	for _, r := range c.FirewallMulticastPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallMulticastPolicy by name
func (c *FakeClient) GetFirewallMulticastPolicy(mkey int) (*FirewallMulticastPolicy, error) {
	if res, ok := c.FirewallMulticastPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallMulticastPolicy{}, fmt.Errorf("error getting FirewallMulticastPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallMulticastPolicy
func (c *FakeClient) CreateFirewallMulticastPolicy(obj *FirewallMulticastPolicy) (id int, err error) {
	id = c.FirewallMulticastPolicyCounter
	c.FirewallMulticastPolicyCounter++
	c.FirewallMulticastPolicys[id] = obj
	return
}

// Update a FirewallMulticastPolicy
func (c *FakeClient) UpdateFirewallMulticastPolicy(obj *FirewallMulticastPolicy) (err error) {
	c.FirewallMulticastPolicys[obj.Id] = obj
	return nil
}

// Delete a FirewallMulticastPolicy by name
func (c *FakeClient) DeleteFirewallMulticastPolicy(mkey int) (err error) {
	delete(c.FirewallMulticastPolicys, mkey)
	return nil
}

// Policy action.
type FirewallMulticastPolicy6Action string

// Enable/disable policy traffic ASIC offloading.
type FirewallMulticastPolicy6AutoAsicOffload string

// IPv6 destination address name.
type FirewallMulticastPolicy6Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable multicast IPv6 policy log traffic.
type FirewallMulticastPolicy6Logtraffic string

// IPv6 source address name.
type FirewallMulticastPolicy6Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable multicast IPv6 policy status.
type FirewallMulticastPolicy6Status string

const (
	// Action accept.
	FirewallMulticastPolicy6ActionAccept FirewallMulticastPolicy6Action = "accept"

	// Action deny.
	FirewallMulticastPolicy6ActionDeny FirewallMulticastPolicy6Action = "deny"
)

const (
	// Enable auto ASIC offloading.
	FirewallMulticastPolicy6AutoAsicOffloadEnable FirewallMulticastPolicy6AutoAsicOffload = "enable"

	// Disable ASIC offloading.
	FirewallMulticastPolicy6AutoAsicOffloadDisable FirewallMulticastPolicy6AutoAsicOffload = "disable"
)

const (
	// Enable setting.
	FirewallMulticastPolicy6LogtrafficEnable FirewallMulticastPolicy6Logtraffic = "enable"

	// Disable setting.
	FirewallMulticastPolicy6LogtrafficDisable FirewallMulticastPolicy6Logtraffic = "disable"
)

const (
	// Enable setting.
	FirewallMulticastPolicy6StatusEnable FirewallMulticastPolicy6Status = "enable"

	// Disable setting.
	FirewallMulticastPolicy6StatusDisable FirewallMulticastPolicy6Status = "disable"
)

// Configure IPv6 multicast NAT policies.
type FirewallMulticastPolicy6 struct {

	// Policy action.
	Action FirewallMulticastPolicy6Action `json:"action,omitempty"`

	// Enable/disable policy traffic ASIC offloading.
	AutoAsicOffload FirewallMulticastPolicy6AutoAsicOffload `json:"auto-asic-offload,omitempty"`

	// IPv6 destination address name.
	Dstaddr []FirewallMulticastPolicy6Dstaddr `json:"dstaddr,omitempty"`

	// IPv6 destination interface name.
	Dstintf string `json:"dstintf,omitempty"`

	// End port number.
	EndPort int `json:"end-port,omitempty"`

	// Policy ID.
	Id int `json:"id,omitempty"`

	// Enable/disable multicast IPv6 policy log traffic.
	Logtraffic FirewallMulticastPolicy6Logtraffic `json:"logtraffic,omitempty"`

	// Protocol number.
	Protocol int `json:"protocol,omitempty"`

	// IPv6 source address name.
	Srcaddr []FirewallMulticastPolicy6Srcaddr `json:"srcaddr,omitempty"`

	// IPv6 source interface name.
	Srcintf string `json:"srcintf,omitempty"`

	// Start port number.
	StartPort int `json:"start-port,omitempty"`

	// Enable/disable multicast IPv6 policy status.
	Status FirewallMulticastPolicy6Status `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallMulticastPolicy6
func (x *FirewallMulticastPolicy6) MKey() int {
	return x.Id
}

// The results of a Get or List operation
type FirewallMulticastPolicy6Results struct {
	Results []*FirewallMulticastPolicy6 `json:"results"`
	Mkey    int                         `json:"mkey"`
	Result
}

// List all FirewallMulticastPolicy6s
func (c *WebClient) ListFirewallMulticastPolicy6s() (res []*FirewallMulticastPolicy6, err error) {
	var results FirewallMulticastPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/multicast-policy6", nil, nil, &results)
	if err != nil {
		return []*FirewallMulticastPolicy6{}, fmt.Errorf("error listing FirewallMulticastPolicy6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallMulticastPolicy6 by name
func (c *WebClient) GetFirewallMulticastPolicy6(mkey int) (res *FirewallMulticastPolicy6, err error) {
	var results FirewallMulticastPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/multicast-policy6/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallMulticastPolicy6{}, fmt.Errorf("error getting FirewallMulticastPolicy6 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallMulticastPolicy6
func (c *WebClient) CreateFirewallMulticastPolicy6(obj *FirewallMulticastPolicy6) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/multicast-policy6", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallMulticastPolicy6 '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return
}

// Update a FirewallMulticastPolicy6
func (c *WebClient) UpdateFirewallMulticastPolicy6(obj *FirewallMulticastPolicy6) error {
	_, err := c.do(http.MethodPut, "firewall/multicast-policy6/"+strconv.Itoa(obj.Id), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallMulticastPolicy6 '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return err
}

// Delete a FirewallMulticastPolicy6 by name
func (c *WebClient) DeleteFirewallMulticastPolicy6(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/multicast-policy6/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallMulticastPolicy6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallMulticastPolicy6s
func (c *FakeClient) ListFirewallMulticastPolicy6s() (res []*FirewallMulticastPolicy6, err error) {
	for _, r := range c.FirewallMulticastPolicy6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallMulticastPolicy6 by name
func (c *FakeClient) GetFirewallMulticastPolicy6(mkey int) (*FirewallMulticastPolicy6, error) {
	if res, ok := c.FirewallMulticastPolicy6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallMulticastPolicy6{}, fmt.Errorf("error getting FirewallMulticastPolicy6 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallMulticastPolicy6
func (c *FakeClient) CreateFirewallMulticastPolicy6(obj *FirewallMulticastPolicy6) (id int, err error) {
	id = c.FirewallMulticastPolicy6Counter
	c.FirewallMulticastPolicy6Counter++
	c.FirewallMulticastPolicy6s[id] = obj
	return
}

// Update a FirewallMulticastPolicy6
func (c *FakeClient) UpdateFirewallMulticastPolicy6(obj *FirewallMulticastPolicy6) (err error) {
	c.FirewallMulticastPolicy6s[obj.Id] = obj
	return nil
}

// Delete a FirewallMulticastPolicy6 by name
func (c *FakeClient) DeleteFirewallMulticastPolicy6(mkey int) (err error) {
	delete(c.FirewallMulticastPolicy6s, mkey)
	return nil
}

// Policy address type.
type FirewallInterfacePolicyAddressType string

// Enable/disable application control.
type FirewallInterfacePolicyApplicationListStatus string

// Enable/disable antivirus.
type FirewallInterfacePolicyAvProfileStatus string

// Enable/disable CASI.
type FirewallInterfacePolicyCasiProfileStatus string

// Enable/disable DLP sensor.
type FirewallInterfacePolicyDlpSensorStatus string

// Enable/disable DSRI.
type FirewallInterfacePolicyDsri string

// Destination address name.
type FirewallInterfacePolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable IPS sensor.
type FirewallInterfacePolicyIpsSensorStatus string

// Enable/disable interface log traffic.
type FirewallInterfacePolicyLogtraffic string

// Enable/disable scanning of connections to Botnet servers.
type FirewallInterfacePolicyScanBotnetConnections string

// Service name.
type FirewallInterfacePolicyService struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable spam filter.
type FirewallInterfacePolicySpamfilterProfileStatus string

// Source address name.
type FirewallInterfacePolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallInterfacePolicyStatus string

// Enable/disable web filter profile.
type FirewallInterfacePolicyWebfilterProfileStatus string

const (
	// IPv4
	FirewallInterfacePolicyAddressTypeIpv4 FirewallInterfacePolicyAddressType = "ipv4"

	// IPv6
	FirewallInterfacePolicyAddressTypeIpv6 FirewallInterfacePolicyAddressType = "ipv6"
)

const (
	// Enable setting.
	FirewallInterfacePolicyApplicationListStatusEnable FirewallInterfacePolicyApplicationListStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicyApplicationListStatusDisable FirewallInterfacePolicyApplicationListStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicyAvProfileStatusEnable FirewallInterfacePolicyAvProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicyAvProfileStatusDisable FirewallInterfacePolicyAvProfileStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicyCasiProfileStatusEnable FirewallInterfacePolicyCasiProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicyCasiProfileStatusDisable FirewallInterfacePolicyCasiProfileStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicyDlpSensorStatusEnable FirewallInterfacePolicyDlpSensorStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicyDlpSensorStatusDisable FirewallInterfacePolicyDlpSensorStatus = "disable"
)

const (
	// Enable DSRI.
	FirewallInterfacePolicyDsriEnable FirewallInterfacePolicyDsri = "enable"

	// Disable DSRI.
	FirewallInterfacePolicyDsriDisable FirewallInterfacePolicyDsri = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicyIpsSensorStatusEnable FirewallInterfacePolicyIpsSensorStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicyIpsSensorStatusDisable FirewallInterfacePolicyIpsSensorStatus = "disable"
)

const (
	// Log all sessions.
	FirewallInterfacePolicyLogtrafficAll FirewallInterfacePolicyLogtraffic = "all"

	// UTM event and matched application traffic log.
	FirewallInterfacePolicyLogtrafficUtm FirewallInterfacePolicyLogtraffic = "utm"

	// Disable traffic and application log.
	FirewallInterfacePolicyLogtrafficDisable FirewallInterfacePolicyLogtraffic = "disable"
)

const (
	// Do not scan connections to botnet servers.
	FirewallInterfacePolicyScanBotnetConnectionsDisable FirewallInterfacePolicyScanBotnetConnections = "disable"

	// Block connections to botnet servers.
	FirewallInterfacePolicyScanBotnetConnectionsBlock FirewallInterfacePolicyScanBotnetConnections = "block"

	// Log connections to botnet servers.
	FirewallInterfacePolicyScanBotnetConnectionsMonitor FirewallInterfacePolicyScanBotnetConnections = "monitor"
)

const (
	// Enable setting.
	FirewallInterfacePolicySpamfilterProfileStatusEnable FirewallInterfacePolicySpamfilterProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicySpamfilterProfileStatusDisable FirewallInterfacePolicySpamfilterProfileStatus = "disable"
)

const (
	// Enable policy status.
	FirewallInterfacePolicyStatusEnable FirewallInterfacePolicyStatus = "enable"

	// Disable policy status.
	FirewallInterfacePolicyStatusDisable FirewallInterfacePolicyStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicyWebfilterProfileStatusEnable FirewallInterfacePolicyWebfilterProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicyWebfilterProfileStatusDisable FirewallInterfacePolicyWebfilterProfileStatus = "disable"
)

// Configure IPv4 interface policies.
type FirewallInterfacePolicy struct {

	// Policy address type.
	AddressType FirewallInterfacePolicyAddressType `json:"address-type,omitempty"`

	// Application list name.
	ApplicationList string `json:"application-list,omitempty"`

	// Enable/disable application control.
	ApplicationListStatus FirewallInterfacePolicyApplicationListStatus `json:"application-list-status,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// Enable/disable antivirus.
	AvProfileStatus FirewallInterfacePolicyAvProfileStatus `json:"av-profile-status,omitempty"`

	// CASI profile name.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Enable/disable CASI.
	CasiProfileStatus FirewallInterfacePolicyCasiProfileStatus `json:"casi-profile-status,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Enable/disable DLP sensor.
	DlpSensorStatus FirewallInterfacePolicyDlpSensorStatus `json:"dlp-sensor-status,omitempty"`

	// Enable/disable DSRI.
	Dsri FirewallInterfacePolicyDsri `json:"dsri,omitempty"`

	// Destination address name.
	Dstaddr []FirewallInterfacePolicyDstaddr `json:"dstaddr,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// IPS sensor name.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Enable/disable IPS sensor.
	IpsSensorStatus FirewallInterfacePolicyIpsSensorStatus `json:"ips-sensor-status,omitempty"`

	// Label.
	Label string `json:"label,omitempty"`

	// Enable/disable interface log traffic.
	Logtraffic FirewallInterfacePolicyLogtraffic `json:"logtraffic,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Enable/disable scanning of connections to Botnet servers.
	ScanBotnetConnections FirewallInterfacePolicyScanBotnetConnections `json:"scan-botnet-connections,omitempty"`

	// Service name.
	Service []FirewallInterfacePolicyService `json:"service,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Enable/disable spam filter.
	SpamfilterProfileStatus FirewallInterfacePolicySpamfilterProfileStatus `json:"spamfilter-profile-status,omitempty"`

	// Source address name.
	Srcaddr []FirewallInterfacePolicySrcaddr `json:"srcaddr,omitempty"`

	// Enable/disable policy status.
	Status FirewallInterfacePolicyStatus `json:"status,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`

	// Enable/disable web filter profile.
	WebfilterProfileStatus FirewallInterfacePolicyWebfilterProfileStatus `json:"webfilter-profile-status,omitempty"`
}

// Returns the value that identifies a FirewallInterfacePolicy
func (x *FirewallInterfacePolicy) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallInterfacePolicyResults struct {
	Results []*FirewallInterfacePolicy `json:"results"`
	Mkey    int                        `json:"mkey"`
	Result
}

// List all FirewallInterfacePolicys
func (c *WebClient) ListFirewallInterfacePolicys() (res []*FirewallInterfacePolicy, err error) {
	var results FirewallInterfacePolicyResults
	_, err = c.do(http.MethodGet, "firewall/interface-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallInterfacePolicy{}, fmt.Errorf("error listing FirewallInterfacePolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallInterfacePolicy by name
func (c *WebClient) GetFirewallInterfacePolicy(mkey int) (res *FirewallInterfacePolicy, err error) {
	var results FirewallInterfacePolicyResults
	_, err = c.do(http.MethodGet, "firewall/interface-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallInterfacePolicy{}, fmt.Errorf("error getting FirewallInterfacePolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallInterfacePolicy
func (c *WebClient) CreateFirewallInterfacePolicy(obj *FirewallInterfacePolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/interface-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallInterfacePolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallInterfacePolicy
func (c *WebClient) UpdateFirewallInterfacePolicy(obj *FirewallInterfacePolicy) error {
	_, err := c.do(http.MethodPut, "firewall/interface-policy/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallInterfacePolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallInterfacePolicy by name
func (c *WebClient) DeleteFirewallInterfacePolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/interface-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallInterfacePolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallInterfacePolicys
func (c *FakeClient) ListFirewallInterfacePolicys() (res []*FirewallInterfacePolicy, err error) {
	for _, r := range c.FirewallInterfacePolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallInterfacePolicy by name
func (c *FakeClient) GetFirewallInterfacePolicy(mkey int) (*FirewallInterfacePolicy, error) {
	if res, ok := c.FirewallInterfacePolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallInterfacePolicy{}, fmt.Errorf("error getting FirewallInterfacePolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallInterfacePolicy
func (c *FakeClient) CreateFirewallInterfacePolicy(obj *FirewallInterfacePolicy) (id int, err error) {
	id = c.FirewallInterfacePolicyCounter
	c.FirewallInterfacePolicyCounter++
	c.FirewallInterfacePolicys[id] = obj
	return
}

// Update a FirewallInterfacePolicy
func (c *FakeClient) UpdateFirewallInterfacePolicy(obj *FirewallInterfacePolicy) (err error) {
	c.FirewallInterfacePolicys[obj.Policyid] = obj
	return nil
}

// Delete a FirewallInterfacePolicy by name
func (c *FakeClient) DeleteFirewallInterfacePolicy(mkey int) (err error) {
	delete(c.FirewallInterfacePolicys, mkey)
	return nil
}

// Policy address type.
type FirewallInterfacePolicy6AddressType string

// Enable/disable application control.
type FirewallInterfacePolicy6ApplicationListStatus string

// Enable/disable antivirus.
type FirewallInterfacePolicy6AvProfileStatus string

// Enable/disable CASI.
type FirewallInterfacePolicy6CasiProfileStatus string

// Enable/disable DLP sensor.
type FirewallInterfacePolicy6DlpSensorStatus string

// Enable/disable DSRI.
type FirewallInterfacePolicy6Dsri string

// IPv6 destination address name.
type FirewallInterfacePolicy6Dstaddr6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable IPS sensor.
type FirewallInterfacePolicy6IpsSensorStatus string

// Enable/disable interface log traffic.
type FirewallInterfacePolicy6Logtraffic string

// Enable/disable scanning of connections to Botnet servers.
type FirewallInterfacePolicy6ScanBotnetConnections string

// Service name.
type FirewallInterfacePolicy6Service6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable spam filter.
type FirewallInterfacePolicy6SpamfilterProfileStatus string

// IPv6 source address name.
type FirewallInterfacePolicy6Srcaddr6 struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallInterfacePolicy6Status string

// Enable/disable web filter profile.
type FirewallInterfacePolicy6WebfilterProfileStatus string

const (
	// IPv4
	FirewallInterfacePolicy6AddressTypeIpv4 FirewallInterfacePolicy6AddressType = "ipv4"

	// IPv6
	FirewallInterfacePolicy6AddressTypeIpv6 FirewallInterfacePolicy6AddressType = "ipv6"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6ApplicationListStatusEnable FirewallInterfacePolicy6ApplicationListStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6ApplicationListStatusDisable FirewallInterfacePolicy6ApplicationListStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6AvProfileStatusEnable FirewallInterfacePolicy6AvProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6AvProfileStatusDisable FirewallInterfacePolicy6AvProfileStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6CasiProfileStatusEnable FirewallInterfacePolicy6CasiProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6CasiProfileStatusDisable FirewallInterfacePolicy6CasiProfileStatus = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6DlpSensorStatusEnable FirewallInterfacePolicy6DlpSensorStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6DlpSensorStatusDisable FirewallInterfacePolicy6DlpSensorStatus = "disable"
)

const (
	// Enable DSRI.
	FirewallInterfacePolicy6DsriEnable FirewallInterfacePolicy6Dsri = "enable"

	// Disable DSRI.
	FirewallInterfacePolicy6DsriDisable FirewallInterfacePolicy6Dsri = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6IpsSensorStatusEnable FirewallInterfacePolicy6IpsSensorStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6IpsSensorStatusDisable FirewallInterfacePolicy6IpsSensorStatus = "disable"
)

const (
	// Log all sessions.
	FirewallInterfacePolicy6LogtrafficAll FirewallInterfacePolicy6Logtraffic = "all"

	// UTM event and matched application traffic log.
	FirewallInterfacePolicy6LogtrafficUtm FirewallInterfacePolicy6Logtraffic = "utm"

	// Disable traffic and application log.
	FirewallInterfacePolicy6LogtrafficDisable FirewallInterfacePolicy6Logtraffic = "disable"
)

const (
	// Do not scan connections to botnet servers.
	FirewallInterfacePolicy6ScanBotnetConnectionsDisable FirewallInterfacePolicy6ScanBotnetConnections = "disable"

	// Block connections to botnet servers.
	FirewallInterfacePolicy6ScanBotnetConnectionsBlock FirewallInterfacePolicy6ScanBotnetConnections = "block"

	// Log connections to botnet servers.
	FirewallInterfacePolicy6ScanBotnetConnectionsMonitor FirewallInterfacePolicy6ScanBotnetConnections = "monitor"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6SpamfilterProfileStatusEnable FirewallInterfacePolicy6SpamfilterProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6SpamfilterProfileStatusDisable FirewallInterfacePolicy6SpamfilterProfileStatus = "disable"
)

const (
	// Enable policy status.
	FirewallInterfacePolicy6StatusEnable FirewallInterfacePolicy6Status = "enable"

	// Disable policy status.
	FirewallInterfacePolicy6StatusDisable FirewallInterfacePolicy6Status = "disable"
)

const (
	// Enable setting.
	FirewallInterfacePolicy6WebfilterProfileStatusEnable FirewallInterfacePolicy6WebfilterProfileStatus = "enable"

	// Disable setting.
	FirewallInterfacePolicy6WebfilterProfileStatusDisable FirewallInterfacePolicy6WebfilterProfileStatus = "disable"
)

// Configure IPv6 interface policies.
type FirewallInterfacePolicy6 struct {

	// Policy address type.
	AddressType FirewallInterfacePolicy6AddressType `json:"address-type,omitempty"`

	// Application list name.
	ApplicationList string `json:"application-list,omitempty"`

	// Enable/disable application control.
	ApplicationListStatus FirewallInterfacePolicy6ApplicationListStatus `json:"application-list-status,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// Enable/disable antivirus.
	AvProfileStatus FirewallInterfacePolicy6AvProfileStatus `json:"av-profile-status,omitempty"`

	// CASI profile name.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Enable/disable CASI.
	CasiProfileStatus FirewallInterfacePolicy6CasiProfileStatus `json:"casi-profile-status,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Enable/disable DLP sensor.
	DlpSensorStatus FirewallInterfacePolicy6DlpSensorStatus `json:"dlp-sensor-status,omitempty"`

	// Enable/disable DSRI.
	Dsri FirewallInterfacePolicy6Dsri `json:"dsri,omitempty"`

	// IPv6 destination address name.
	Dstaddr6 []FirewallInterfacePolicy6Dstaddr6 `json:"dstaddr6,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// IPS sensor name.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Enable/disable IPS sensor.
	IpsSensorStatus FirewallInterfacePolicy6IpsSensorStatus `json:"ips-sensor-status,omitempty"`

	// Label.
	Label string `json:"label,omitempty"`

	// Enable/disable interface log traffic.
	Logtraffic FirewallInterfacePolicy6Logtraffic `json:"logtraffic,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Enable/disable scanning of connections to Botnet servers.
	ScanBotnetConnections FirewallInterfacePolicy6ScanBotnetConnections `json:"scan-botnet-connections,omitempty"`

	// Service name.
	Service6 []FirewallInterfacePolicy6Service6 `json:"service6,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Enable/disable spam filter.
	SpamfilterProfileStatus FirewallInterfacePolicy6SpamfilterProfileStatus `json:"spamfilter-profile-status,omitempty"`

	// IPv6 source address name.
	Srcaddr6 []FirewallInterfacePolicy6Srcaddr6 `json:"srcaddr6,omitempty"`

	// Enable/disable policy status.
	Status FirewallInterfacePolicy6Status `json:"status,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`

	// Enable/disable web filter profile.
	WebfilterProfileStatus FirewallInterfacePolicy6WebfilterProfileStatus `json:"webfilter-profile-status,omitempty"`
}

// Returns the value that identifies a FirewallInterfacePolicy6
func (x *FirewallInterfacePolicy6) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallInterfacePolicy6Results struct {
	Results []*FirewallInterfacePolicy6 `json:"results"`
	Mkey    int                         `json:"mkey"`
	Result
}

// List all FirewallInterfacePolicy6s
func (c *WebClient) ListFirewallInterfacePolicy6s() (res []*FirewallInterfacePolicy6, err error) {
	var results FirewallInterfacePolicy6Results
	_, err = c.do(http.MethodGet, "firewall/interface-policy6", nil, nil, &results)
	if err != nil {
		return []*FirewallInterfacePolicy6{}, fmt.Errorf("error listing FirewallInterfacePolicy6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallInterfacePolicy6 by name
func (c *WebClient) GetFirewallInterfacePolicy6(mkey int) (res *FirewallInterfacePolicy6, err error) {
	var results FirewallInterfacePolicy6Results
	_, err = c.do(http.MethodGet, "firewall/interface-policy6/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallInterfacePolicy6{}, fmt.Errorf("error getting FirewallInterfacePolicy6 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallInterfacePolicy6
func (c *WebClient) CreateFirewallInterfacePolicy6(obj *FirewallInterfacePolicy6) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/interface-policy6", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallInterfacePolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallInterfacePolicy6
func (c *WebClient) UpdateFirewallInterfacePolicy6(obj *FirewallInterfacePolicy6) error {
	_, err := c.do(http.MethodPut, "firewall/interface-policy6/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallInterfacePolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallInterfacePolicy6 by name
func (c *WebClient) DeleteFirewallInterfacePolicy6(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/interface-policy6/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallInterfacePolicy6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallInterfacePolicy6s
func (c *FakeClient) ListFirewallInterfacePolicy6s() (res []*FirewallInterfacePolicy6, err error) {
	for _, r := range c.FirewallInterfacePolicy6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallInterfacePolicy6 by name
func (c *FakeClient) GetFirewallInterfacePolicy6(mkey int) (*FirewallInterfacePolicy6, error) {
	if res, ok := c.FirewallInterfacePolicy6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallInterfacePolicy6{}, fmt.Errorf("error getting FirewallInterfacePolicy6 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallInterfacePolicy6
func (c *FakeClient) CreateFirewallInterfacePolicy6(obj *FirewallInterfacePolicy6) (id int, err error) {
	id = c.FirewallInterfacePolicy6Counter
	c.FirewallInterfacePolicy6Counter++
	c.FirewallInterfacePolicy6s[id] = obj
	return
}

// Update a FirewallInterfacePolicy6
func (c *FakeClient) UpdateFirewallInterfacePolicy6(obj *FirewallInterfacePolicy6) (err error) {
	c.FirewallInterfacePolicy6s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallInterfacePolicy6 by name
func (c *FakeClient) DeleteFirewallInterfacePolicy6(mkey int) (err error) {
	delete(c.FirewallInterfacePolicy6s, mkey)
	return nil
}

// Anomaly.
type FirewallDoSPolicyAnomaly struct {

	// Anomaly action.
	Action string `json:"action,omitempty"`

	// Enable/disable anomaly logging status.
	Log string `json:"log,omitempty"`

	// Anomaly name.
	Name string `json:"name,omitempty"`

	// Quarantine hosts to banned user list.
	Quarantine string `json:"quarantine,omitempty"`

	// Duration of quarantine.
	QuarantineExpiry string `json:"quarantine-expiry,omitempty"`

	// Enable/disable logging for quarantine.
	QuarantineLog string `json:"quarantine-log,omitempty"`

	// Enable/disable anomaly status.
	Status string `json:"status,omitempty"`

	// Anomaly threshold.
	Threshold int `json:"threshold,omitempty"`

	// Anomaly default threshold.
	Threshold_Default int `json:"threshold(default),omitempty"`
}

// Destination address name.
type FirewallDoSPolicyDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Service name.
type FirewallDoSPolicyService struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallDoSPolicySrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallDoSPolicyStatus string

const (
	// Enable policy status.
	FirewallDoSPolicyStatusEnable FirewallDoSPolicyStatus = "enable"

	// Disable policy status.
	FirewallDoSPolicyStatusDisable FirewallDoSPolicyStatus = "disable"
)

// Configure IPv4 DoS policies.
type FirewallDoSPolicy struct {

	// Anomaly.
	Anomaly []FirewallDoSPolicyAnomaly `json:"anomaly,omitempty"`

	// Destination address name.
	Dstaddr []FirewallDoSPolicyDstaddr `json:"dstaddr,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Service name.
	Service []FirewallDoSPolicyService `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallDoSPolicySrcaddr `json:"srcaddr,omitempty"`

	// Enable/disable policy status.
	Status FirewallDoSPolicyStatus `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallDoSPolicy
func (x *FirewallDoSPolicy) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallDoSPolicyResults struct {
	Results []*FirewallDoSPolicy `json:"results"`
	Mkey    int                  `json:"mkey"`
	Result
}

// List all FirewallDoSPolicys
func (c *WebClient) ListFirewallDoSPolicys() (res []*FirewallDoSPolicy, err error) {
	var results FirewallDoSPolicyResults
	_, err = c.do(http.MethodGet, "firewall/DoS-policy", nil, nil, &results)
	if err != nil {
		return []*FirewallDoSPolicy{}, fmt.Errorf("error listing FirewallDoSPolicys: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallDoSPolicy by name
func (c *WebClient) GetFirewallDoSPolicy(mkey int) (res *FirewallDoSPolicy, err error) {
	var results FirewallDoSPolicyResults
	_, err = c.do(http.MethodGet, "firewall/DoS-policy/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallDoSPolicy{}, fmt.Errorf("error getting FirewallDoSPolicy '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallDoSPolicy
func (c *WebClient) CreateFirewallDoSPolicy(obj *FirewallDoSPolicy) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/DoS-policy", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallDoSPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallDoSPolicy
func (c *WebClient) UpdateFirewallDoSPolicy(obj *FirewallDoSPolicy) error {
	_, err := c.do(http.MethodPut, "firewall/DoS-policy/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallDoSPolicy '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallDoSPolicy by name
func (c *WebClient) DeleteFirewallDoSPolicy(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/DoS-policy/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallDoSPolicy '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallDoSPolicys
func (c *FakeClient) ListFirewallDoSPolicys() (res []*FirewallDoSPolicy, err error) {
	for _, r := range c.FirewallDoSPolicys {
		res = append(res, r)
	}
	return
}

// Get a FirewallDoSPolicy by name
func (c *FakeClient) GetFirewallDoSPolicy(mkey int) (*FirewallDoSPolicy, error) {
	if res, ok := c.FirewallDoSPolicys[mkey]; ok {
		return res, nil
	} else {
		return &FirewallDoSPolicy{}, fmt.Errorf("error getting FirewallDoSPolicy '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallDoSPolicy
func (c *FakeClient) CreateFirewallDoSPolicy(obj *FirewallDoSPolicy) (id int, err error) {
	id = c.FirewallDoSPolicyCounter
	c.FirewallDoSPolicyCounter++
	c.FirewallDoSPolicys[id] = obj
	return
}

// Update a FirewallDoSPolicy
func (c *FakeClient) UpdateFirewallDoSPolicy(obj *FirewallDoSPolicy) (err error) {
	c.FirewallDoSPolicys[obj.Policyid] = obj
	return nil
}

// Delete a FirewallDoSPolicy by name
func (c *FakeClient) DeleteFirewallDoSPolicy(mkey int) (err error) {
	delete(c.FirewallDoSPolicys, mkey)
	return nil
}

// Anomaly.
type FirewallDoSPolicy6Anomaly struct {

	// Anomaly action.
	Action string `json:"action,omitempty"`

	// Enable/disable anomaly logging status.
	Log string `json:"log,omitempty"`

	// Anomaly name.
	Name string `json:"name,omitempty"`

	// Quarantine hosts to banned user list.
	Quarantine string `json:"quarantine,omitempty"`

	// Duration of quarantine.
	QuarantineExpiry string `json:"quarantine-expiry,omitempty"`

	// Enable/disable logging for quarantine.
	QuarantineLog string `json:"quarantine-log,omitempty"`

	// Enable/disable anomaly status.
	Status string `json:"status,omitempty"`

	// Anomaly threshold.
	Threshold int `json:"threshold,omitempty"`

	// Anomaly default threshold.
	Threshold_Default int `json:"threshold(default),omitempty"`
}

// Destination address name.
type FirewallDoSPolicy6Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Service name.
type FirewallDoSPolicy6Service struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallDoSPolicy6Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallDoSPolicy6Status string

const (
	// Enable policy status.
	FirewallDoSPolicy6StatusEnable FirewallDoSPolicy6Status = "enable"

	// Disable policy status.
	FirewallDoSPolicy6StatusDisable FirewallDoSPolicy6Status = "disable"
)

// Configure IPv6 DoS policies.
type FirewallDoSPolicy6 struct {

	// Anomaly.
	Anomaly []FirewallDoSPolicy6Anomaly `json:"anomaly,omitempty"`

	// Destination address name.
	Dstaddr []FirewallDoSPolicy6Dstaddr `json:"dstaddr,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Service name.
	Service []FirewallDoSPolicy6Service `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallDoSPolicy6Srcaddr `json:"srcaddr,omitempty"`

	// Enable/disable policy status.
	Status FirewallDoSPolicy6Status `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallDoSPolicy6
func (x *FirewallDoSPolicy6) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallDoSPolicy6Results struct {
	Results []*FirewallDoSPolicy6 `json:"results"`
	Mkey    int                   `json:"mkey"`
	Result
}

// List all FirewallDoSPolicy6s
func (c *WebClient) ListFirewallDoSPolicy6s() (res []*FirewallDoSPolicy6, err error) {
	var results FirewallDoSPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/DoS-policy6", nil, nil, &results)
	if err != nil {
		return []*FirewallDoSPolicy6{}, fmt.Errorf("error listing FirewallDoSPolicy6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallDoSPolicy6 by name
func (c *WebClient) GetFirewallDoSPolicy6(mkey int) (res *FirewallDoSPolicy6, err error) {
	var results FirewallDoSPolicy6Results
	_, err = c.do(http.MethodGet, "firewall/DoS-policy6/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallDoSPolicy6{}, fmt.Errorf("error getting FirewallDoSPolicy6 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallDoSPolicy6
func (c *WebClient) CreateFirewallDoSPolicy6(obj *FirewallDoSPolicy6) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/DoS-policy6", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallDoSPolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallDoSPolicy6
func (c *WebClient) UpdateFirewallDoSPolicy6(obj *FirewallDoSPolicy6) error {
	_, err := c.do(http.MethodPut, "firewall/DoS-policy6/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallDoSPolicy6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallDoSPolicy6 by name
func (c *WebClient) DeleteFirewallDoSPolicy6(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/DoS-policy6/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallDoSPolicy6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallDoSPolicy6s
func (c *FakeClient) ListFirewallDoSPolicy6s() (res []*FirewallDoSPolicy6, err error) {
	for _, r := range c.FirewallDoSPolicy6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallDoSPolicy6 by name
func (c *FakeClient) GetFirewallDoSPolicy6(mkey int) (*FirewallDoSPolicy6, error) {
	if res, ok := c.FirewallDoSPolicy6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallDoSPolicy6{}, fmt.Errorf("error getting FirewallDoSPolicy6 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallDoSPolicy6
func (c *FakeClient) CreateFirewallDoSPolicy6(obj *FirewallDoSPolicy6) (id int, err error) {
	id = c.FirewallDoSPolicy6Counter
	c.FirewallDoSPolicy6Counter++
	c.FirewallDoSPolicy6s[id] = obj
	return
}

// Update a FirewallDoSPolicy6
func (c *FakeClient) UpdateFirewallDoSPolicy6(obj *FirewallDoSPolicy6) (err error) {
	c.FirewallDoSPolicy6s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallDoSPolicy6 by name
func (c *FakeClient) DeleteFirewallDoSPolicy6(mkey int) (err error) {
	delete(c.FirewallDoSPolicy6s, mkey)
	return nil
}

// Configure anomaly.
type FirewallSnifferAnomaly struct {

	// Anomaly action.
	Action string `json:"action,omitempty"`

	// Enable/disable anomaly logging status.
	Log string `json:"log,omitempty"`

	// Anomaly name.
	Name string `json:"name,omitempty"`

	// Quarantine hosts to banned user list.
	Quarantine string `json:"quarantine,omitempty"`

	// Duration of quarantine.
	QuarantineExpiry string `json:"quarantine-expiry,omitempty"`

	// Enable/disable logging for quarantine.
	QuarantineLog string `json:"quarantine-log,omitempty"`

	// Enable/disable anomaly status.
	Status string `json:"status,omitempty"`

	// Anomaly threshold.
	Threshold int `json:"threshold,omitempty"`

	// Anomaly default threshold.
	Threshold_Default int `json:"threshold(default),omitempty"`
}

// Enable/disable application control.
type FirewallSnifferApplicationListStatus string

// Enable/disable antivirus.
type FirewallSnifferAvProfileStatus string

// Enable/disable CASI.
type FirewallSnifferCasiProfileStatus string

// Enable/disable DLP sensor.
type FirewallSnifferDlpSensorStatus string

// Enable/disable DSRI.
type FirewallSnifferDsri string

// Enable/disable IPS DoS anomaly detection.
type FirewallSnifferIpsDosStatus string

// Enable/disable IPS sensor.
type FirewallSnifferIpsSensorStatus string

// Enable/disable sniffer for IPv6 packets.
type FirewallSnifferIpv6 string

// Enable/disable sniffer log traffic.
type FirewallSnifferLogtraffic string

// Enable/disable sniffer for non-IP packets.
type FirewallSnifferNonIp string

// Enable/disable scanning of connections to Botnet servers.
type FirewallSnifferScanBotnetConnections string

// Enable/disable spam filter.
type FirewallSnifferSpamfilterProfileStatus string

// Enable/disable sniffer status.
type FirewallSnifferStatus string

// Enable/disable web filter.
type FirewallSnifferWebfilterProfileStatus string

const (
	// Enable setting.
	FirewallSnifferApplicationListStatusEnable FirewallSnifferApplicationListStatus = "enable"

	// Disable setting.
	FirewallSnifferApplicationListStatusDisable FirewallSnifferApplicationListStatus = "disable"
)

const (
	// Enable setting.
	FirewallSnifferAvProfileStatusEnable FirewallSnifferAvProfileStatus = "enable"

	// Disable setting.
	FirewallSnifferAvProfileStatusDisable FirewallSnifferAvProfileStatus = "disable"
)

const (
	// Enable setting.
	FirewallSnifferCasiProfileStatusEnable FirewallSnifferCasiProfileStatus = "enable"

	// Disable setting.
	FirewallSnifferCasiProfileStatusDisable FirewallSnifferCasiProfileStatus = "disable"
)

const (
	// Enable setting.
	FirewallSnifferDlpSensorStatusEnable FirewallSnifferDlpSensorStatus = "enable"

	// Disable setting.
	FirewallSnifferDlpSensorStatusDisable FirewallSnifferDlpSensorStatus = "disable"
)

const (
	// Enable DSRI.
	FirewallSnifferDsriEnable FirewallSnifferDsri = "enable"

	// Disable DSRI.
	FirewallSnifferDsriDisable FirewallSnifferDsri = "disable"
)

const (
	// Enable setting.
	FirewallSnifferIpsDosStatusEnable FirewallSnifferIpsDosStatus = "enable"

	// Disable setting.
	FirewallSnifferIpsDosStatusDisable FirewallSnifferIpsDosStatus = "disable"
)

const (
	// Enable setting.
	FirewallSnifferIpsSensorStatusEnable FirewallSnifferIpsSensorStatus = "enable"

	// Disable setting.
	FirewallSnifferIpsSensorStatusDisable FirewallSnifferIpsSensorStatus = "disable"
)

const (
	// Enable sniffer for IPv6 packets.
	FirewallSnifferIpv6Enable FirewallSnifferIpv6 = "enable"

	// Disable sniffer for IPv6 packets.
	FirewallSnifferIpv6Disable FirewallSnifferIpv6 = "disable"
)

const (
	// Log all sessions.
	FirewallSnifferLogtrafficAll FirewallSnifferLogtraffic = "all"

	// UTM event and matched application traffic log.
	FirewallSnifferLogtrafficUtm FirewallSnifferLogtraffic = "utm"

	// Disable traffic and application log.
	FirewallSnifferLogtrafficDisable FirewallSnifferLogtraffic = "disable"
)

const (
	// Enable sniffer for non-IP packets.
	FirewallSnifferNonIpEnable FirewallSnifferNonIp = "enable"

	// Disable sniffer for non-IP packets.
	FirewallSnifferNonIpDisable FirewallSnifferNonIp = "disable"
)

const (
	// Do not scan connections to botnet servers.
	FirewallSnifferScanBotnetConnectionsDisable FirewallSnifferScanBotnetConnections = "disable"

	// Block connections to botnet servers.
	FirewallSnifferScanBotnetConnectionsBlock FirewallSnifferScanBotnetConnections = "block"

	// Log connections to botnet servers.
	FirewallSnifferScanBotnetConnectionsMonitor FirewallSnifferScanBotnetConnections = "monitor"
)

const (
	// Enable setting.
	FirewallSnifferSpamfilterProfileStatusEnable FirewallSnifferSpamfilterProfileStatus = "enable"

	// Disable setting.
	FirewallSnifferSpamfilterProfileStatusDisable FirewallSnifferSpamfilterProfileStatus = "disable"
)

const (
	// Enable sniffer status.
	FirewallSnifferStatusEnable FirewallSnifferStatus = "enable"

	// Disable sniffer status.
	FirewallSnifferStatusDisable FirewallSnifferStatus = "disable"
)

const (
	// Enable setting.
	FirewallSnifferWebfilterProfileStatusEnable FirewallSnifferWebfilterProfileStatus = "enable"

	// Disable setting.
	FirewallSnifferWebfilterProfileStatusDisable FirewallSnifferWebfilterProfileStatus = "disable"
)

// Configure sniffer.
type FirewallSniffer struct {

	// Configure anomaly.
	Anomaly []FirewallSnifferAnomaly `json:"anomaly,omitempty"`

	// Application list name.
	ApplicationList string `json:"application-list,omitempty"`

	// Enable/disable application control.
	ApplicationListStatus FirewallSnifferApplicationListStatus `json:"application-list-status,omitempty"`

	// Antivirus profile.
	AvProfile string `json:"av-profile,omitempty"`

	// Enable/disable antivirus.
	AvProfileStatus FirewallSnifferAvProfileStatus `json:"av-profile-status,omitempty"`

	// CASI profile name.
	CasiProfile string `json:"casi-profile,omitempty"`

	// Enable/disable CASI.
	CasiProfileStatus FirewallSnifferCasiProfileStatus `json:"casi-profile-status,omitempty"`

	// DLP sensor.
	DlpSensor string `json:"dlp-sensor,omitempty"`

	// Enable/disable DLP sensor.
	DlpSensorStatus FirewallSnifferDlpSensorStatus `json:"dlp-sensor-status,omitempty"`

	// Enable/disable DSRI.
	Dsri FirewallSnifferDsri `json:"dsri,omitempty"`

	// Host list (IP or IP/mask or IP range).
	Host string `json:"host,omitempty"`

	// Sniffer ID.
	Id int `json:"id,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// Enable/disable IPS DoS anomaly detection.
	IpsDosStatus FirewallSnifferIpsDosStatus `json:"ips-dos-status,omitempty"`

	// IPS sensor name.
	IpsSensor string `json:"ips-sensor,omitempty"`

	// Enable/disable IPS sensor.
	IpsSensorStatus FirewallSnifferIpsSensorStatus `json:"ips-sensor-status,omitempty"`

	// Enable/disable sniffer for IPv6 packets.
	Ipv6 FirewallSnifferIpv6 `json:"ipv6,omitempty"`

	// Enable/disable sniffer log traffic.
	Logtraffic FirewallSnifferLogtraffic `json:"logtraffic,omitempty"`

	// Maximum packet count.
	MaxPacketCount int `json:"max-packet-count,omitempty"`

	// Enable/disable sniffer for non-IP packets.
	NonIp FirewallSnifferNonIp `json:"non-ip,omitempty"`

	// Port list.
	Port string `json:"port,omitempty"`

	// IP protocol list.
	Protocol string `json:"protocol,omitempty"`

	// Enable/disable scanning of connections to Botnet servers.
	ScanBotnetConnections FirewallSnifferScanBotnetConnections `json:"scan-botnet-connections,omitempty"`

	// Spam filter profile.
	SpamfilterProfile string `json:"spamfilter-profile,omitempty"`

	// Enable/disable spam filter.
	SpamfilterProfileStatus FirewallSnifferSpamfilterProfileStatus `json:"spamfilter-profile-status,omitempty"`

	// Enable/disable sniffer status.
	Status FirewallSnifferStatus `json:"status,omitempty"`

	// VLAN list.
	Vlan string `json:"vlan,omitempty"`

	// Web filter profile.
	WebfilterProfile string `json:"webfilter-profile,omitempty"`

	// Enable/disable web filter.
	WebfilterProfileStatus FirewallSnifferWebfilterProfileStatus `json:"webfilter-profile-status,omitempty"`
}

// Returns the value that identifies a FirewallSniffer
func (x *FirewallSniffer) MKey() int {
	return x.Id
}

// The results of a Get or List operation
type FirewallSnifferResults struct {
	Results []*FirewallSniffer `json:"results"`
	Mkey    int                `json:"mkey"`
	Result
}

// List all FirewallSniffers
func (c *WebClient) ListFirewallSniffers() (res []*FirewallSniffer, err error) {
	var results FirewallSnifferResults
	_, err = c.do(http.MethodGet, "firewall/sniffer", nil, nil, &results)
	if err != nil {
		return []*FirewallSniffer{}, fmt.Errorf("error listing FirewallSniffers: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallSniffer by name
func (c *WebClient) GetFirewallSniffer(mkey int) (res *FirewallSniffer, err error) {
	var results FirewallSnifferResults
	_, err = c.do(http.MethodGet, "firewall/sniffer/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallSniffer{}, fmt.Errorf("error getting FirewallSniffer '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallSniffer
func (c *WebClient) CreateFirewallSniffer(obj *FirewallSniffer) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/sniffer", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallSniffer '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return
}

// Update a FirewallSniffer
func (c *WebClient) UpdateFirewallSniffer(obj *FirewallSniffer) error {
	_, err := c.do(http.MethodPut, "firewall/sniffer/"+strconv.Itoa(obj.Id), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallSniffer '%s': %s", strconv.Itoa(obj.Id), err.Error())
	}
	return err
}

// Delete a FirewallSniffer by name
func (c *WebClient) DeleteFirewallSniffer(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/sniffer/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallSniffer '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallSniffers
func (c *FakeClient) ListFirewallSniffers() (res []*FirewallSniffer, err error) {
	for _, r := range c.FirewallSniffers {
		res = append(res, r)
	}
	return
}

// Get a FirewallSniffer by name
func (c *FakeClient) GetFirewallSniffer(mkey int) (*FirewallSniffer, error) {
	if res, ok := c.FirewallSniffers[mkey]; ok {
		return res, nil
	} else {
		return &FirewallSniffer{}, fmt.Errorf("error getting FirewallSniffer '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallSniffer
func (c *FakeClient) CreateFirewallSniffer(obj *FirewallSniffer) (id int, err error) {
	id = c.FirewallSnifferCounter
	c.FirewallSnifferCounter++
	c.FirewallSniffers[id] = obj
	return
}

// Update a FirewallSniffer
func (c *FakeClient) UpdateFirewallSniffer(obj *FirewallSniffer) (err error) {
	c.FirewallSniffers[obj.Id] = obj
	return nil
}

// Delete a FirewallSniffer by name
func (c *FakeClient) DeleteFirewallSniffer(mkey int) (err error) {
	delete(c.FirewallSniffers, mkey)
	return nil
}

// Destination address name.
type FirewallAclDstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Service name.
type FirewallAclService struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallAclSrcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable access control list status.
type FirewallAclStatus string

const (
	// Enable access control list status.
	FirewallAclStatusEnable FirewallAclStatus = "enable"

	// Disable access control list status.
	FirewallAclStatusDisable FirewallAclStatus = "disable"
)

// Configure IPv4 access control list.
type FirewallAcl struct {

	// Destination address name.
	Dstaddr []FirewallAclDstaddr `json:"dstaddr,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Service name.
	Service []FirewallAclService `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallAclSrcaddr `json:"srcaddr,omitempty"`

	// Enable/disable access control list status.
	Status FirewallAclStatus `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallAcl
func (x *FirewallAcl) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallAclResults struct {
	Results []*FirewallAcl `json:"results"`
	Mkey    int            `json:"mkey"`
	Result
}

// List all FirewallAcls
func (c *WebClient) ListFirewallAcls() (res []*FirewallAcl, err error) {
	var results FirewallAclResults
	_, err = c.do(http.MethodGet, "firewall/acl", nil, nil, &results)
	if err != nil {
		return []*FirewallAcl{}, fmt.Errorf("error listing FirewallAcls: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallAcl by name
func (c *WebClient) GetFirewallAcl(mkey int) (res *FirewallAcl, err error) {
	var results FirewallAclResults
	_, err = c.do(http.MethodGet, "firewall/acl/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallAcl{}, fmt.Errorf("error getting FirewallAcl '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallAcl
func (c *WebClient) CreateFirewallAcl(obj *FirewallAcl) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/acl", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallAcl '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallAcl
func (c *WebClient) UpdateFirewallAcl(obj *FirewallAcl) error {
	_, err := c.do(http.MethodPut, "firewall/acl/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallAcl '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallAcl by name
func (c *WebClient) DeleteFirewallAcl(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/acl/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallAcl '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallAcls
func (c *FakeClient) ListFirewallAcls() (res []*FirewallAcl, err error) {
	for _, r := range c.FirewallAcls {
		res = append(res, r)
	}
	return
}

// Get a FirewallAcl by name
func (c *FakeClient) GetFirewallAcl(mkey int) (*FirewallAcl, error) {
	if res, ok := c.FirewallAcls[mkey]; ok {
		return res, nil
	} else {
		return &FirewallAcl{}, fmt.Errorf("error getting FirewallAcl '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallAcl
func (c *FakeClient) CreateFirewallAcl(obj *FirewallAcl) (id int, err error) {
	id = c.FirewallAclCounter
	c.FirewallAclCounter++
	c.FirewallAcls[id] = obj
	return
}

// Update a FirewallAcl
func (c *FakeClient) UpdateFirewallAcl(obj *FirewallAcl) (err error) {
	c.FirewallAcls[obj.Policyid] = obj
	return nil
}

// Delete a FirewallAcl by name
func (c *FakeClient) DeleteFirewallAcl(mkey int) (err error) {
	delete(c.FirewallAcls, mkey)
	return nil
}

// Destination address name.
type FirewallAcl6Dstaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Service name.
type FirewallAcl6Service struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Source address name.
type FirewallAcl6Srcaddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable access control list status.
type FirewallAcl6Status string

const (
	// Enable access control list status.
	FirewallAcl6StatusEnable FirewallAcl6Status = "enable"

	// Disable access control list status.
	FirewallAcl6StatusDisable FirewallAcl6Status = "disable"
)

// Configure IPv6 access control list.
type FirewallAcl6 struct {

	// Destination address name.
	Dstaddr []FirewallAcl6Dstaddr `json:"dstaddr,omitempty"`

	// Interface name.
	Interface string `json:"interface,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Service name.
	Service []FirewallAcl6Service `json:"service,omitempty"`

	// Source address name.
	Srcaddr []FirewallAcl6Srcaddr `json:"srcaddr,omitempty"`

	// Enable/disable access control list status.
	Status FirewallAcl6Status `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallAcl6
func (x *FirewallAcl6) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallAcl6Results struct {
	Results []*FirewallAcl6 `json:"results"`
	Mkey    int             `json:"mkey"`
	Result
}

// List all FirewallAcl6s
func (c *WebClient) ListFirewallAcl6s() (res []*FirewallAcl6, err error) {
	var results FirewallAcl6Results
	_, err = c.do(http.MethodGet, "firewall/acl6", nil, nil, &results)
	if err != nil {
		return []*FirewallAcl6{}, fmt.Errorf("error listing FirewallAcl6s: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallAcl6 by name
func (c *WebClient) GetFirewallAcl6(mkey int) (res *FirewallAcl6, err error) {
	var results FirewallAcl6Results
	_, err = c.do(http.MethodGet, "firewall/acl6/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallAcl6{}, fmt.Errorf("error getting FirewallAcl6 '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallAcl6
func (c *WebClient) CreateFirewallAcl6(obj *FirewallAcl6) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/acl6", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallAcl6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallAcl6
func (c *WebClient) UpdateFirewallAcl6(obj *FirewallAcl6) error {
	_, err := c.do(http.MethodPut, "firewall/acl6/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallAcl6 '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallAcl6 by name
func (c *WebClient) DeleteFirewallAcl6(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/acl6/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallAcl6 '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallAcl6s
func (c *FakeClient) ListFirewallAcl6s() (res []*FirewallAcl6, err error) {
	for _, r := range c.FirewallAcl6s {
		res = append(res, r)
	}
	return
}

// Get a FirewallAcl6 by name
func (c *FakeClient) GetFirewallAcl6(mkey int) (*FirewallAcl6, error) {
	if res, ok := c.FirewallAcl6s[mkey]; ok {
		return res, nil
	} else {
		return &FirewallAcl6{}, fmt.Errorf("error getting FirewallAcl6 '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallAcl6
func (c *FakeClient) CreateFirewallAcl6(obj *FirewallAcl6) (id int, err error) {
	id = c.FirewallAcl6Counter
	c.FirewallAcl6Counter++
	c.FirewallAcl6s[id] = obj
	return
}

// Update a FirewallAcl6
func (c *FakeClient) UpdateFirewallAcl6(obj *FirewallAcl6) (err error) {
	c.FirewallAcl6s[obj.Policyid] = obj
	return nil
}

// Delete a FirewallAcl6 by name
func (c *FakeClient) DeleteFirewallAcl6(mkey int) (err error) {
	delete(c.FirewallAcl6s, mkey)
	return nil
}

// Destination address.
type FirewallCentralSnatMapDstAddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// IP pool names for translated address.
type FirewallCentralSnatMapNatIppool struct {

	// IP pool name.
	Name string `json:"name,omitempty"`
}

// Original address.
type FirewallCentralSnatMapOrigAddr struct {

	// Address name.
	Name string `json:"name,omitempty"`
}

// Enable/disable policy status.
type FirewallCentralSnatMapStatus string

const (
	// Enable policy status.
	FirewallCentralSnatMapStatusEnable FirewallCentralSnatMapStatus = "enable"

	// Disable policy status.
	FirewallCentralSnatMapStatusDisable FirewallCentralSnatMapStatus = "disable"
)

// Configure central SNAT policies.
type FirewallCentralSnatMap struct {

	// Destination address.
	DstAddr []FirewallCentralSnatMapDstAddr `json:"dst-addr,omitempty"`

	// IP pool names for translated address.
	NatIppool []FirewallCentralSnatMapNatIppool `json:"nat-ippool,omitempty"`

	// Translated port or port range.
	NatPort string `json:"nat-port,omitempty"`

	// Original address.
	OrigAddr []FirewallCentralSnatMapOrigAddr `json:"orig-addr,omitempty"`

	// Original port.
	OrigPort int `json:"orig-port,omitempty"`

	// Policy ID.
	Policyid int `json:"policyid,omitempty"`

	// Protocol (0 - 255).
	Protocol int `json:"protocol,omitempty"`

	// Enable/disable policy status.
	Status FirewallCentralSnatMapStatus `json:"status,omitempty"`
}

// Returns the value that identifies a FirewallCentralSnatMap
func (x *FirewallCentralSnatMap) MKey() int {
	return x.Policyid
}

// The results of a Get or List operation
type FirewallCentralSnatMapResults struct {
	Results []*FirewallCentralSnatMap `json:"results"`
	Mkey    int                       `json:"mkey"`
	Result
}

// List all FirewallCentralSnatMaps
func (c *WebClient) ListFirewallCentralSnatMaps() (res []*FirewallCentralSnatMap, err error) {
	var results FirewallCentralSnatMapResults
	_, err = c.do(http.MethodGet, "firewall/central-snat-map", nil, nil, &results)
	if err != nil {
		return []*FirewallCentralSnatMap{}, fmt.Errorf("error listing FirewallCentralSnatMaps: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallCentralSnatMap by name
func (c *WebClient) GetFirewallCentralSnatMap(mkey int) (res *FirewallCentralSnatMap, err error) {
	var results FirewallCentralSnatMapResults
	_, err = c.do(http.MethodGet, "firewall/central-snat-map/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallCentralSnatMap{}, fmt.Errorf("error getting FirewallCentralSnatMap '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallCentralSnatMap
func (c *WebClient) CreateFirewallCentralSnatMap(obj *FirewallCentralSnatMap) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/central-snat-map", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallCentralSnatMap '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return
}

// Update a FirewallCentralSnatMap
func (c *WebClient) UpdateFirewallCentralSnatMap(obj *FirewallCentralSnatMap) error {
	_, err := c.do(http.MethodPut, "firewall/central-snat-map/"+strconv.Itoa(obj.Policyid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallCentralSnatMap '%s': %s", strconv.Itoa(obj.Policyid), err.Error())
	}
	return err
}

// Delete a FirewallCentralSnatMap by name
func (c *WebClient) DeleteFirewallCentralSnatMap(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/central-snat-map/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallCentralSnatMap '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallCentralSnatMaps
func (c *FakeClient) ListFirewallCentralSnatMaps() (res []*FirewallCentralSnatMap, err error) {
	for _, r := range c.FirewallCentralSnatMaps {
		res = append(res, r)
	}
	return
}

// Get a FirewallCentralSnatMap by name
func (c *FakeClient) GetFirewallCentralSnatMap(mkey int) (*FirewallCentralSnatMap, error) {
	if res, ok := c.FirewallCentralSnatMaps[mkey]; ok {
		return res, nil
	} else {
		return &FirewallCentralSnatMap{}, fmt.Errorf("error getting FirewallCentralSnatMap '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallCentralSnatMap
func (c *FakeClient) CreateFirewallCentralSnatMap(obj *FirewallCentralSnatMap) (id int, err error) {
	id = c.FirewallCentralSnatMapCounter
	c.FirewallCentralSnatMapCounter++
	c.FirewallCentralSnatMaps[id] = obj
	return
}

// Update a FirewallCentralSnatMap
func (c *FakeClient) UpdateFirewallCentralSnatMap(obj *FirewallCentralSnatMap) (err error) {
	c.FirewallCentralSnatMaps[obj.Policyid] = obj
	return nil
}

// Delete a FirewallCentralSnatMap by name
func (c *FakeClient) DeleteFirewallCentralSnatMap(mkey int) (err error) {
	delete(c.FirewallCentralSnatMaps, mkey)
	return nil
}

// IP translation type.
type FirewallIpTranslationType string

const (
	// SCTP
	FirewallIpTranslationTypeSCTP FirewallIpTranslationType = "SCTP"
)

// Configure firewall IP-translation.
type FirewallIpTranslation struct {

	// End IP.
	Endip string `json:"endip,omitempty"`

	// Mapped start IP.
	MapStartip string `json:"map-startip,omitempty"`

	// Start IP.
	Startip string `json:"startip,omitempty"`

	// IP translation ID.
	Transid int `json:"transid,omitempty"`

	// IP translation type.
	Type FirewallIpTranslationType `json:"type,omitempty"`
}

// Returns the value that identifies a FirewallIpTranslation
func (x *FirewallIpTranslation) MKey() int {
	return x.Transid
}

// The results of a Get or List operation
type FirewallIpTranslationResults struct {
	Results []*FirewallIpTranslation `json:"results"`
	Mkey    int                      `json:"mkey"`
	Result
}

// List all FirewallIpTranslations
func (c *WebClient) ListFirewallIpTranslations() (res []*FirewallIpTranslation, err error) {
	var results FirewallIpTranslationResults
	_, err = c.do(http.MethodGet, "firewall/ip-translation", nil, nil, &results)
	if err != nil {
		return []*FirewallIpTranslation{}, fmt.Errorf("error listing FirewallIpTranslations: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a FirewallIpTranslation by name
func (c *WebClient) GetFirewallIpTranslation(mkey int) (res *FirewallIpTranslation, err error) {
	var results FirewallIpTranslationResults
	_, err = c.do(http.MethodGet, "firewall/ip-translation/"+strconv.Itoa(mkey), nil, nil, &results)
	if err != nil {
		return &FirewallIpTranslation{}, fmt.Errorf("error getting FirewallIpTranslation '%s': %s", strconv.Itoa(mkey), err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new FirewallIpTranslation
func (c *WebClient) CreateFirewallIpTranslation(obj *FirewallIpTranslation) (id int, err error) {
	_, err = c.do(http.MethodPost, "firewall/ip-translation", nil, obj, nil)
	if err != nil {
		return 0, fmt.Errorf("error creating FirewallIpTranslation '%s': %s", strconv.Itoa(obj.Transid), err.Error())
	}
	return
}

// Update a FirewallIpTranslation
func (c *WebClient) UpdateFirewallIpTranslation(obj *FirewallIpTranslation) error {
	_, err := c.do(http.MethodPut, "firewall/ip-translation/"+strconv.Itoa(obj.Transid), nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating FirewallIpTranslation '%s': %s", strconv.Itoa(obj.Transid), err.Error())
	}
	return err
}

// Delete a FirewallIpTranslation by name
func (c *WebClient) DeleteFirewallIpTranslation(mkey int) error {
	_, err := c.do(http.MethodDelete, "firewall/ip-translation/"+strconv.Itoa(mkey), nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting FirewallIpTranslation '%s': %s", mkey, err.Error())
	}
	return err
}

// List all FirewallIpTranslations
func (c *FakeClient) ListFirewallIpTranslations() (res []*FirewallIpTranslation, err error) {
	for _, r := range c.FirewallIpTranslations {
		res = append(res, r)
	}
	return
}

// Get a FirewallIpTranslation by name
func (c *FakeClient) GetFirewallIpTranslation(mkey int) (*FirewallIpTranslation, error) {
	if res, ok := c.FirewallIpTranslations[mkey]; ok {
		return res, nil
	} else {
		return &FirewallIpTranslation{}, fmt.Errorf("error getting FirewallIpTranslation '%s': not found", strconv.Itoa(mkey))
	}
}

// Create a new FirewallIpTranslation
func (c *FakeClient) CreateFirewallIpTranslation(obj *FirewallIpTranslation) (id int, err error) {
	id = c.FirewallIpTranslationCounter
	c.FirewallIpTranslationCounter++
	c.FirewallIpTranslations[id] = obj
	return
}

// Update a FirewallIpTranslation
func (c *FakeClient) UpdateFirewallIpTranslation(obj *FirewallIpTranslation) (err error) {
	c.FirewallIpTranslations[obj.Transid] = obj
	return nil
}

// Delete a FirewallIpTranslation by name
func (c *FakeClient) DeleteFirewallIpTranslation(mkey int) (err error) {
	delete(c.FirewallIpTranslations, mkey)
	return nil
}

// CA certificate range.
type CertificateCaRange string

// CA certificate source.
type CertificateCaSource string

// Enable/disable trusted CA.
type CertificateCaTrusted string

const (
	// Global range.
	CertificateCaRangeGlobal CertificateCaRange = "global"

	// VDOM range.
	CertificateCaRangeVdom CertificateCaRange = "vdom"
)

const (
	// Factory.
	CertificateCaSourceFactory CertificateCaSource = "factory"

	// User.
	CertificateCaSourceUser CertificateCaSource = "user"

	// Bundle file.
	CertificateCaSourceBundle CertificateCaSource = "bundle"

	// Fortiguard.
	CertificateCaSourceFortiguard CertificateCaSource = "fortiguard"
)

const (
	// Trusted CA.
	CertificateCaTrustedEnable CertificateCaTrusted = "enable"

	// Untrusted CA.
	CertificateCaTrustedDisable CertificateCaTrusted = "disable"
)

// CA certificate.
type CertificateCa struct {

	// Days to auto-update before expired, 0=disabled.
	AutoUpdateDays int `json:"auto-update-days,omitempty"`

	// Days to send update before auto-update (0=disabled).
	AutoUpdateDaysWarning int `json:"auto-update-days-warning,omitempty"`

	// CA certificate.
	Ca string `json:"ca,omitempty"`

	// Time at which CA was last updated.
	LastUpdated string `json:"last-updated,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// CA certificate range.
	Range CertificateCaRange `json:"range,omitempty"`

	// URL of SCEP server.
	ScepUrl string `json:"scep-url,omitempty"`

	// CA certificate source.
	Source CertificateCaSource `json:"source,omitempty"`

	// Source IP for communications to SCEP server.
	SourceIp string `json:"source-ip,omitempty"`

	// Enable/disable trusted CA.
	Trusted CertificateCaTrusted `json:"trusted,omitempty"`
}

// Returns the value that identifies a CertificateCa
func (x *CertificateCa) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type CertificateCaResults struct {
	Results []*CertificateCa `json:"results"`
	Mkey    string           `json:"mkey"`
	Result
}

// List all CertificateCas
func (c *WebClient) ListCertificateCas() (res []*CertificateCa, err error) {
	var results CertificateCaResults
	_, err = c.do(http.MethodGet, "certificate/ca", nil, nil, &results)
	if err != nil {
		return []*CertificateCa{}, fmt.Errorf("error listing CertificateCas: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a CertificateCa by name
func (c *WebClient) GetCertificateCa(mkey string) (res *CertificateCa, err error) {
	var results CertificateCaResults
	_, err = c.do(http.MethodGet, "certificate/ca/"+mkey, nil, nil, &results)
	if err != nil {
		return &CertificateCa{}, fmt.Errorf("error getting CertificateCa '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new CertificateCa
func (c *WebClient) CreateCertificateCa(obj *CertificateCa) (id string, err error) {
	_, err = c.do(http.MethodPost, "certificate/ca", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating CertificateCa '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a CertificateCa
func (c *WebClient) UpdateCertificateCa(obj *CertificateCa) error {
	_, err := c.do(http.MethodPut, "certificate/ca/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating CertificateCa '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a CertificateCa by name
func (c *WebClient) DeleteCertificateCa(mkey string) error {
	_, err := c.do(http.MethodDelete, "certificate/ca/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting CertificateCa '%s': %s", mkey, err.Error())
	}
	return err
}

// List all CertificateCas
func (c *FakeClient) ListCertificateCas() (res []*CertificateCa, err error) {
	for _, r := range c.CertificateCas {
		res = append(res, r)
	}
	return
}

// Get a CertificateCa by name
func (c *FakeClient) GetCertificateCa(mkey string) (*CertificateCa, error) {
	if res, ok := c.CertificateCas[mkey]; ok {
		return res, nil
	} else {
		return &CertificateCa{}, fmt.Errorf("error getting CertificateCa '%s': not found", mkey)
	}
}

// Create a new CertificateCa
func (c *FakeClient) CreateCertificateCa(obj *CertificateCa) (id string, err error) {
	id = obj.Name
	c.CertificateCas[id] = obj
	return
}

// Update a CertificateCa
func (c *FakeClient) UpdateCertificateCa(obj *CertificateCa) (err error) {
	c.CertificateCas[obj.Name] = obj
	return nil
}

// Delete a CertificateCa by name
func (c *FakeClient) DeleteCertificateCa(mkey string) (err error) {
	delete(c.CertificateCas, mkey)
	return nil
}

// IKE local ID type.
type CertificateLocalIkeLocalidType string

// Name encoding for auto-regeneration.
type CertificateLocalNameEncoding string

// Certificate range.
type CertificateLocalRange string

// Certificate source.
type CertificateLocalSource string

const (
	// ASN.1 distinguished name.
	CertificateLocalIkeLocalidTypeAsn1dn CertificateLocalIkeLocalidType = "asn1dn"

	// Fully qualified domain name.
	CertificateLocalIkeLocalidTypeFqdn CertificateLocalIkeLocalidType = "fqdn"
)

const (
	// Printable encoding (default).
	CertificateLocalNameEncodingPrintable CertificateLocalNameEncoding = "printable"

	// UTF-8 encoding.
	CertificateLocalNameEncodingUtf8 CertificateLocalNameEncoding = "utf8"
)

const (
	// Global range.
	CertificateLocalRangeGlobal CertificateLocalRange = "global"

	// VDOM range.
	CertificateLocalRangeVdom CertificateLocalRange = "vdom"
)

const (
	// Factory.
	CertificateLocalSourceFactory CertificateLocalSource = "factory"

	// User.
	CertificateLocalSourceUser CertificateLocalSource = "user"

	// Bundle file.
	CertificateLocalSourceBundle CertificateLocalSource = "bundle"

	// Fortiguard.
	CertificateLocalSourceFortiguard CertificateLocalSource = "fortiguard"
)

// Local keys and certificates.
type CertificateLocal struct {

	// Days to auto-regenerate before expired, 0=disabled.
	AutoRegenerateDays int `json:"auto-regenerate-days,omitempty"`

	// Days to send warning before auto-regeneration, 0=disabled.
	AutoRegenerateDaysWarning int `json:"auto-regenerate-days-warning,omitempty"`

	// CA identifier of the CA server for signing via SCEP.
	CaIdentifier string `json:"ca-identifier,omitempty"`

	// Certificate.
	Certificate string `json:"certificate,omitempty"`

	// Comment.
	Comments string `json:"comments,omitempty"`

	// Certificate Signing Request.
	Csr string `json:"csr,omitempty"`

	// IKE local ID.
	IkeLocalid string `json:"ike-localid,omitempty"`

	// IKE local ID type.
	IkeLocalidType CertificateLocalIkeLocalidType `json:"ike-localid-type,omitempty"`

	// Time at which certificate was last updated.
	LastUpdated string `json:"last-updated,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// Name encoding for auto-regeneration.
	NameEncoding CertificateLocalNameEncoding `json:"name-encoding,omitempty"`

	// Password.
	Password string `json:"password,omitempty"`

	// Private key.
	PrivateKey string `json:"private-key,omitempty"`

	// Certificate range.
	Range CertificateLocalRange `json:"range,omitempty"`

	// SCEP server challenge password for auto-regeneration.
	ScepPassword string `json:"scep-password,omitempty"`

	// URL of SCEP server.
	ScepUrl string `json:"scep-url,omitempty"`

	// Certificate source.
	Source CertificateLocalSource `json:"source,omitempty"`

	// Source IP for communications to SCEP server.
	SourceIp string `json:"source-ip,omitempty"`

	// Certificate Signing Request State.
	State string `json:"state,omitempty"`
}

// Returns the value that identifies a CertificateLocal
func (x *CertificateLocal) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type CertificateLocalResults struct {
	Results []*CertificateLocal `json:"results"`
	Mkey    string              `json:"mkey"`
	Result
}

// List all CertificateLocals
func (c *WebClient) ListCertificateLocals() (res []*CertificateLocal, err error) {
	var results CertificateLocalResults
	_, err = c.do(http.MethodGet, "certificate/local", nil, nil, &results)
	if err != nil {
		return []*CertificateLocal{}, fmt.Errorf("error listing CertificateLocals: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a CertificateLocal by name
func (c *WebClient) GetCertificateLocal(mkey string) (res *CertificateLocal, err error) {
	var results CertificateLocalResults
	_, err = c.do(http.MethodGet, "certificate/local/"+mkey, nil, nil, &results)
	if err != nil {
		return &CertificateLocal{}, fmt.Errorf("error getting CertificateLocal '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new CertificateLocal
func (c *WebClient) CreateCertificateLocal(obj *CertificateLocal) (id string, err error) {
	_, err = c.do(http.MethodPost, "certificate/local", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating CertificateLocal '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a CertificateLocal
func (c *WebClient) UpdateCertificateLocal(obj *CertificateLocal) error {
	_, err := c.do(http.MethodPut, "certificate/local/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating CertificateLocal '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a CertificateLocal by name
func (c *WebClient) DeleteCertificateLocal(mkey string) error {
	_, err := c.do(http.MethodDelete, "certificate/local/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting CertificateLocal '%s': %s", mkey, err.Error())
	}
	return err
}

// List all CertificateLocals
func (c *FakeClient) ListCertificateLocals() (res []*CertificateLocal, err error) {
	for _, r := range c.CertificateLocals {
		res = append(res, r)
	}
	return
}

// Get a CertificateLocal by name
func (c *FakeClient) GetCertificateLocal(mkey string) (*CertificateLocal, error) {
	if res, ok := c.CertificateLocals[mkey]; ok {
		return res, nil
	} else {
		return &CertificateLocal{}, fmt.Errorf("error getting CertificateLocal '%s': not found", mkey)
	}
}

// Create a new CertificateLocal
func (c *FakeClient) CreateCertificateLocal(obj *CertificateLocal) (id string, err error) {
	id = obj.Name
	c.CertificateLocals[id] = obj
	return
}

// Update a CertificateLocal
func (c *FakeClient) UpdateCertificateLocal(obj *CertificateLocal) (err error) {
	c.CertificateLocals[obj.Name] = obj
	return nil
}

// Delete a CertificateLocal by name
func (c *FakeClient) DeleteCertificateLocal(mkey string) (err error) {
	delete(c.CertificateLocals, mkey)
	return nil
}

// CRL range.
type CertificateCrlRange string

// CRL source.
type CertificateCrlSource string

const (
	// Global range.
	CertificateCrlRangeGlobal CertificateCrlRange = "global"

	// VDOM range.
	CertificateCrlRangeVdom CertificateCrlRange = "vdom"
)

const (
	// Factory.
	CertificateCrlSourceFactory CertificateCrlSource = "factory"

	// User.
	CertificateCrlSourceUser CertificateCrlSource = "user"

	// Bundle file.
	CertificateCrlSourceBundle CertificateCrlSource = "bundle"

	// Fortiguard.
	CertificateCrlSourceFortiguard CertificateCrlSource = "fortiguard"
)

// Certificate Revocation List.
type CertificateCrl struct {

	// Certificate Revocation List.
	Crl string `json:"crl,omitempty"`

	// URL of HTTP server for CRL update.
	HttpUrl string `json:"http-url,omitempty"`

	// Time at which CRL was last updated.
	LastUpdated string `json:"last-updated,omitempty"`

	// Login password for LDAP server.
	LdapPassword string `json:"ldap-password,omitempty"`

	// LDAP server.
	LdapServer string `json:"ldap-server,omitempty"`

	// Login name for LDAP server.
	LdapUsername string `json:"ldap-username,omitempty"`

	// Name.
	Name string `json:"name,omitempty"`

	// CRL range.
	Range CertificateCrlRange `json:"range,omitempty"`

	// Local certificate used for CRL update via SCEP.
	ScepCert string `json:"scep-cert,omitempty"`

	// URL of CA server for CRL update via SCEP.
	ScepUrl string `json:"scep-url,omitempty"`

	// CRL source.
	Source CertificateCrlSource `json:"source,omitempty"`

	// Source IP for communications to CA (HTTP/SCEP) server.
	SourceIp string `json:"source-ip,omitempty"`

	// Second between updates, 0=disabled.
	UpdateInterval int `json:"update-interval,omitempty"`

	// Virtual domain for CRL update.
	UpdateVdom string `json:"update-vdom,omitempty"`
}

// Returns the value that identifies a CertificateCrl
func (x *CertificateCrl) MKey() string {
	return x.Name
}

// The results of a Get or List operation
type CertificateCrlResults struct {
	Results []*CertificateCrl `json:"results"`
	Mkey    string            `json:"mkey"`
	Result
}

// List all CertificateCrls
func (c *WebClient) ListCertificateCrls() (res []*CertificateCrl, err error) {
	var results CertificateCrlResults
	_, err = c.do(http.MethodGet, "certificate/crl", nil, nil, &results)
	if err != nil {
		return []*CertificateCrl{}, fmt.Errorf("error listing CertificateCrls: %s", err.Error())
	}
	res = results.Results
	return
}

// Get a CertificateCrl by name
func (c *WebClient) GetCertificateCrl(mkey string) (res *CertificateCrl, err error) {
	var results CertificateCrlResults
	_, err = c.do(http.MethodGet, "certificate/crl/"+mkey, nil, nil, &results)
	if err != nil {
		return &CertificateCrl{}, fmt.Errorf("error getting CertificateCrl '%s': %s", mkey, err.Error())
	}
	res = results.Results[0]
	return
}

// Create a new CertificateCrl
func (c *WebClient) CreateCertificateCrl(obj *CertificateCrl) (id string, err error) {
	_, err = c.do(http.MethodPost, "certificate/crl", nil, obj, nil)
	if err != nil {
		return "", fmt.Errorf("error creating CertificateCrl '%s': %s", obj.Name, err.Error())
	}
	return
}

// Update a CertificateCrl
func (c *WebClient) UpdateCertificateCrl(obj *CertificateCrl) error {
	_, err := c.do(http.MethodPut, "certificate/crl/"+obj.Name, nil, obj, nil)
	if err != nil {
		return fmt.Errorf("error updating CertificateCrl '%s': %s", obj.Name, err.Error())
	}
	return err
}

// Delete a CertificateCrl by name
func (c *WebClient) DeleteCertificateCrl(mkey string) error {
	_, err := c.do(http.MethodDelete, "certificate/crl/"+mkey, nil, nil, nil)
	if err != nil {
		return fmt.Errorf("error deleting CertificateCrl '%s': %s", mkey, err.Error())
	}
	return err
}

// List all CertificateCrls
func (c *FakeClient) ListCertificateCrls() (res []*CertificateCrl, err error) {
	for _, r := range c.CertificateCrls {
		res = append(res, r)
	}
	return
}

// Get a CertificateCrl by name
func (c *FakeClient) GetCertificateCrl(mkey string) (*CertificateCrl, error) {
	if res, ok := c.CertificateCrls[mkey]; ok {
		return res, nil
	} else {
		return &CertificateCrl{}, fmt.Errorf("error getting CertificateCrl '%s': not found", mkey)
	}
}

// Create a new CertificateCrl
func (c *FakeClient) CreateCertificateCrl(obj *CertificateCrl) (id string, err error) {
	id = obj.Name
	c.CertificateCrls[id] = obj
	return
}

// Update a CertificateCrl
func (c *FakeClient) UpdateCertificateCrl(obj *CertificateCrl) (err error) {
	c.CertificateCrls[obj.Name] = obj
	return nil
}

// Delete a CertificateCrl by name
func (c *FakeClient) DeleteCertificateCrl(mkey string) (err error) {
	delete(c.CertificateCrls, mkey)
	return nil
}
